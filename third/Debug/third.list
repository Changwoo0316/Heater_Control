
third.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000636c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e88  08006478  08006478  00007478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007300  08007300  00009074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007300  08007300  00008300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007308  08007308  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007308  08007308  00008308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800730c  0800730c  0000830c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08007310  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000076c  20000074  08007384  00009074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007e0  08007384  000097e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c44  00000000  00000000  0000909d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003270  00000000  00000000  0001cce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001470  00000000  00000000  0001ff58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fea  00000000  00000000  000213c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a7c7  00000000  00000000  000223b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018aac  00000000  00000000  0003cb79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091719  00000000  00000000  00055625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6d3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e18  00000000  00000000  000e6d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000ecb9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08006460 	.word	0x08006460

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08006460 	.word	0x08006460

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_fmul>:
 800015c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000160:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000164:	bf1e      	ittt	ne
 8000166:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016a:	ea92 0f0c 	teqne	r2, ip
 800016e:	ea93 0f0c 	teqne	r3, ip
 8000172:	d06f      	beq.n	8000254 <__aeabi_fmul+0xf8>
 8000174:	441a      	add	r2, r3
 8000176:	ea80 0c01 	eor.w	ip, r0, r1
 800017a:	0240      	lsls	r0, r0, #9
 800017c:	bf18      	it	ne
 800017e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000182:	d01e      	beq.n	80001c2 <__aeabi_fmul+0x66>
 8000184:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000188:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800018c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000190:	fba0 3101 	umull	r3, r1, r0, r1
 8000194:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000198:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800019c:	bf3e      	ittt	cc
 800019e:	0049      	lslcc	r1, r1, #1
 80001a0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a4:	005b      	lslcc	r3, r3, #1
 80001a6:	ea40 0001 	orr.w	r0, r0, r1
 80001aa:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001ae:	2afd      	cmp	r2, #253	@ 0xfd
 80001b0:	d81d      	bhi.n	80001ee <__aeabi_fmul+0x92>
 80001b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ba:	bf08      	it	eq
 80001bc:	f020 0001 	biceq.w	r0, r0, #1
 80001c0:	4770      	bx	lr
 80001c2:	f090 0f00 	teq	r0, #0
 80001c6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ca:	bf08      	it	eq
 80001cc:	0249      	lsleq	r1, r1, #9
 80001ce:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001d6:	3a7f      	subs	r2, #127	@ 0x7f
 80001d8:	bfc2      	ittt	gt
 80001da:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001de:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e2:	4770      	bxgt	lr
 80001e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001e8:	f04f 0300 	mov.w	r3, #0
 80001ec:	3a01      	subs	r2, #1
 80001ee:	dc5d      	bgt.n	80002ac <__aeabi_fmul+0x150>
 80001f0:	f112 0f19 	cmn.w	r2, #25
 80001f4:	bfdc      	itt	le
 80001f6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fa:	4770      	bxle	lr
 80001fc:	f1c2 0200 	rsb	r2, r2, #0
 8000200:	0041      	lsls	r1, r0, #1
 8000202:	fa21 f102 	lsr.w	r1, r1, r2
 8000206:	f1c2 0220 	rsb	r2, r2, #32
 800020a:	fa00 fc02 	lsl.w	ip, r0, r2
 800020e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000212:	f140 0000 	adc.w	r0, r0, #0
 8000216:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021a:	bf08      	it	eq
 800021c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000220:	4770      	bx	lr
 8000222:	f092 0f00 	teq	r2, #0
 8000226:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022a:	bf02      	ittt	eq
 800022c:	0040      	lsleq	r0, r0, #1
 800022e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000232:	3a01      	subeq	r2, #1
 8000234:	d0f9      	beq.n	800022a <__aeabi_fmul+0xce>
 8000236:	ea40 000c 	orr.w	r0, r0, ip
 800023a:	f093 0f00 	teq	r3, #0
 800023e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000242:	bf02      	ittt	eq
 8000244:	0049      	lsleq	r1, r1, #1
 8000246:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024a:	3b01      	subeq	r3, #1
 800024c:	d0f9      	beq.n	8000242 <__aeabi_fmul+0xe6>
 800024e:	ea41 010c 	orr.w	r1, r1, ip
 8000252:	e78f      	b.n	8000174 <__aeabi_fmul+0x18>
 8000254:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000258:	ea92 0f0c 	teq	r2, ip
 800025c:	bf18      	it	ne
 800025e:	ea93 0f0c 	teqne	r3, ip
 8000262:	d00a      	beq.n	800027a <__aeabi_fmul+0x11e>
 8000264:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000268:	bf18      	it	ne
 800026a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800026e:	d1d8      	bne.n	8000222 <__aeabi_fmul+0xc6>
 8000270:	ea80 0001 	eor.w	r0, r0, r1
 8000274:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000278:	4770      	bx	lr
 800027a:	f090 0f00 	teq	r0, #0
 800027e:	bf17      	itett	ne
 8000280:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000284:	4608      	moveq	r0, r1
 8000286:	f091 0f00 	teqne	r1, #0
 800028a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800028e:	d014      	beq.n	80002ba <__aeabi_fmul+0x15e>
 8000290:	ea92 0f0c 	teq	r2, ip
 8000294:	d101      	bne.n	800029a <__aeabi_fmul+0x13e>
 8000296:	0242      	lsls	r2, r0, #9
 8000298:	d10f      	bne.n	80002ba <__aeabi_fmul+0x15e>
 800029a:	ea93 0f0c 	teq	r3, ip
 800029e:	d103      	bne.n	80002a8 <__aeabi_fmul+0x14c>
 80002a0:	024b      	lsls	r3, r1, #9
 80002a2:	bf18      	it	ne
 80002a4:	4608      	movne	r0, r1
 80002a6:	d108      	bne.n	80002ba <__aeabi_fmul+0x15e>
 80002a8:	ea80 0001 	eor.w	r0, r0, r1
 80002ac:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002b8:	4770      	bx	lr
 80002ba:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002be:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c2:	4770      	bx	lr

080002c4 <__aeabi_frsub>:
 80002c4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002c8:	e002      	b.n	80002d0 <__addsf3>
 80002ca:	bf00      	nop

080002cc <__aeabi_fsub>:
 80002cc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002d0 <__addsf3>:
 80002d0:	0042      	lsls	r2, r0, #1
 80002d2:	bf1f      	itttt	ne
 80002d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002d8:	ea92 0f03 	teqne	r2, r3
 80002dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002e4:	d06a      	beq.n	80003bc <__addsf3+0xec>
 80002e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002ee:	bfc1      	itttt	gt
 80002f0:	18d2      	addgt	r2, r2, r3
 80002f2:	4041      	eorgt	r1, r0
 80002f4:	4048      	eorgt	r0, r1
 80002f6:	4041      	eorgt	r1, r0
 80002f8:	bfb8      	it	lt
 80002fa:	425b      	neglt	r3, r3
 80002fc:	2b19      	cmp	r3, #25
 80002fe:	bf88      	it	hi
 8000300:	4770      	bxhi	lr
 8000302:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000306:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800030a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4240      	negne	r0, r0
 8000312:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000316:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800031a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800031e:	bf18      	it	ne
 8000320:	4249      	negne	r1, r1
 8000322:	ea92 0f03 	teq	r2, r3
 8000326:	d03f      	beq.n	80003a8 <__addsf3+0xd8>
 8000328:	f1a2 0201 	sub.w	r2, r2, #1
 800032c:	fa41 fc03 	asr.w	ip, r1, r3
 8000330:	eb10 000c 	adds.w	r0, r0, ip
 8000334:	f1c3 0320 	rsb	r3, r3, #32
 8000338:	fa01 f103 	lsl.w	r1, r1, r3
 800033c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000340:	d502      	bpl.n	8000348 <__addsf3+0x78>
 8000342:	4249      	negs	r1, r1
 8000344:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000348:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800034c:	d313      	bcc.n	8000376 <__addsf3+0xa6>
 800034e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000352:	d306      	bcc.n	8000362 <__addsf3+0x92>
 8000354:	0840      	lsrs	r0, r0, #1
 8000356:	ea4f 0131 	mov.w	r1, r1, rrx
 800035a:	f102 0201 	add.w	r2, r2, #1
 800035e:	2afe      	cmp	r2, #254	@ 0xfe
 8000360:	d251      	bcs.n	8000406 <__addsf3+0x136>
 8000362:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000366:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800036a:	bf08      	it	eq
 800036c:	f020 0001 	biceq.w	r0, r0, #1
 8000370:	ea40 0003 	orr.w	r0, r0, r3
 8000374:	4770      	bx	lr
 8000376:	0049      	lsls	r1, r1, #1
 8000378:	eb40 0000 	adc.w	r0, r0, r0
 800037c:	3a01      	subs	r2, #1
 800037e:	bf28      	it	cs
 8000380:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000384:	d2ed      	bcs.n	8000362 <__addsf3+0x92>
 8000386:	fab0 fc80 	clz	ip, r0
 800038a:	f1ac 0c08 	sub.w	ip, ip, #8
 800038e:	ebb2 020c 	subs.w	r2, r2, ip
 8000392:	fa00 f00c 	lsl.w	r0, r0, ip
 8000396:	bfaa      	itet	ge
 8000398:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800039c:	4252      	neglt	r2, r2
 800039e:	4318      	orrge	r0, r3
 80003a0:	bfbc      	itt	lt
 80003a2:	40d0      	lsrlt	r0, r2
 80003a4:	4318      	orrlt	r0, r3
 80003a6:	4770      	bx	lr
 80003a8:	f092 0f00 	teq	r2, #0
 80003ac:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003b0:	bf06      	itte	eq
 80003b2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003b6:	3201      	addeq	r2, #1
 80003b8:	3b01      	subne	r3, #1
 80003ba:	e7b5      	b.n	8000328 <__addsf3+0x58>
 80003bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003c4:	bf18      	it	ne
 80003c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ca:	d021      	beq.n	8000410 <__addsf3+0x140>
 80003cc:	ea92 0f03 	teq	r2, r3
 80003d0:	d004      	beq.n	80003dc <__addsf3+0x10c>
 80003d2:	f092 0f00 	teq	r2, #0
 80003d6:	bf08      	it	eq
 80003d8:	4608      	moveq	r0, r1
 80003da:	4770      	bx	lr
 80003dc:	ea90 0f01 	teq	r0, r1
 80003e0:	bf1c      	itt	ne
 80003e2:	2000      	movne	r0, #0
 80003e4:	4770      	bxne	lr
 80003e6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003ea:	d104      	bne.n	80003f6 <__addsf3+0x126>
 80003ec:	0040      	lsls	r0, r0, #1
 80003ee:	bf28      	it	cs
 80003f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80003f4:	4770      	bx	lr
 80003f6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80003fa:	bf3c      	itt	cc
 80003fc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000400:	4770      	bxcc	lr
 8000402:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000406:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800040a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800040e:	4770      	bx	lr
 8000410:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000414:	bf16      	itet	ne
 8000416:	4608      	movne	r0, r1
 8000418:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800041c:	4601      	movne	r1, r0
 800041e:	0242      	lsls	r2, r0, #9
 8000420:	bf06      	itte	eq
 8000422:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000426:	ea90 0f01 	teqeq	r0, r1
 800042a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800042e:	4770      	bx	lr

08000430 <__aeabi_ui2f>:
 8000430:	f04f 0300 	mov.w	r3, #0
 8000434:	e004      	b.n	8000440 <__aeabi_i2f+0x8>
 8000436:	bf00      	nop

08000438 <__aeabi_i2f>:
 8000438:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	ea5f 0c00 	movs.w	ip, r0
 8000444:	bf08      	it	eq
 8000446:	4770      	bxeq	lr
 8000448:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800044c:	4601      	mov	r1, r0
 800044e:	f04f 0000 	mov.w	r0, #0
 8000452:	e01c      	b.n	800048e <__aeabi_l2f+0x2a>

08000454 <__aeabi_ul2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f04f 0300 	mov.w	r3, #0
 8000460:	e00a      	b.n	8000478 <__aeabi_l2f+0x14>
 8000462:	bf00      	nop

08000464 <__aeabi_l2f>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000470:	d502      	bpl.n	8000478 <__aeabi_l2f+0x14>
 8000472:	4240      	negs	r0, r0
 8000474:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000478:	ea5f 0c01 	movs.w	ip, r1
 800047c:	bf02      	ittt	eq
 800047e:	4684      	moveq	ip, r0
 8000480:	4601      	moveq	r1, r0
 8000482:	2000      	moveq	r0, #0
 8000484:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000488:	bf08      	it	eq
 800048a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800048e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000492:	fabc f28c 	clz	r2, ip
 8000496:	3a08      	subs	r2, #8
 8000498:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800049c:	db10      	blt.n	80004c0 <__aeabi_l2f+0x5c>
 800049e:	fa01 fc02 	lsl.w	ip, r1, r2
 80004a2:	4463      	add	r3, ip
 80004a4:	fa00 fc02 	lsl.w	ip, r0, r2
 80004a8:	f1c2 0220 	rsb	r2, r2, #32
 80004ac:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004b0:	fa20 f202 	lsr.w	r2, r0, r2
 80004b4:	eb43 0002 	adc.w	r0, r3, r2
 80004b8:	bf08      	it	eq
 80004ba:	f020 0001 	biceq.w	r0, r0, #1
 80004be:	4770      	bx	lr
 80004c0:	f102 0220 	add.w	r2, r2, #32
 80004c4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004c8:	f1c2 0220 	rsb	r2, r2, #32
 80004cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004d0:	fa21 f202 	lsr.w	r2, r1, r2
 80004d4:	eb43 0002 	adc.w	r0, r3, r2
 80004d8:	bf08      	it	eq
 80004da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004de:	4770      	bx	lr

080004e0 <__aeabi_f2iz>:
 80004e0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004e4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80004e8:	d30f      	bcc.n	800050a <__aeabi_f2iz+0x2a>
 80004ea:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80004ee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004f2:	d90d      	bls.n	8000510 <__aeabi_f2iz+0x30>
 80004f4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80004fc:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000500:	fa23 f002 	lsr.w	r0, r3, r2
 8000504:	bf18      	it	ne
 8000506:	4240      	negne	r0, r0
 8000508:	4770      	bx	lr
 800050a:	f04f 0000 	mov.w	r0, #0
 800050e:	4770      	bx	lr
 8000510:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000514:	d101      	bne.n	800051a <__aeabi_f2iz+0x3a>
 8000516:	0242      	lsls	r2, r0, #9
 8000518:	d105      	bne.n	8000526 <__aeabi_f2iz+0x46>
 800051a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800051e:	bf08      	it	eq
 8000520:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000524:	4770      	bx	lr
 8000526:	f04f 0000 	mov.w	r0, #0
 800052a:	4770      	bx	lr

0800052c <Ds18b20_Init>:
		DS18B20_DisableAlarmTemperature(&OneWire,  temperSensor.Address);

		m_init = 1;
}
bool	Ds18b20_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
	uint8_t	Ds18b20TryToFind=5;
 8000532:	2305      	movs	r3, #5
 8000534:	71fb      	strb	r3, [r7, #7]
	do
	{
		OneWire_Init(&OneWire,_DS18B20_GPIO ,_DS18B20_PIN);
 8000536:	2208      	movs	r2, #8
 8000538:	4937      	ldr	r1, [pc, #220]	@ (8000618 <Ds18b20_Init+0xec>)
 800053a:	4838      	ldr	r0, [pc, #224]	@ (800061c <Ds18b20_Init+0xf0>)
 800053c:	f000 fb5c 	bl	8000bf8 <OneWire_Init>
		TempSensorCount = 0;	
 8000540:	4b37      	ldr	r3, [pc, #220]	@ (8000620 <Ds18b20_Init+0xf4>)
 8000542:	2200      	movs	r2, #0
 8000544:	701a      	strb	r2, [r3, #0]
		while(HAL_GetTick() < 3000)
 8000546:	e002      	b.n	800054e <Ds18b20_Init+0x22>
			Ds18b20Delay(100);
 8000548:	2064      	movs	r0, #100	@ 0x64
 800054a:	f002 f9a3 	bl	8002894 <HAL_Delay>
		while(HAL_GetTick() < 3000)
 800054e:	f002 f997 	bl	8002880 <HAL_GetTick>
 8000552:	4603      	mov	r3, r0
 8000554:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000558:	4293      	cmp	r3, r2
 800055a:	d9f5      	bls.n	8000548 <Ds18b20_Init+0x1c>
		OneWireDevices = OneWire_First(&OneWire);
 800055c:	482f      	ldr	r0, [pc, #188]	@ (800061c <Ds18b20_Init+0xf0>)
 800055e:	f000 fc60 	bl	8000e22 <OneWire_First>
 8000562:	4603      	mov	r3, r0
 8000564:	461a      	mov	r2, r3
 8000566:	4b2f      	ldr	r3, [pc, #188]	@ (8000624 <Ds18b20_Init+0xf8>)
 8000568:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 800056a:	e019      	b.n	80005a0 <Ds18b20_Init+0x74>
		{
			Ds18b20Delay(100);
 800056c:	2064      	movs	r0, #100	@ 0x64
 800056e:	f002 f991 	bl	8002894 <HAL_Delay>
			TempSensorCount++;
 8000572:	4b2b      	ldr	r3, [pc, #172]	@ (8000620 <Ds18b20_Init+0xf4>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	3301      	adds	r3, #1
 8000578:	b2da      	uxtb	r2, r3
 800057a:	4b29      	ldr	r3, [pc, #164]	@ (8000620 <Ds18b20_Init+0xf4>)
 800057c:	701a      	strb	r2, [r3, #0]
			OneWire_GetFullROM(&OneWire, ds18b20[TempSensorCount-1].Address);
 800057e:	4b28      	ldr	r3, [pc, #160]	@ (8000620 <Ds18b20_Init+0xf4>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	3b01      	subs	r3, #1
 8000584:	011b      	lsls	r3, r3, #4
 8000586:	4a28      	ldr	r2, [pc, #160]	@ (8000628 <Ds18b20_Init+0xfc>)
 8000588:	4413      	add	r3, r2
 800058a:	4619      	mov	r1, r3
 800058c:	4823      	ldr	r0, [pc, #140]	@ (800061c <Ds18b20_Init+0xf0>)
 800058e:	f000 fd5c 	bl	800104a <OneWire_GetFullROM>
			OneWireDevices = OneWire_Next(&OneWire);
 8000592:	4822      	ldr	r0, [pc, #136]	@ (800061c <Ds18b20_Init+0xf0>)
 8000594:	f000 fc55 	bl	8000e42 <OneWire_Next>
 8000598:	4603      	mov	r3, r0
 800059a:	461a      	mov	r2, r3
 800059c:	4b21      	ldr	r3, [pc, #132]	@ (8000624 <Ds18b20_Init+0xf8>)
 800059e:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 80005a0:	4b20      	ldr	r3, [pc, #128]	@ (8000624 <Ds18b20_Init+0xf8>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d1e1      	bne.n	800056c <Ds18b20_Init+0x40>
		}
		if(TempSensorCount>0)
 80005a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000620 <Ds18b20_Init+0xf4>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d106      	bne.n	80005be <Ds18b20_Init+0x92>
			break;
		Ds18b20TryToFind--;
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	3b01      	subs	r3, #1
 80005b4:	71fb      	strb	r3, [r7, #7]
	}while(Ds18b20TryToFind>0);
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d1bc      	bne.n	8000536 <Ds18b20_Init+0xa>
 80005bc:	e000      	b.n	80005c0 <Ds18b20_Init+0x94>
			break;
 80005be:	bf00      	nop
	if(Ds18b20TryToFind==0)
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d101      	bne.n	80005ca <Ds18b20_Init+0x9e>
		return false;
 80005c6:	2300      	movs	r3, #0
 80005c8:	e022      	b.n	8000610 <Ds18b20_Init+0xe4>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 80005ca:	2300      	movs	r3, #0
 80005cc:	71bb      	strb	r3, [r7, #6]
 80005ce:	e019      	b.n	8000604 <Ds18b20_Init+0xd8>
	{
		Ds18b20Delay(50);
 80005d0:	2032      	movs	r0, #50	@ 0x32
 80005d2:	f002 f95f 	bl	8002894 <HAL_Delay>
    DS18B20_SetResolution(&OneWire, ds18b20[i].Address, DS18B20_Resolution_9bits);
 80005d6:	79bb      	ldrb	r3, [r7, #6]
 80005d8:	011b      	lsls	r3, r3, #4
 80005da:	4a13      	ldr	r2, [pc, #76]	@ (8000628 <Ds18b20_Init+0xfc>)
 80005dc:	4413      	add	r3, r2
 80005de:	2209      	movs	r2, #9
 80005e0:	4619      	mov	r1, r3
 80005e2:	480e      	ldr	r0, [pc, #56]	@ (800061c <Ds18b20_Init+0xf0>)
 80005e4:	f000 f9a0 	bl	8000928 <DS18B20_SetResolution>
		Ds18b20Delay(50);
 80005e8:	2032      	movs	r0, #50	@ 0x32
 80005ea:	f002 f953 	bl	8002894 <HAL_Delay>
    DS18B20_DisableAlarmTemperature(&OneWire,  ds18b20[i].Address);
 80005ee:	79bb      	ldrb	r3, [r7, #6]
 80005f0:	011b      	lsls	r3, r3, #4
 80005f2:	4a0d      	ldr	r2, [pc, #52]	@ (8000628 <Ds18b20_Init+0xfc>)
 80005f4:	4413      	add	r3, r2
 80005f6:	4619      	mov	r1, r3
 80005f8:	4808      	ldr	r0, [pc, #32]	@ (800061c <Ds18b20_Init+0xf0>)
 80005fa:	f000 fa2d 	bl	8000a58 <DS18B20_DisableAlarmTemperature>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 80005fe:	79bb      	ldrb	r3, [r7, #6]
 8000600:	3301      	adds	r3, #1
 8000602:	71bb      	strb	r3, [r7, #6]
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <Ds18b20_Init+0xf4>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	79ba      	ldrb	r2, [r7, #6]
 800060a:	429a      	cmp	r2, r3
 800060c:	d3e0      	bcc.n	80005d0 <Ds18b20_Init+0xa4>
  }
	return true;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40010800 	.word	0x40010800
 800061c:	200000a0 	.word	0x200000a0
 8000620:	200000b5 	.word	0x200000b5
 8000624:	200000b4 	.word	0x200000b4
 8000628:	20000090 	.word	0x20000090

0800062c <Ds18b20_ManualConvert>:
#endif
//###########################################################################################
bool	Ds18b20_ManualConvert(void)
{
 800062c:	b590      	push	{r4, r7, lr}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
		return false;
	else
		return true;	
	#else	

	temper_busy = 1;
 8000632:	4b34      	ldr	r3, [pc, #208]	@ (8000704 <Ds18b20_ManualConvert+0xd8>)
 8000634:	2201      	movs	r2, #1
 8000636:	701a      	strb	r2, [r3, #0]

	Ds18b20Timeout=_DS18B20_CONVERT_TIMEOUT_MS/10;
 8000638:	4b33      	ldr	r3, [pc, #204]	@ (8000708 <Ds18b20_ManualConvert+0xdc>)
 800063a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800063e:	801a      	strh	r2, [r3, #0]
	DS18B20_StartAll(&OneWire);
 8000640:	4832      	ldr	r0, [pc, #200]	@ (800070c <Ds18b20_ManualConvert+0xe0>)
 8000642:	f000 f869 	bl	8000718 <DS18B20_StartAll>

	Ds18b20Delay(100);
 8000646:	2064      	movs	r0, #100	@ 0x64
 8000648:	f002 f924 	bl	8002894 <HAL_Delay>

	while (!DS18B20_AllDone(&OneWire))
 800064c:	e00c      	b.n	8000668 <Ds18b20_ManualConvert+0x3c>
	{
		Ds18b20Delay(5);
 800064e:	2005      	movs	r0, #5
 8000650:	f002 f920 	bl	8002894 <HAL_Delay>
		Ds18b20Timeout-=1;
 8000654:	4b2c      	ldr	r3, [pc, #176]	@ (8000708 <Ds18b20_ManualConvert+0xdc>)
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	3b01      	subs	r3, #1
 800065a:	b29a      	uxth	r2, r3
 800065c:	4b2a      	ldr	r3, [pc, #168]	@ (8000708 <Ds18b20_ManualConvert+0xdc>)
 800065e:	801a      	strh	r2, [r3, #0]
		if(Ds18b20Timeout==0)
 8000660:	4b29      	ldr	r3, [pc, #164]	@ (8000708 <Ds18b20_ManualConvert+0xdc>)
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d006      	beq.n	8000676 <Ds18b20_ManualConvert+0x4a>
	while (!DS18B20_AllDone(&OneWire))
 8000668:	4828      	ldr	r0, [pc, #160]	@ (800070c <Ds18b20_ManualConvert+0xe0>)
 800066a:	f000 fa50 	bl	8000b0e <DS18B20_AllDone>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d0ec      	beq.n	800064e <Ds18b20_ManualConvert+0x22>
 8000674:	e000      	b.n	8000678 <Ds18b20_ManualConvert+0x4c>
			break;
 8000676:	bf00      	nop
	}	
	if(Ds18b20Timeout>0)
 8000678:	4b23      	ldr	r3, [pc, #140]	@ (8000708 <Ds18b20_ManualConvert+0xdc>)
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d024      	beq.n	80006ca <Ds18b20_ManualConvert+0x9e>
	{
		for (uint8_t i = 0; i < TempSensorCount; i++)
 8000680:	2300      	movs	r3, #0
 8000682:	71fb      	strb	r3, [r7, #7]
 8000684:	e01b      	b.n	80006be <Ds18b20_ManualConvert+0x92>
		{
			Ds18b20Delay(30);
 8000686:	201e      	movs	r0, #30
 8000688:	f002 f904 	bl	8002894 <HAL_Delay>

			ds18b20[i].DataIsValid = DS18B20_Read(&OneWire, ds18b20[i].Address, &ds18b20[i].Temperature);
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	011b      	lsls	r3, r3, #4
 8000690:	4a1f      	ldr	r2, [pc, #124]	@ (8000710 <Ds18b20_ManualConvert+0xe4>)
 8000692:	1899      	adds	r1, r3, r2
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	011b      	lsls	r3, r3, #4
 8000698:	3308      	adds	r3, #8
 800069a:	4a1d      	ldr	r2, [pc, #116]	@ (8000710 <Ds18b20_ManualConvert+0xe4>)
 800069c:	4413      	add	r3, r2
 800069e:	79fc      	ldrb	r4, [r7, #7]
 80006a0:	461a      	mov	r2, r3
 80006a2:	481a      	ldr	r0, [pc, #104]	@ (800070c <Ds18b20_ManualConvert+0xe0>)
 80006a4:	f000 f84c 	bl	8000740 <DS18B20_Read>
 80006a8:	4603      	mov	r3, r0
 80006aa:	4619      	mov	r1, r3
 80006ac:	4a18      	ldr	r2, [pc, #96]	@ (8000710 <Ds18b20_ManualConvert+0xe4>)
 80006ae:	0123      	lsls	r3, r4, #4
 80006b0:	4413      	add	r3, r2
 80006b2:	330c      	adds	r3, #12
 80006b4:	460a      	mov	r2, r1
 80006b6:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < TempSensorCount; i++)
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	3301      	adds	r3, #1
 80006bc:	71fb      	strb	r3, [r7, #7]
 80006be:	4b15      	ldr	r3, [pc, #84]	@ (8000714 <Ds18b20_ManualConvert+0xe8>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	79fa      	ldrb	r2, [r7, #7]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d3de      	bcc.n	8000686 <Ds18b20_ManualConvert+0x5a>
 80006c8:	e011      	b.n	80006ee <Ds18b20_ManualConvert+0xc2>

		}
	}
	else
	{
		for (uint8_t i = 0; i < TempSensorCount; i++)
 80006ca:	2300      	movs	r3, #0
 80006cc:	71bb      	strb	r3, [r7, #6]
 80006ce:	e009      	b.n	80006e4 <Ds18b20_ManualConvert+0xb8>
			ds18b20[i].DataIsValid = false;
 80006d0:	79bb      	ldrb	r3, [r7, #6]
 80006d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000710 <Ds18b20_ManualConvert+0xe4>)
 80006d4:	011b      	lsls	r3, r3, #4
 80006d6:	4413      	add	r3, r2
 80006d8:	330c      	adds	r3, #12
 80006da:	2200      	movs	r2, #0
 80006dc:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < TempSensorCount; i++)
 80006de:	79bb      	ldrb	r3, [r7, #6]
 80006e0:	3301      	adds	r3, #1
 80006e2:	71bb      	strb	r3, [r7, #6]
 80006e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000714 <Ds18b20_ManualConvert+0xe8>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	79ba      	ldrb	r2, [r7, #6]
 80006ea:	429a      	cmp	r2, r3
 80006ec:	d3f0      	bcc.n	80006d0 <Ds18b20_ManualConvert+0xa4>
	}

	//temper_busy = 0;
	//Ds18b20Delay(10);
	if(Ds18b20Timeout==0){
 80006ee:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <Ds18b20_ManualConvert+0xdc>)
 80006f0:	881b      	ldrh	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d101      	bne.n	80006fa <Ds18b20_ManualConvert+0xce>

		return false;
 80006f6:	2300      	movs	r3, #0
 80006f8:	e000      	b.n	80006fc <Ds18b20_ManualConvert+0xd0>
	}
	else{

		return true;
 80006fa:	2301      	movs	r3, #1
	}
	#endif
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	bd90      	pop	{r4, r7, pc}
 8000704:	200004e8 	.word	0x200004e8
 8000708:	200000b6 	.word	0x200000b6
 800070c:	200000a0 	.word	0x200000a0
 8000710:	20000090 	.word	0x20000090
 8000714:	200000b5 	.word	0x200000b5

08000718 <DS18B20_StartAll>:
	
	return 1;
}

void DS18B20_StartAll(OneWire_t* OneWire)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	/* Reset pulse */
	OneWire_Reset(OneWire);
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f000 fa97 	bl	8000c54 <OneWire_Reset>
	/* Skip rom */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 8000726:	21cc      	movs	r1, #204	@ 0xcc
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f000 fb3b 	bl	8000da4 <OneWire_WriteByte>
	/* Start conversion on all connected devices */
	OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 800072e:	2144      	movs	r1, #68	@ 0x44
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f000 fb37 	bl	8000da4 <OneWire_WriteByte>
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <DS18B20_Read>:

bool DS18B20_Read(OneWire_t* OneWire, uint8_t *ROM, float *destination) 
{
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b08b      	sub	sp, #44	@ 0x2c
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	607a      	str	r2, [r7, #4]
	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	float decimal;
	uint8_t i = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	77fb      	strb	r3, [r7, #31]
	uint8_t data[9];
	uint8_t crc;
	
	/* Check if device is DS18B20 */
	if (!DS18B20_Is(ROM)) {
 8000756:	68b8      	ldr	r0, [r7, #8]
 8000758:	f000 f96e 	bl	8000a38 <DS18B20_Is>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d101      	bne.n	8000766 <DS18B20_Read+0x26>
		return false;
 8000762:	2300      	movs	r3, #0
 8000764:	e0da      	b.n	800091c <DS18B20_Read+0x1dc>
	}
	
	/* Check if line is released, if it is, then conversion is complete */
	if (!OneWire_ReadBit(OneWire)) 
 8000766:	68f8      	ldr	r0, [r7, #12]
 8000768:	f000 faea 	bl	8000d40 <OneWire_ReadBit>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d101      	bne.n	8000776 <DS18B20_Read+0x36>
	{
		/* Conversion is not finished yet */
		return false; 
 8000772:	2300      	movs	r3, #0
 8000774:	e0d2      	b.n	800091c <DS18B20_Read+0x1dc>
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 8000776:	68f8      	ldr	r0, [r7, #12]
 8000778:	f000 fa6c 	bl	8000c54 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 800077c:	68b9      	ldr	r1, [r7, #8]
 800077e:	68f8      	ldr	r0, [r7, #12]
 8000780:	f000 fc44 	bl	800100c <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8000784:	21be      	movs	r1, #190	@ 0xbe
 8000786:	68f8      	ldr	r0, [r7, #12]
 8000788:	f000 fb0c 	bl	8000da4 <OneWire_WriteByte>
	
	/* Get data */
	for (i = 0; i < 9; i++) 
 800078c:	2300      	movs	r3, #0
 800078e:	77fb      	strb	r3, [r7, #31]
 8000790:	e00d      	b.n	80007ae <DS18B20_Read+0x6e>
	{
		/* Read byte by byte */
		data[i] = OneWire_ReadByte(OneWire);
 8000792:	7ffc      	ldrb	r4, [r7, #31]
 8000794:	68f8      	ldr	r0, [r7, #12]
 8000796:	f000 fb23 	bl	8000de0 <OneWire_ReadByte>
 800079a:	4603      	mov	r3, r0
 800079c:	461a      	mov	r2, r3
 800079e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80007a2:	443b      	add	r3, r7
 80007a4:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 9; i++) 
 80007a8:	7ffb      	ldrb	r3, [r7, #31]
 80007aa:	3301      	adds	r3, #1
 80007ac:	77fb      	strb	r3, [r7, #31]
 80007ae:	7ffb      	ldrb	r3, [r7, #31]
 80007b0:	2b08      	cmp	r3, #8
 80007b2:	d9ee      	bls.n	8000792 <DS18B20_Read+0x52>
	}
	
	/* Calculate CRC */
	crc = OneWire_CRC8(data, 8);
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	2108      	movs	r1, #8
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 fc61 	bl	8001082 <OneWire_CRC8>
 80007c0:	4603      	mov	r3, r0
 80007c2:	77bb      	strb	r3, [r7, #30]
	
	/* Check if CRC is ok */
	if (crc != data[8])
 80007c4:	7f3b      	ldrb	r3, [r7, #28]
 80007c6:	7fba      	ldrb	r2, [r7, #30]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d001      	beq.n	80007d0 <DS18B20_Read+0x90>
		/* CRC invalid */
		return 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	e0a5      	b.n	800091c <DS18B20_Read+0x1dc>

	
	/* First two bytes of scratchpad are temperature values */
	temperature = data[0] | (data[1] << 8);
 80007d0:	7d3b      	ldrb	r3, [r7, #20]
 80007d2:	b21a      	sxth	r2, r3
 80007d4:	7d7b      	ldrb	r3, [r7, #21]
 80007d6:	b21b      	sxth	r3, r3
 80007d8:	021b      	lsls	r3, r3, #8
 80007da:	b21b      	sxth	r3, r3
 80007dc:	4313      	orrs	r3, r2
 80007de:	b21b      	sxth	r3, r3
 80007e0:	84fb      	strh	r3, [r7, #38]	@ 0x26

	/* Reset line */
	OneWire_Reset(OneWire);
 80007e2:	68f8      	ldr	r0, [r7, #12]
 80007e4:	f000 fa36 	bl	8000c54 <OneWire_Reset>
	
	/* Check if temperature is negative */
	if (temperature & 0x8000)
 80007e8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	da05      	bge.n	80007fc <DS18B20_Read+0xbc>
	{
		/* Two's complement, temperature is negative */
		temperature = ~temperature + 1;
 80007f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80007f2:	425b      	negs	r3, r3
 80007f4:	84fb      	strh	r3, [r7, #38]	@ 0x26
		minus = 1;
 80007f6:	2301      	movs	r3, #1
 80007f8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	}

	
	/* Get sensor resolution */
	resolution = ((data[4] & 0x60) >> 5) + 9;
 80007fc:	7e3b      	ldrb	r3, [r7, #24]
 80007fe:	115b      	asrs	r3, r3, #5
 8000800:	b2db      	uxtb	r3, r3
 8000802:	f003 0303 	and.w	r3, r3, #3
 8000806:	b2db      	uxtb	r3, r3
 8000808:	3309      	adds	r3, #9
 800080a:	777b      	strb	r3, [r7, #29]

	
	/* Store temperature integer digits and decimal digits */
	digit = temperature >> 4;
 800080c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800080e:	091b      	lsrs	r3, r3, #4
 8000810:	b29b      	uxth	r3, r3
 8000812:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	digit |= ((temperature >> 8) & 0x7) << 4;
 8000816:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000818:	0a1b      	lsrs	r3, r3, #8
 800081a:	b29b      	uxth	r3, r3
 800081c:	b25b      	sxtb	r3, r3
 800081e:	011b      	lsls	r3, r3, #4
 8000820:	b25b      	sxtb	r3, r3
 8000822:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8000826:	b25a      	sxtb	r2, r3
 8000828:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800082c:	4313      	orrs	r3, r2
 800082e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	
	/* Store decimal digits */
	switch (resolution) 
 8000832:	7f7b      	ldrb	r3, [r7, #29]
 8000834:	3b09      	subs	r3, #9
 8000836:	2b03      	cmp	r3, #3
 8000838:	d850      	bhi.n	80008dc <DS18B20_Read+0x19c>
 800083a:	a201      	add	r2, pc, #4	@ (adr r2, 8000840 <DS18B20_Read+0x100>)
 800083c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000840:	08000851 	.word	0x08000851
 8000844:	08000875 	.word	0x08000875
 8000848:	08000899 	.word	0x08000899
 800084c:	080008bd 	.word	0x080008bd
	{
		case 9:
			decimal = (temperature >> 3) & 0x01;
 8000850:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000852:	08db      	lsrs	r3, r3, #3
 8000854:	b29b      	uxth	r3, r3
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fdec 	bl	8000438 <__aeabi_i2f>
 8000860:	4603      	mov	r3, r0
 8000862:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 8000864:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8000868:	6a38      	ldr	r0, [r7, #32]
 800086a:	f7ff fc77 	bl	800015c <__aeabi_fmul>
 800086e:	4603      	mov	r3, r0
 8000870:	623b      	str	r3, [r7, #32]
		break;
 8000872:	e038      	b.n	80008e6 <DS18B20_Read+0x1a6>
		case 10:
			decimal = (temperature >> 2) & 0x03;
 8000874:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000876:	089b      	lsrs	r3, r3, #2
 8000878:	b29b      	uxth	r3, r3
 800087a:	f003 0303 	and.w	r3, r3, #3
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff fdda 	bl	8000438 <__aeabi_i2f>
 8000884:	4603      	mov	r3, r0
 8000886:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 8000888:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 800088c:	6a38      	ldr	r0, [r7, #32]
 800088e:	f7ff fc65 	bl	800015c <__aeabi_fmul>
 8000892:	4603      	mov	r3, r0
 8000894:	623b      	str	r3, [r7, #32]
		 break;
 8000896:	e026      	b.n	80008e6 <DS18B20_Read+0x1a6>
		case 11: 
			decimal = (temperature >> 1) & 0x07;
 8000898:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800089a:	085b      	lsrs	r3, r3, #1
 800089c:	b29b      	uxth	r3, r3
 800089e:	f003 0307 	and.w	r3, r3, #7
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff fdc8 	bl	8000438 <__aeabi_i2f>
 80008a8:	4603      	mov	r3, r0
 80008aa:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 80008ac:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 80008b0:	6a38      	ldr	r0, [r7, #32]
 80008b2:	f7ff fc53 	bl	800015c <__aeabi_fmul>
 80008b6:	4603      	mov	r3, r0
 80008b8:	623b      	str	r3, [r7, #32]
		break;
 80008ba:	e014      	b.n	80008e6 <DS18B20_Read+0x1a6>
		case 12: 
			decimal = temperature & 0x0F;
 80008bc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80008be:	f003 030f 	and.w	r3, r3, #15
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fdb8 	bl	8000438 <__aeabi_i2f>
 80008c8:	4603      	mov	r3, r0
 80008ca:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 80008cc:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 80008d0:	6a38      	ldr	r0, [r7, #32]
 80008d2:	f7ff fc43 	bl	800015c <__aeabi_fmul>
 80008d6:	4603      	mov	r3, r0
 80008d8:	623b      	str	r3, [r7, #32]
		 break;
 80008da:	e004      	b.n	80008e6 <DS18B20_Read+0x1a6>
		default: 
			decimal = 0xFF;
 80008dc:	4b11      	ldr	r3, [pc, #68]	@ (8000924 <DS18B20_Read+0x1e4>)
 80008de:	623b      	str	r3, [r7, #32]
			digit = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	}
	
	/* Check for negative part */
	decimal = digit + decimal;
 80008e6:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fda4 	bl	8000438 <__aeabi_i2f>
 80008f0:	4603      	mov	r3, r0
 80008f2:	4619      	mov	r1, r3
 80008f4:	6a38      	ldr	r0, [r7, #32]
 80008f6:	f7ff fceb 	bl	80002d0 <__addsf3>
 80008fa:	4603      	mov	r3, r0
 80008fc:	623b      	str	r3, [r7, #32]
	if (minus) 
 80008fe:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8000902:	2b00      	cmp	r3, #0
 8000904:	d006      	beq.n	8000914 <DS18B20_Read+0x1d4>
		decimal = 0 - decimal;
 8000906:	6a39      	ldr	r1, [r7, #32]
 8000908:	f04f 0000 	mov.w	r0, #0
 800090c:	f7ff fcde 	bl	80002cc <__aeabi_fsub>
 8000910:	4603      	mov	r3, r0
 8000912:	623b      	str	r3, [r7, #32]
	
	
	/* Set to pointer */
	*destination = decimal;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6a3a      	ldr	r2, [r7, #32]
 8000918:	601a      	str	r2, [r3, #0]
	
	/* Return 1, temperature valid */
	return true;
 800091a:	2301      	movs	r3, #1
}
 800091c:	4618      	mov	r0, r3
 800091e:	372c      	adds	r7, #44	@ 0x2c
 8000920:	46bd      	mov	sp, r7
 8000922:	bd90      	pop	{r4, r7, pc}
 8000924:	437f0000 	.word	0x437f0000

08000928 <DS18B20_SetResolution>:
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution) 
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	4613      	mov	r3, r2
 8000934:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!DS18B20_Is(ROM)) 
 8000936:	68b8      	ldr	r0, [r7, #8]
 8000938:	f000 f87e 	bl	8000a38 <DS18B20_Is>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d101      	bne.n	8000946 <DS18B20_SetResolution+0x1e>
		return 0;
 8000942:	2300      	movs	r3, #0
 8000944:	e074      	b.n	8000a30 <DS18B20_SetResolution+0x108>
	
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8000946:	68f8      	ldr	r0, [r7, #12]
 8000948:	f000 f984 	bl	8000c54 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 800094c:	68b9      	ldr	r1, [r7, #8]
 800094e:	68f8      	ldr	r0, [r7, #12]
 8000950:	f000 fb5c 	bl	800100c <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8000954:	21be      	movs	r1, #190	@ 0xbe
 8000956:	68f8      	ldr	r0, [r7, #12]
 8000958:	f000 fa24 	bl	8000da4 <OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 800095c:	68f8      	ldr	r0, [r7, #12]
 800095e:	f000 fa3f 	bl	8000de0 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8000962:	68f8      	ldr	r0, [r7, #12]
 8000964:	f000 fa3c 	bl	8000de0 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(OneWire);
 8000968:	68f8      	ldr	r0, [r7, #12]
 800096a:	f000 fa39 	bl	8000de0 <OneWire_ReadByte>
 800096e:	4603      	mov	r3, r0
 8000970:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OneWire);
 8000972:	68f8      	ldr	r0, [r7, #12]
 8000974:	f000 fa34 	bl	8000de0 <OneWire_ReadByte>
 8000978:	4603      	mov	r3, r0
 800097a:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OneWire);
 800097c:	68f8      	ldr	r0, [r7, #12]
 800097e:	f000 fa2f 	bl	8000de0 <OneWire_ReadByte>
 8000982:	4603      	mov	r3, r0
 8000984:	75fb      	strb	r3, [r7, #23]
	
	if (resolution == DS18B20_Resolution_9bits) 
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	2b09      	cmp	r3, #9
 800098a:	d108      	bne.n	800099e <DS18B20_SetResolution+0x76>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 800098c:	7dfb      	ldrb	r3, [r7, #23]
 800098e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000992:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8000994:	7dfb      	ldrb	r3, [r7, #23]
 8000996:	f023 0320 	bic.w	r3, r3, #32
 800099a:	75fb      	strb	r3, [r7, #23]
 800099c:	e022      	b.n	80009e4 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_10bits) 
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	2b0a      	cmp	r3, #10
 80009a2:	d108      	bne.n	80009b6 <DS18B20_SetResolution+0x8e>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80009a4:	7dfb      	ldrb	r3, [r7, #23]
 80009a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80009aa:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80009ac:	7dfb      	ldrb	r3, [r7, #23]
 80009ae:	f043 0320 	orr.w	r3, r3, #32
 80009b2:	75fb      	strb	r3, [r7, #23]
 80009b4:	e016      	b.n	80009e4 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	2b0b      	cmp	r3, #11
 80009ba:	d108      	bne.n	80009ce <DS18B20_SetResolution+0xa6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 80009bc:	7dfb      	ldrb	r3, [r7, #23]
 80009be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009c2:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 80009c4:	7dfb      	ldrb	r3, [r7, #23]
 80009c6:	f023 0320 	bic.w	r3, r3, #32
 80009ca:	75fb      	strb	r3, [r7, #23]
 80009cc:	e00a      	b.n	80009e4 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	2b0c      	cmp	r3, #12
 80009d2:	d107      	bne.n	80009e4 <DS18B20_SetResolution+0xbc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 80009d4:	7dfb      	ldrb	r3, [r7, #23]
 80009d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009da:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80009dc:	7dfb      	ldrb	r3, [r7, #23]
 80009de:	f043 0320 	orr.w	r3, r3, #32
 80009e2:	75fb      	strb	r3, [r7, #23]
	}
	
	/* Reset line */
	OneWire_Reset(OneWire);
 80009e4:	68f8      	ldr	r0, [r7, #12]
 80009e6:	f000 f935 	bl	8000c54 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80009ea:	68b9      	ldr	r1, [r7, #8]
 80009ec:	68f8      	ldr	r0, [r7, #12]
 80009ee:	f000 fb0d 	bl	800100c <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 80009f2:	214e      	movs	r1, #78	@ 0x4e
 80009f4:	68f8      	ldr	r0, [r7, #12]
 80009f6:	f000 f9d5 	bl	8000da4 <OneWire_WriteByte>
	
	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 80009fa:	7dbb      	ldrb	r3, [r7, #22]
 80009fc:	4619      	mov	r1, r3
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f000 f9d0 	bl	8000da4 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8000a04:	7d7b      	ldrb	r3, [r7, #21]
 8000a06:	4619      	mov	r1, r3
 8000a08:	68f8      	ldr	r0, [r7, #12]
 8000a0a:	f000 f9cb 	bl	8000da4 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8000a0e:	7dfb      	ldrb	r3, [r7, #23]
 8000a10:	4619      	mov	r1, r3
 8000a12:	68f8      	ldr	r0, [r7, #12]
 8000a14:	f000 f9c6 	bl	8000da4 <OneWire_WriteByte>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8000a18:	68f8      	ldr	r0, [r7, #12]
 8000a1a:	f000 f91b 	bl	8000c54 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000a1e:	68b9      	ldr	r1, [r7, #8]
 8000a20:	68f8      	ldr	r0, [r7, #12]
 8000a22:	f000 faf3 	bl	800100c <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8000a26:	2148      	movs	r1, #72	@ 0x48
 8000a28:	68f8      	ldr	r0, [r7, #12]
 8000a2a:	f000 f9bb 	bl	8000da4 <OneWire_WriteByte>
	
	return 1;
 8000a2e:	2301      	movs	r3, #1
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3718      	adds	r7, #24
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM) 
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE) 
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b28      	cmp	r3, #40	@ 0x28
 8000a46:	d101      	bne.n	8000a4c <DS18B20_Is+0x14>
		return 1;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	e000      	b.n	8000a4e <DS18B20_Is+0x16>
	
	return 0;
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr

08000a58 <DS18B20_DisableAlarmTemperature>:
	
	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM) 
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM)) 
 8000a62:	6838      	ldr	r0, [r7, #0]
 8000a64:	f7ff ffe8 	bl	8000a38 <DS18B20_Is>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d101      	bne.n	8000a72 <DS18B20_DisableAlarmTemperature+0x1a>
		return 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e049      	b.n	8000b06 <DS18B20_DisableAlarmTemperature+0xae>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f000 f8ee 	bl	8000c54 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000a78:	6839      	ldr	r1, [r7, #0]
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f000 fac6 	bl	800100c <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8000a80:	21be      	movs	r1, #190	@ 0xbe
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f000 f98e 	bl	8000da4 <OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f000 f9a9 	bl	8000de0 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f000 f9a6 	bl	8000de0 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(OneWire);
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f000 f9a3 	bl	8000de0 <OneWire_ReadByte>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	73fb      	strb	r3, [r7, #15]
	tl = OneWire_ReadByte(OneWire);
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f000 f99e 	bl	8000de0 <OneWire_ReadByte>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	73bb      	strb	r3, [r7, #14]
	conf = OneWire_ReadByte(OneWire);
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f000 f999 	bl	8000de0 <OneWire_ReadByte>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	737b      	strb	r3, [r7, #13]
	
	th = 125;
 8000ab2:	237d      	movs	r3, #125	@ 0x7d
 8000ab4:	73fb      	strb	r3, [r7, #15]
	tl = (uint8_t)-55;
 8000ab6:	23c9      	movs	r3, #201	@ 0xc9
 8000ab8:	73bb      	strb	r3, [r7, #14]

	/* Reset line */
	OneWire_Reset(OneWire);
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f000 f8ca 	bl	8000c54 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000ac0:	6839      	ldr	r1, [r7, #0]
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f000 faa2 	bl	800100c <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8000ac8:	214e      	movs	r1, #78	@ 0x4e
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f000 f96a 	bl	8000da4 <OneWire_WriteByte>
	
	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8000ad0:	7bfb      	ldrb	r3, [r7, #15]
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f000 f965 	bl	8000da4 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8000ada:	7bbb      	ldrb	r3, [r7, #14]
 8000adc:	4619      	mov	r1, r3
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f000 f960 	bl	8000da4 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8000ae4:	7b7b      	ldrb	r3, [r7, #13]
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f000 f95b 	bl	8000da4 <OneWire_WriteByte>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f000 f8b0 	bl	8000c54 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000af4:	6839      	ldr	r1, [r7, #0]
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f000 fa88 	bl	800100c <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8000afc:	2148      	movs	r1, #72	@ 0x48
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f000 f950 	bl	8000da4 <OneWire_WriteByte>
	
	return 1;
 8000b04:	2301      	movs	r3, #1
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <DS18B20_AllDone>:
	/* Start alarm search */
	return OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t DS18B20_AllDone(OneWire_t* OneWire)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return OneWire_ReadBit(OneWire);
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f000 f912 	bl	8000d40 <OneWire_ReadBit>
 8000b1c:	4603      	mov	r3, r0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <ONEWIRE_DELAY>:
#include "main.h"
#include "g_var.h"
//#include "tim.h"

void ONEWIRE_DELAY(uint16_t time_us)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 8000b32:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <ONEWIRE_DELAY+0x2c>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2200      	movs	r2, #0
 8000b38:	625a      	str	r2, [r3, #36]	@ 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8000b3a:	bf00      	nop
 8000b3c:	4b05      	ldr	r3, [pc, #20]	@ (8000b54 <ONEWIRE_DELAY+0x2c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b42:	88fb      	ldrh	r3, [r7, #6]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d9f9      	bls.n	8000b3c <ONEWIRE_DELAY+0x14>
}
 8000b48:	bf00      	nop
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	200005a4 	.word	0x200005a4

08000b58 <ONEWIRE_LOW>:
void ONEWIRE_LOW(OneWire_t *gp)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	889b      	ldrh	r3, [r3, #4]
 8000b64:	461a      	mov	r2, r3
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	0412      	lsls	r2, r2, #16
 8000b6c:	611a      	str	r2, [r3, #16]
}	
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr

08000b78 <ONEWIRE_HIGH>:
void ONEWIRE_HIGH(OneWire_t *gp)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	889a      	ldrh	r2, [r3, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	611a      	str	r2, [r3, #16]
}	
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <ONEWIRE_INPUT>:
void ONEWIRE_INPUT(OneWire_t *gp)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_INPUT;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
	gpinit.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	613b      	str	r3, [r7, #16]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	617b      	str	r3, [r7, #20]
	gpinit.Pin = gp->GPIO_Pin;	
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	889b      	ldrh	r3, [r3, #4]
 8000bac:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f107 0208 	add.w	r2, r7, #8
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f001 ff9d 	bl	8002af8 <HAL_GPIO_Init>
}	
 8000bbe:	bf00      	nop
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <ONEWIRE_OUTPUT>:
void ONEWIRE_OUTPUT(OneWire_t *gp)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b086      	sub	sp, #24
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8000bce:	2311      	movs	r3, #17
 8000bd0:	60fb      	str	r3, [r7, #12]
	gpinit.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	617b      	str	r3, [r7, #20]
	gpinit.Pin = gp->GPIO_Pin;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	889b      	ldrh	r3, [r3, #4]
 8000bde:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f107 0208 	add.w	r2, r7, #8
 8000be8:	4611      	mov	r1, r2
 8000bea:	4618      	mov	r0, r3
 8000bec:	f001 ff84 	bl	8002af8 <HAL_GPIO_Init>

}
 8000bf0:	bf00      	nop
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <OneWire_Init>:
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) 
{	
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	4613      	mov	r3, r2
 8000c04:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&_DS18B20_TIMER);
 8000c06:	4812      	ldr	r0, [pc, #72]	@ (8000c50 <OneWire_Init+0x58>)
 8000c08:	f003 fdf6 	bl	80047f8 <HAL_TIM_Base_Start>

	OneWireStruct->GPIOx = GPIOx;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	88fa      	ldrh	r2, [r7, #6]
 8000c16:	809a      	strh	r2, [r3, #4]
	ONEWIRE_OUTPUT(OneWireStruct);
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f7ff ffd4 	bl	8000bc6 <ONEWIRE_OUTPUT>
	ONEWIRE_HIGH(OneWireStruct);
 8000c1e:	68f8      	ldr	r0, [r7, #12]
 8000c20:	f7ff ffaa 	bl	8000b78 <ONEWIRE_HIGH>
	OneWireDelay(1000);
 8000c24:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c28:	f001 fe34 	bl	8002894 <HAL_Delay>
	ONEWIRE_LOW(OneWireStruct);
 8000c2c:	68f8      	ldr	r0, [r7, #12]
 8000c2e:	f7ff ff93 	bl	8000b58 <ONEWIRE_LOW>
	OneWireDelay(1000);
 8000c32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c36:	f001 fe2d 	bl	8002894 <HAL_Delay>
	ONEWIRE_HIGH(OneWireStruct);
 8000c3a:	68f8      	ldr	r0, [r7, #12]
 8000c3c:	f7ff ff9c 	bl	8000b78 <ONEWIRE_HIGH>
	OneWireDelay(2000);
 8000c40:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c44:	f001 fe26 	bl	8002894 <HAL_Delay>
}
 8000c48:	bf00      	nop
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	200005a4 	.word	0x200005a4

08000c54 <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	temper_busy = 1;
 8000c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc8 <OneWire_Reset+0x74>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	
	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f7ff ff78 	bl	8000b58 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f7ff ffac 	bl	8000bc6 <ONEWIRE_OUTPUT>
	temper_busy = 0;
 8000c6e:	4b16      	ldr	r3, [pc, #88]	@ (8000cc8 <OneWire_Reset+0x74>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
	ONEWIRE_DELAY(480);
 8000c74:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8000c78:	f7ff ff56 	bl	8000b28 <ONEWIRE_DELAY>
	ONEWIRE_DELAY(20);
 8000c7c:	2014      	movs	r0, #20
 8000c7e:	f7ff ff53 	bl	8000b28 <ONEWIRE_DELAY>
	temper_busy = 1;
 8000c82:	4b11      	ldr	r3, [pc, #68]	@ (8000cc8 <OneWire_Reset+0x74>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	701a      	strb	r2, [r3, #0]
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff ff83 	bl	8000b94 <ONEWIRE_INPUT>
	ONEWIRE_DELAY(70);
 8000c8e:	2046      	movs	r0, #70	@ 0x46
 8000c90:	f7ff ff4a 	bl	8000b28 <ONEWIRE_DELAY>
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	889b      	ldrh	r3, [r3, #4]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4610      	mov	r0, r2
 8000ca0:	f002 f8ae 	bl	8002e00 <HAL_GPIO_ReadPin>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	73fb      	strb	r3, [r7, #15]
	
	/* Delay for 410 us */
	temper_busy = 0;
 8000ca8:	4b07      	ldr	r3, [pc, #28]	@ (8000cc8 <OneWire_Reset+0x74>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	701a      	strb	r2, [r3, #0]
	ONEWIRE_DELAY(410);
 8000cae:	f44f 70cd 	mov.w	r0, #410	@ 0x19a
 8000cb2:	f7ff ff39 	bl	8000b28 <ONEWIRE_DELAY>
	temper_busy = 1;
 8000cb6:	4b04      	ldr	r3, [pc, #16]	@ (8000cc8 <OneWire_Reset+0x74>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	701a      	strb	r2, [r3, #0]
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200004e8 	.word	0x200004e8

08000ccc <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t* OneWireStruct, uint8_t bit)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	70fb      	strb	r3, [r7, #3]
	if (bit) 
 8000cd8:	78fb      	ldrb	r3, [r7, #3]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d018      	beq.n	8000d10 <OneWire_WriteBit+0x44>
	{
		/* Set line low */
		ONEWIRE_LOW(OneWireStruct);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff ff3a 	bl	8000b58 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff ff6e 	bl	8000bc6 <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(10);
 8000cea:	200a      	movs	r0, #10
 8000cec:	f7ff ff1c 	bl	8000b28 <ONEWIRE_DELAY>
		
		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff ff4f 	bl	8000b94 <ONEWIRE_INPUT>
		
		/* Wait for 55 us and release the line */
		temper_busy = 0;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <OneWire_WriteBit+0x70>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
		ONEWIRE_DELAY(55);
 8000cfc:	2037      	movs	r0, #55	@ 0x37
 8000cfe:	f7ff ff13 	bl	8000b28 <ONEWIRE_DELAY>
		temper_busy = 1;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <OneWire_WriteBit+0x70>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	701a      	strb	r2, [r3, #0]
		ONEWIRE_INPUT(OneWireStruct);
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff ff43 	bl	8000b94 <ONEWIRE_INPUT>
		/* Wait for 5 us and release the line */
		ONEWIRE_DELAY(5);
		ONEWIRE_INPUT(OneWireStruct);
	}

}
 8000d0e:	e011      	b.n	8000d34 <OneWire_WriteBit+0x68>
		ONEWIRE_LOW(OneWireStruct);
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f7ff ff21 	bl	8000b58 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ff55 	bl	8000bc6 <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(65);
 8000d1c:	2041      	movs	r0, #65	@ 0x41
 8000d1e:	f7ff ff03 	bl	8000b28 <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff ff36 	bl	8000b94 <ONEWIRE_INPUT>
		ONEWIRE_DELAY(5);
 8000d28:	2005      	movs	r0, #5
 8000d2a:	f7ff fefd 	bl	8000b28 <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff ff30 	bl	8000b94 <ONEWIRE_INPUT>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	200004e8 	.word	0x200004e8

08000d40 <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct) 
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	73fb      	strb	r3, [r7, #15]
	
	/* Line low */
	ONEWIRE_LOW(OneWireStruct);
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff ff03 	bl	8000b58 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff ff37 	bl	8000bc6 <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(2);
 8000d58:	2002      	movs	r0, #2
 8000d5a:	f7ff fee5 	bl	8000b28 <ONEWIRE_DELAY>
	
	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff ff18 	bl	8000b94 <ONEWIRE_INPUT>
	ONEWIRE_DELAY(10);
 8000d64:	200a      	movs	r0, #10
 8000d66:	f7ff fedf 	bl	8000b28 <ONEWIRE_DELAY>
	
	/* Read line value */
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	889b      	ldrh	r3, [r3, #4]
 8000d72:	4619      	mov	r1, r3
 8000d74:	4610      	mov	r0, r2
 8000d76:	f002 f843 	bl	8002e00 <HAL_GPIO_ReadPin>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <OneWire_ReadBit+0x44>
		/* Bit is HIGH */
		bit = 1;
 8000d80:	2301      	movs	r3, #1
 8000d82:	73fb      	strb	r3, [r7, #15]
	}
	
	/* Wait 50us to complete 60us period */
	temper_busy = 0;
 8000d84:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <OneWire_ReadBit+0x60>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	701a      	strb	r2, [r3, #0]
	ONEWIRE_DELAY(50);
 8000d8a:	2032      	movs	r0, #50	@ 0x32
 8000d8c:	f7ff fecc 	bl	8000b28 <ONEWIRE_DELAY>
	temper_busy = 1;
 8000d90:	4b03      	ldr	r3, [pc, #12]	@ (8000da0 <OneWire_ReadBit+0x60>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	701a      	strb	r2, [r3, #0]
	
	/* Return bit value */
	return bit;
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	200004e8 	.word	0x200004e8

08000da4 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	460b      	mov	r3, r1
 8000dae:	70fb      	strb	r3, [r7, #3]
	//temper_busy = 0;
	uint8_t i = 8;
 8000db0:	2308      	movs	r3, #8
 8000db2:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 8000db4:	e00a      	b.n	8000dcc <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 8000db6:	78fb      	ldrb	r3, [r7, #3]
 8000db8:	f003 0301 	and.w	r3, r3, #1
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff ff83 	bl	8000ccc <OneWire_WriteBit>
		byte >>= 1;
 8000dc6:	78fb      	ldrb	r3, [r7, #3]
 8000dc8:	085b      	lsrs	r3, r3, #1
 8000dca:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
 8000dce:	1e5a      	subs	r2, r3, #1
 8000dd0:	73fa      	strb	r2, [r7, #15]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d1ef      	bne.n	8000db6 <OneWire_WriteByte+0x12>
	}
	//temper_busy = 1;
}
 8000dd6:	bf00      	nop
 8000dd8:	bf00      	nop
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	//temper_busy = 0;
	uint8_t i = 8, byte = 0;
 8000de8:	2308      	movs	r3, #8
 8000dea:	73fb      	strb	r3, [r7, #15]
 8000dec:	2300      	movs	r3, #0
 8000dee:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8000df0:	e00d      	b.n	8000e0e <OneWire_ReadByte+0x2e>
		byte >>= 1;
 8000df2:	7bbb      	ldrb	r3, [r7, #14]
 8000df4:	085b      	lsrs	r3, r3, #1
 8000df6:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff ffa1 	bl	8000d40 <OneWire_ReadBit>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	01db      	lsls	r3, r3, #7
 8000e02:	b25a      	sxtb	r2, r3
 8000e04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	b25b      	sxtb	r3, r3
 8000e0c:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	1e5a      	subs	r2, r3, #1
 8000e12:	73fa      	strb	r2, [r7, #15]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d1ec      	bne.n	8000df2 <OneWire_ReadByte+0x12>
	}
	//temper_busy = 1;
	
	return byte;
 8000e18:	7bbb      	ldrb	r3, [r7, #14]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <OneWire_First>:

uint8_t OneWire_First(OneWire_t* OneWireStruct) {
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
	/* Reset search values */
	OneWire_ResetSearch(OneWireStruct);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f000 f816 	bl	8000e5c <OneWire_ResetSearch>

	/* Start with searching */
	return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8000e30:	21f0      	movs	r1, #240	@ 0xf0
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f000 f824 	bl	8000e80 <OneWire_Search>
 8000e38:	4603      	mov	r3, r0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <OneWire_Next>:

uint8_t OneWire_Next(OneWire_t* OneWireStruct) {
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8000e4a:	21f0      	movs	r1, #240	@ 0xf0
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f000 f817 	bl	8000e80 <OneWire_Search>
 8000e52:	4603      	mov	r3, r0
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <OneWire_ResetSearch>:

void OneWire_ResetSearch(OneWire_t* OneWireStruct) {
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	/* Reset the search state */
	OneWireStruct->LastDiscrepancy = 0;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	719a      	strb	r2, [r3, #6]
	OneWireStruct->LastDeviceFlag = 0;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	721a      	strb	r2, [r3, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2200      	movs	r2, #0
 8000e74:	71da      	strb	r2, [r3, #7]
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr

08000e80 <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* OneWireStruct, uint8_t command) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	70fb      	strb	r3, [r7, #3]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	/* Initialize for search */
	id_bit_number = 1;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	733b      	strb	r3, [r7, #12]

	// if the last call was not the last one
	if (!OneWireStruct->LastDeviceFlag)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	7a1b      	ldrb	r3, [r3, #8]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	f040 809a 	bne.w	8000fde <OneWire_Search+0x15e>
	{
		// 1-Wire reset
		if (OneWire_Reset(OneWireStruct)) 
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff fed2 	bl	8000c54 <OneWire_Reset>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d00a      	beq.n	8000ecc <OneWire_Search+0x4c>
		{
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	719a      	strb	r2, [r3, #6]
			OneWireStruct->LastDeviceFlag = 0;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	721a      	strb	r2, [r3, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	71da      	strb	r2, [r3, #7]
			return 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	e09b      	b.n	8001004 <OneWire_Search+0x184>
		}

		// issue the search command 
		OneWire_WriteByte(OneWireStruct, command);  
 8000ecc:	78fb      	ldrb	r3, [r7, #3]
 8000ece:	4619      	mov	r1, r3
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff ff67 	bl	8000da4 <OneWire_WriteByte>

		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = OneWire_ReadBit(OneWireStruct);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff ff32 	bl	8000d40 <OneWire_ReadBit>
 8000edc:	4603      	mov	r3, r0
 8000ede:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(OneWireStruct);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f7ff ff2d 	bl	8000d40 <OneWire_ReadBit>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	723b      	strb	r3, [r7, #8]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 8000eea:	7a7b      	ldrb	r3, [r7, #9]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d102      	bne.n	8000ef6 <OneWire_Search+0x76>
 8000ef0:	7a3b      	ldrb	r3, [r7, #8]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d064      	beq.n	8000fc0 <OneWire_Search+0x140>
				break;
			} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit) {
 8000ef6:	7a7a      	ldrb	r2, [r7, #9]
 8000ef8:	7a3b      	ldrb	r3, [r7, #8]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d002      	beq.n	8000f04 <OneWire_Search+0x84>
					search_direction = id_bit;  // bit write value for search
 8000efe:	7a7b      	ldrb	r3, [r7, #9]
 8000f00:	72bb      	strb	r3, [r7, #10]
 8000f02:	e026      	b.n	8000f52 <OneWire_Search+0xd2>
				} else {
					// if this discrepancy if before the Last Discrepancy
					// on a previous next then pick the same as last time
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	799b      	ldrb	r3, [r3, #6]
 8000f08:	7bfa      	ldrb	r2, [r7, #15]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d20d      	bcs.n	8000f2a <OneWire_Search+0xaa>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8000f0e:	7b7b      	ldrb	r3, [r7, #13]
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	4413      	add	r3, r2
 8000f14:	7a5a      	ldrb	r2, [r3, #9]
 8000f16:	7afb      	ldrb	r3, [r7, #11]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	bf14      	ite	ne
 8000f20:	2301      	movne	r3, #1
 8000f22:	2300      	moveq	r3, #0
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	72bb      	strb	r3, [r7, #10]
 8000f28:	e008      	b.n	8000f3c <OneWire_Search+0xbc>
					} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	799b      	ldrb	r3, [r3, #6]
 8000f2e:	7bfa      	ldrb	r2, [r7, #15]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	bf0c      	ite	eq
 8000f34:	2301      	moveq	r3, #1
 8000f36:	2300      	movne	r3, #0
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	72bb      	strb	r3, [r7, #10]
					}
					
					// if 0 was picked then record its position in LastZero
					if (search_direction == 0) {
 8000f3c:	7abb      	ldrb	r3, [r7, #10]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d107      	bne.n	8000f52 <OneWire_Search+0xd2>
						last_zero = id_bit_number;
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	73bb      	strb	r3, [r7, #14]

						// check for Last discrepancy in family
						if (last_zero < 9) {
 8000f46:	7bbb      	ldrb	r3, [r7, #14]
 8000f48:	2b08      	cmp	r3, #8
 8000f4a:	d802      	bhi.n	8000f52 <OneWire_Search+0xd2>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	7bba      	ldrb	r2, [r7, #14]
 8000f50:	71da      	strb	r2, [r3, #7]
					}
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1) {
 8000f52:	7abb      	ldrb	r3, [r7, #10]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d10c      	bne.n	8000f72 <OneWire_Search+0xf2>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 8000f58:	7b7b      	ldrb	r3, [r7, #13]
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	7a59      	ldrb	r1, [r3, #9]
 8000f60:	7b7b      	ldrb	r3, [r7, #13]
 8000f62:	7afa      	ldrb	r2, [r7, #11]
 8000f64:	430a      	orrs	r2, r1
 8000f66:	b2d1      	uxtb	r1, r2
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	460a      	mov	r2, r1
 8000f6e:	725a      	strb	r2, [r3, #9]
 8000f70:	e010      	b.n	8000f94 <OneWire_Search+0x114>
				} else {
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 8000f72:	7b7b      	ldrb	r3, [r7, #13]
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	4413      	add	r3, r2
 8000f78:	7a5b      	ldrb	r3, [r3, #9]
 8000f7a:	b25a      	sxtb	r2, r3
 8000f7c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	b25b      	sxtb	r3, r3
 8000f84:	4013      	ands	r3, r2
 8000f86:	b25a      	sxtb	r2, r3
 8000f88:	7b7b      	ldrb	r3, [r7, #13]
 8000f8a:	b2d1      	uxtb	r1, r2
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	4413      	add	r3, r2
 8000f90:	460a      	mov	r2, r1
 8000f92:	725a      	strb	r2, [r3, #9]
				}
				
				// serial number search direction write bit
				OneWire_WriteBit(OneWireStruct, search_direction);
 8000f94:	7abb      	ldrb	r3, [r7, #10]
 8000f96:	4619      	mov	r1, r3
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff fe97 	bl	8000ccc <OneWire_WriteBit>

				// increment the byte counter id_bit_number
				// and shift the mask rom_byte_mask
				id_bit_number++;
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 8000fa4:	7afb      	ldrb	r3, [r7, #11]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	72fb      	strb	r3, [r7, #11]

				// if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
				if (rom_byte_mask == 0) {
 8000faa:	7afb      	ldrb	r3, [r7, #11]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d104      	bne.n	8000fba <OneWire_Search+0x13a>
					//docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
					rom_byte_number++;
 8000fb0:	7b7b      	ldrb	r3, [r7, #13]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 8000fba:	7b7b      	ldrb	r3, [r7, #13]
 8000fbc:	2b07      	cmp	r3, #7
 8000fbe:	d98a      	bls.n	8000ed6 <OneWire_Search+0x56>

		// if the search was successful then
		if (!(id_bit_number < 65)) {
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	2b40      	cmp	r3, #64	@ 0x40
 8000fc4:	d90b      	bls.n	8000fde <OneWire_Search+0x15e>
			// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
			OneWireStruct->LastDiscrepancy = last_zero;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	7bba      	ldrb	r2, [r7, #14]
 8000fca:	719a      	strb	r2, [r3, #6]

			// check for last device
			if (OneWireStruct->LastDiscrepancy == 0) {
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	799b      	ldrb	r3, [r3, #6]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d102      	bne.n	8000fda <OneWire_Search+0x15a>
				OneWireStruct->LastDeviceFlag = 1;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	733b      	strb	r3, [r7, #12]
		}
	}

	// if no device found then reset counters so next 'search' will be like a first
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 8000fde:	7b3b      	ldrb	r3, [r7, #12]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <OneWire_Search+0x16c>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	7a5b      	ldrb	r3, [r3, #9]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d10a      	bne.n	8001002 <OneWire_Search+0x182>
		OneWireStruct->LastDiscrepancy = 0;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	719a      	strb	r2, [r3, #6]
		OneWireStruct->LastDeviceFlag = 0;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	721a      	strb	r2, [r3, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 8001002:	7b3b      	ldrb	r3, [r7, #12]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void OneWire_SelectWithPointer(OneWire_t* OneWireStruct, uint8_t *ROM) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 8001016:	2155      	movs	r1, #85	@ 0x55
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff fec3 	bl	8000da4 <OneWire_WriteByte>
	
	for (i = 0; i < 8; i++) {
 800101e:	2300      	movs	r3, #0
 8001020:	73fb      	strb	r3, [r7, #15]
 8001022:	e00a      	b.n	800103a <OneWire_SelectWithPointer+0x2e>
		OneWire_WriteByte(OneWireStruct, *(ROM + i));
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	683a      	ldr	r2, [r7, #0]
 8001028:	4413      	add	r3, r2
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	4619      	mov	r1, r3
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff feb8 	bl	8000da4 <OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	3301      	adds	r3, #1
 8001038:	73fb      	strb	r3, [r7, #15]
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	2b07      	cmp	r3, #7
 800103e:	d9f1      	bls.n	8001024 <OneWire_SelectWithPointer+0x18>
	}	
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 800104a:	b480      	push	{r7}
 800104c:	b085      	sub	sp, #20
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 8001054:	2300      	movs	r3, #0
 8001056:	73fb      	strb	r3, [r7, #15]
 8001058:	e00a      	b.n	8001070 <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 800105a:	7bfa      	ldrb	r2, [r7, #15]
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	6839      	ldr	r1, [r7, #0]
 8001060:	440b      	add	r3, r1
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	440a      	add	r2, r1
 8001066:	7a52      	ldrb	r2, [r2, #9]
 8001068:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	3301      	adds	r3, #1
 800106e:	73fb      	strb	r3, [r7, #15]
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	2b07      	cmp	r3, #7
 8001074:	d9f1      	bls.n	800105a <OneWire_GetFullROM+0x10>
	}
}
 8001076:	bf00      	nop
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr

08001082 <OneWire_CRC8>:

uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len) {
 8001082:	b480      	push	{r7}
 8001084:	b085      	sub	sp, #20
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	460b      	mov	r3, r1
 800108c:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 800108e:	2300      	movs	r3, #0
 8001090:	73fb      	strb	r3, [r7, #15]
	
	while (len--) {
 8001092:	e022      	b.n	80010da <OneWire_CRC8+0x58>
		inbyte = *addr++;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	1c5a      	adds	r2, r3, #1
 8001098:	607a      	str	r2, [r7, #4]
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 800109e:	2308      	movs	r3, #8
 80010a0:	737b      	strb	r3, [r7, #13]
 80010a2:	e017      	b.n	80010d4 <OneWire_CRC8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 80010a4:	7bfa      	ldrb	r2, [r7, #15]
 80010a6:	7bbb      	ldrb	r3, [r7, #14]
 80010a8:	4053      	eors	r3, r2
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	085b      	lsrs	r3, r3, #1
 80010b6:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 80010b8:	7b3b      	ldrb	r3, [r7, #12]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d004      	beq.n	80010c8 <OneWire_CRC8+0x46>
				crc ^= 0x8C;
 80010be:	7bfb      	ldrb	r3, [r7, #15]
 80010c0:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 80010c4:	43db      	mvns	r3, r3
 80010c6:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 80010c8:	7bbb      	ldrb	r3, [r7, #14]
 80010ca:	085b      	lsrs	r3, r3, #1
 80010cc:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 80010ce:	7b7b      	ldrb	r3, [r7, #13]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	737b      	strb	r3, [r7, #13]
 80010d4:	7b7b      	ldrb	r3, [r7, #13]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1e4      	bne.n	80010a4 <OneWire_CRC8+0x22>
	while (len--) {
 80010da:	78fb      	ldrb	r3, [r7, #3]
 80010dc:	1e5a      	subs	r2, r3, #1
 80010de:	70fa      	strb	r2, [r7, #3]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1d7      	bne.n	8001094 <OneWire_CRC8+0x12>
		}
	}
	
	/* Return calculated CRC */
	return crc;
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr

080010f0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80010f6:	f000 fa25 	bl	8001544 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80010fa:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80010fe:	2201      	movs	r2, #1
 8001100:	2178      	movs	r1, #120	@ 0x78
 8001102:	485b      	ldr	r0, [pc, #364]	@ (8001270 <SSD1306_Init+0x180>)
 8001104:	f002 f910 	bl	8003328 <HAL_I2C_IsDeviceReady>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800110e:	2300      	movs	r3, #0
 8001110:	e0a9      	b.n	8001266 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001112:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001116:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001118:	e002      	b.n	8001120 <SSD1306_Init+0x30>
		p--;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3b01      	subs	r3, #1
 800111e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1f9      	bne.n	800111a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001126:	22ae      	movs	r2, #174	@ 0xae
 8001128:	2100      	movs	r1, #0
 800112a:	2078      	movs	r0, #120	@ 0x78
 800112c:	f000 fa84 	bl	8001638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001130:	2220      	movs	r2, #32
 8001132:	2100      	movs	r1, #0
 8001134:	2078      	movs	r0, #120	@ 0x78
 8001136:	f000 fa7f 	bl	8001638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800113a:	2210      	movs	r2, #16
 800113c:	2100      	movs	r1, #0
 800113e:	2078      	movs	r0, #120	@ 0x78
 8001140:	f000 fa7a 	bl	8001638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001144:	22b0      	movs	r2, #176	@ 0xb0
 8001146:	2100      	movs	r1, #0
 8001148:	2078      	movs	r0, #120	@ 0x78
 800114a:	f000 fa75 	bl	8001638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800114e:	22c8      	movs	r2, #200	@ 0xc8
 8001150:	2100      	movs	r1, #0
 8001152:	2078      	movs	r0, #120	@ 0x78
 8001154:	f000 fa70 	bl	8001638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001158:	2200      	movs	r2, #0
 800115a:	2100      	movs	r1, #0
 800115c:	2078      	movs	r0, #120	@ 0x78
 800115e:	f000 fa6b 	bl	8001638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001162:	2210      	movs	r2, #16
 8001164:	2100      	movs	r1, #0
 8001166:	2078      	movs	r0, #120	@ 0x78
 8001168:	f000 fa66 	bl	8001638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800116c:	2240      	movs	r2, #64	@ 0x40
 800116e:	2100      	movs	r1, #0
 8001170:	2078      	movs	r0, #120	@ 0x78
 8001172:	f000 fa61 	bl	8001638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001176:	2281      	movs	r2, #129	@ 0x81
 8001178:	2100      	movs	r1, #0
 800117a:	2078      	movs	r0, #120	@ 0x78
 800117c:	f000 fa5c 	bl	8001638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001180:	22ff      	movs	r2, #255	@ 0xff
 8001182:	2100      	movs	r1, #0
 8001184:	2078      	movs	r0, #120	@ 0x78
 8001186:	f000 fa57 	bl	8001638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800118a:	22a1      	movs	r2, #161	@ 0xa1
 800118c:	2100      	movs	r1, #0
 800118e:	2078      	movs	r0, #120	@ 0x78
 8001190:	f000 fa52 	bl	8001638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001194:	22a6      	movs	r2, #166	@ 0xa6
 8001196:	2100      	movs	r1, #0
 8001198:	2078      	movs	r0, #120	@ 0x78
 800119a:	f000 fa4d 	bl	8001638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800119e:	22a8      	movs	r2, #168	@ 0xa8
 80011a0:	2100      	movs	r1, #0
 80011a2:	2078      	movs	r0, #120	@ 0x78
 80011a4:	f000 fa48 	bl	8001638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80011a8:	223f      	movs	r2, #63	@ 0x3f
 80011aa:	2100      	movs	r1, #0
 80011ac:	2078      	movs	r0, #120	@ 0x78
 80011ae:	f000 fa43 	bl	8001638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80011b2:	22a4      	movs	r2, #164	@ 0xa4
 80011b4:	2100      	movs	r1, #0
 80011b6:	2078      	movs	r0, #120	@ 0x78
 80011b8:	f000 fa3e 	bl	8001638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80011bc:	22d3      	movs	r2, #211	@ 0xd3
 80011be:	2100      	movs	r1, #0
 80011c0:	2078      	movs	r0, #120	@ 0x78
 80011c2:	f000 fa39 	bl	8001638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80011c6:	2200      	movs	r2, #0
 80011c8:	2100      	movs	r1, #0
 80011ca:	2078      	movs	r0, #120	@ 0x78
 80011cc:	f000 fa34 	bl	8001638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80011d0:	22d5      	movs	r2, #213	@ 0xd5
 80011d2:	2100      	movs	r1, #0
 80011d4:	2078      	movs	r0, #120	@ 0x78
 80011d6:	f000 fa2f 	bl	8001638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80011da:	22f0      	movs	r2, #240	@ 0xf0
 80011dc:	2100      	movs	r1, #0
 80011de:	2078      	movs	r0, #120	@ 0x78
 80011e0:	f000 fa2a 	bl	8001638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80011e4:	22d9      	movs	r2, #217	@ 0xd9
 80011e6:	2100      	movs	r1, #0
 80011e8:	2078      	movs	r0, #120	@ 0x78
 80011ea:	f000 fa25 	bl	8001638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80011ee:	2222      	movs	r2, #34	@ 0x22
 80011f0:	2100      	movs	r1, #0
 80011f2:	2078      	movs	r0, #120	@ 0x78
 80011f4:	f000 fa20 	bl	8001638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80011f8:	22da      	movs	r2, #218	@ 0xda
 80011fa:	2100      	movs	r1, #0
 80011fc:	2078      	movs	r0, #120	@ 0x78
 80011fe:	f000 fa1b 	bl	8001638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001202:	2212      	movs	r2, #18
 8001204:	2100      	movs	r1, #0
 8001206:	2078      	movs	r0, #120	@ 0x78
 8001208:	f000 fa16 	bl	8001638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800120c:	22db      	movs	r2, #219	@ 0xdb
 800120e:	2100      	movs	r1, #0
 8001210:	2078      	movs	r0, #120	@ 0x78
 8001212:	f000 fa11 	bl	8001638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001216:	2220      	movs	r2, #32
 8001218:	2100      	movs	r1, #0
 800121a:	2078      	movs	r0, #120	@ 0x78
 800121c:	f000 fa0c 	bl	8001638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001220:	228d      	movs	r2, #141	@ 0x8d
 8001222:	2100      	movs	r1, #0
 8001224:	2078      	movs	r0, #120	@ 0x78
 8001226:	f000 fa07 	bl	8001638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800122a:	2214      	movs	r2, #20
 800122c:	2100      	movs	r1, #0
 800122e:	2078      	movs	r0, #120	@ 0x78
 8001230:	f000 fa02 	bl	8001638 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001234:	22af      	movs	r2, #175	@ 0xaf
 8001236:	2100      	movs	r1, #0
 8001238:	2078      	movs	r0, #120	@ 0x78
 800123a:	f000 f9fd 	bl	8001638 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800123e:	222e      	movs	r2, #46	@ 0x2e
 8001240:	2100      	movs	r1, #0
 8001242:	2078      	movs	r0, #120	@ 0x78
 8001244:	f000 f9f8 	bl	8001638 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001248:	2000      	movs	r0, #0
 800124a:	f000 f843 	bl	80012d4 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800124e:	f000 f813 	bl	8001278 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001252:	4b08      	ldr	r3, [pc, #32]	@ (8001274 <SSD1306_Init+0x184>)
 8001254:	2200      	movs	r2, #0
 8001256:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001258:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <SSD1306_Init+0x184>)
 800125a:	2200      	movs	r2, #0
 800125c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800125e:	4b05      	ldr	r3, [pc, #20]	@ (8001274 <SSD1306_Init+0x184>)
 8001260:	2201      	movs	r2, #1
 8001262:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001264:	2301      	movs	r3, #1
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200004f8 	.word	0x200004f8
 8001274:	200004b8 	.word	0x200004b8

08001278 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800127e:	2300      	movs	r3, #0
 8001280:	71fb      	strb	r3, [r7, #7]
 8001282:	e01d      	b.n	80012c0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	3b50      	subs	r3, #80	@ 0x50
 8001288:	b2db      	uxtb	r3, r3
 800128a:	461a      	mov	r2, r3
 800128c:	2100      	movs	r1, #0
 800128e:	2078      	movs	r0, #120	@ 0x78
 8001290:	f000 f9d2 	bl	8001638 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001294:	2200      	movs	r2, #0
 8001296:	2100      	movs	r1, #0
 8001298:	2078      	movs	r0, #120	@ 0x78
 800129a:	f000 f9cd 	bl	8001638 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800129e:	2210      	movs	r2, #16
 80012a0:	2100      	movs	r1, #0
 80012a2:	2078      	movs	r0, #120	@ 0x78
 80012a4:	f000 f9c8 	bl	8001638 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	01db      	lsls	r3, r3, #7
 80012ac:	4a08      	ldr	r2, [pc, #32]	@ (80012d0 <SSD1306_UpdateScreen+0x58>)
 80012ae:	441a      	add	r2, r3
 80012b0:	2380      	movs	r3, #128	@ 0x80
 80012b2:	2140      	movs	r1, #64	@ 0x40
 80012b4:	2078      	movs	r0, #120	@ 0x78
 80012b6:	f000 f959 	bl	800156c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	3301      	adds	r3, #1
 80012be:	71fb      	strb	r3, [r7, #7]
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	2b07      	cmp	r3, #7
 80012c4:	d9de      	bls.n	8001284 <SSD1306_UpdateScreen+0xc>
	}
}
 80012c6:	bf00      	nop
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	200000b8 	.word	0x200000b8

080012d4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d101      	bne.n	80012e8 <SSD1306_Fill+0x14>
 80012e4:	2300      	movs	r3, #0
 80012e6:	e000      	b.n	80012ea <SSD1306_Fill+0x16>
 80012e8:	23ff      	movs	r3, #255	@ 0xff
 80012ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012ee:	4619      	mov	r1, r3
 80012f0:	4803      	ldr	r0, [pc, #12]	@ (8001300 <SSD1306_Fill+0x2c>)
 80012f2:	f004 fab3 	bl	800585c <memset>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200000b8 	.word	0x200000b8

08001304 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	80fb      	strh	r3, [r7, #6]
 800130e:	460b      	mov	r3, r1
 8001310:	80bb      	strh	r3, [r7, #4]
 8001312:	4613      	mov	r3, r2
 8001314:	70fb      	strb	r3, [r7, #3]
	if (
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	2b7f      	cmp	r3, #127	@ 0x7f
 800131a:	d848      	bhi.n	80013ae <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800131c:	88bb      	ldrh	r3, [r7, #4]
 800131e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001320:	d845      	bhi.n	80013ae <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001322:	4b25      	ldr	r3, [pc, #148]	@ (80013b8 <SSD1306_DrawPixel+0xb4>)
 8001324:	791b      	ldrb	r3, [r3, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d006      	beq.n	8001338 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800132a:	78fb      	ldrb	r3, [r7, #3]
 800132c:	2b00      	cmp	r3, #0
 800132e:	bf0c      	ite	eq
 8001330:	2301      	moveq	r3, #1
 8001332:	2300      	movne	r3, #0
 8001334:	b2db      	uxtb	r3, r3
 8001336:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001338:	78fb      	ldrb	r3, [r7, #3]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d11a      	bne.n	8001374 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800133e:	88fa      	ldrh	r2, [r7, #6]
 8001340:	88bb      	ldrh	r3, [r7, #4]
 8001342:	08db      	lsrs	r3, r3, #3
 8001344:	b298      	uxth	r0, r3
 8001346:	4603      	mov	r3, r0
 8001348:	01db      	lsls	r3, r3, #7
 800134a:	4413      	add	r3, r2
 800134c:	4a1b      	ldr	r2, [pc, #108]	@ (80013bc <SSD1306_DrawPixel+0xb8>)
 800134e:	5cd3      	ldrb	r3, [r2, r3]
 8001350:	b25a      	sxtb	r2, r3
 8001352:	88bb      	ldrh	r3, [r7, #4]
 8001354:	f003 0307 	and.w	r3, r3, #7
 8001358:	2101      	movs	r1, #1
 800135a:	fa01 f303 	lsl.w	r3, r1, r3
 800135e:	b25b      	sxtb	r3, r3
 8001360:	4313      	orrs	r3, r2
 8001362:	b259      	sxtb	r1, r3
 8001364:	88fa      	ldrh	r2, [r7, #6]
 8001366:	4603      	mov	r3, r0
 8001368:	01db      	lsls	r3, r3, #7
 800136a:	4413      	add	r3, r2
 800136c:	b2c9      	uxtb	r1, r1
 800136e:	4a13      	ldr	r2, [pc, #76]	@ (80013bc <SSD1306_DrawPixel+0xb8>)
 8001370:	54d1      	strb	r1, [r2, r3]
 8001372:	e01d      	b.n	80013b0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001374:	88fa      	ldrh	r2, [r7, #6]
 8001376:	88bb      	ldrh	r3, [r7, #4]
 8001378:	08db      	lsrs	r3, r3, #3
 800137a:	b298      	uxth	r0, r3
 800137c:	4603      	mov	r3, r0
 800137e:	01db      	lsls	r3, r3, #7
 8001380:	4413      	add	r3, r2
 8001382:	4a0e      	ldr	r2, [pc, #56]	@ (80013bc <SSD1306_DrawPixel+0xb8>)
 8001384:	5cd3      	ldrb	r3, [r2, r3]
 8001386:	b25a      	sxtb	r2, r3
 8001388:	88bb      	ldrh	r3, [r7, #4]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	2101      	movs	r1, #1
 8001390:	fa01 f303 	lsl.w	r3, r1, r3
 8001394:	b25b      	sxtb	r3, r3
 8001396:	43db      	mvns	r3, r3
 8001398:	b25b      	sxtb	r3, r3
 800139a:	4013      	ands	r3, r2
 800139c:	b259      	sxtb	r1, r3
 800139e:	88fa      	ldrh	r2, [r7, #6]
 80013a0:	4603      	mov	r3, r0
 80013a2:	01db      	lsls	r3, r3, #7
 80013a4:	4413      	add	r3, r2
 80013a6:	b2c9      	uxtb	r1, r1
 80013a8:	4a04      	ldr	r2, [pc, #16]	@ (80013bc <SSD1306_DrawPixel+0xb8>)
 80013aa:	54d1      	strb	r1, [r2, r3]
 80013ac:	e000      	b.n	80013b0 <SSD1306_DrawPixel+0xac>
		return;
 80013ae:	bf00      	nop
	}
}
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr
 80013b8:	200004b8 	.word	0x200004b8
 80013bc:	200000b8 	.word	0x200000b8

080013c0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	460a      	mov	r2, r1
 80013ca:	80fb      	strh	r3, [r7, #6]
 80013cc:	4613      	mov	r3, r2
 80013ce:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80013d0:	4a05      	ldr	r2, [pc, #20]	@ (80013e8 <SSD1306_GotoXY+0x28>)
 80013d2:	88fb      	ldrh	r3, [r7, #6]
 80013d4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80013d6:	4a04      	ldr	r2, [pc, #16]	@ (80013e8 <SSD1306_GotoXY+0x28>)
 80013d8:	88bb      	ldrh	r3, [r7, #4]
 80013da:	8053      	strh	r3, [r2, #2]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	200004b8 	.word	0x200004b8

080013ec <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	6039      	str	r1, [r7, #0]
 80013f6:	71fb      	strb	r3, [r7, #7]
 80013f8:	4613      	mov	r3, r2
 80013fa:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80013fc:	4b39      	ldr	r3, [pc, #228]	@ (80014e4 <SSD1306_Putc+0xf8>)
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	4413      	add	r3, r2
	if (
 8001408:	2b7f      	cmp	r3, #127	@ 0x7f
 800140a:	dc07      	bgt.n	800141c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800140c:	4b35      	ldr	r3, [pc, #212]	@ (80014e4 <SSD1306_Putc+0xf8>)
 800140e:	885b      	ldrh	r3, [r3, #2]
 8001410:	461a      	mov	r2, r3
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	785b      	ldrb	r3, [r3, #1]
 8001416:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001418:	2b3f      	cmp	r3, #63	@ 0x3f
 800141a:	dd01      	ble.n	8001420 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800141c:	2300      	movs	r3, #0
 800141e:	e05d      	b.n	80014dc <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	e04b      	b.n	80014be <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	3b20      	subs	r3, #32
 800142e:	6839      	ldr	r1, [r7, #0]
 8001430:	7849      	ldrb	r1, [r1, #1]
 8001432:	fb01 f303 	mul.w	r3, r1, r3
 8001436:	4619      	mov	r1, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	440b      	add	r3, r1
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4413      	add	r3, r2
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001444:	2300      	movs	r3, #0
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	e030      	b.n	80014ac <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d010      	beq.n	800147c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800145a:	4b22      	ldr	r3, [pc, #136]	@ (80014e4 <SSD1306_Putc+0xf8>)
 800145c:	881a      	ldrh	r2, [r3, #0]
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	b29b      	uxth	r3, r3
 8001462:	4413      	add	r3, r2
 8001464:	b298      	uxth	r0, r3
 8001466:	4b1f      	ldr	r3, [pc, #124]	@ (80014e4 <SSD1306_Putc+0xf8>)
 8001468:	885a      	ldrh	r2, [r3, #2]
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	b29b      	uxth	r3, r3
 800146e:	4413      	add	r3, r2
 8001470:	b29b      	uxth	r3, r3
 8001472:	79ba      	ldrb	r2, [r7, #6]
 8001474:	4619      	mov	r1, r3
 8001476:	f7ff ff45 	bl	8001304 <SSD1306_DrawPixel>
 800147a:	e014      	b.n	80014a6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800147c:	4b19      	ldr	r3, [pc, #100]	@ (80014e4 <SSD1306_Putc+0xf8>)
 800147e:	881a      	ldrh	r2, [r3, #0]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	b29b      	uxth	r3, r3
 8001484:	4413      	add	r3, r2
 8001486:	b298      	uxth	r0, r3
 8001488:	4b16      	ldr	r3, [pc, #88]	@ (80014e4 <SSD1306_Putc+0xf8>)
 800148a:	885a      	ldrh	r2, [r3, #2]
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	b29b      	uxth	r3, r3
 8001490:	4413      	add	r3, r2
 8001492:	b299      	uxth	r1, r3
 8001494:	79bb      	ldrb	r3, [r7, #6]
 8001496:	2b00      	cmp	r3, #0
 8001498:	bf0c      	ite	eq
 800149a:	2301      	moveq	r3, #1
 800149c:	2300      	movne	r3, #0
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	461a      	mov	r2, r3
 80014a2:	f7ff ff2f 	bl	8001304 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	3301      	adds	r3, #1
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d3c8      	bcc.n	800144a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	3301      	adds	r3, #1
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	785b      	ldrb	r3, [r3, #1]
 80014c2:	461a      	mov	r2, r3
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d3ad      	bcc.n	8001426 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80014ca:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <SSD1306_Putc+0xf8>)
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	7812      	ldrb	r2, [r2, #0]
 80014d2:	4413      	add	r3, r2
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	4b03      	ldr	r3, [pc, #12]	@ (80014e4 <SSD1306_Putc+0xf8>)
 80014d8:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80014da:	79fb      	ldrb	r3, [r7, #7]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	200004b8 	.word	0x200004b8

080014e8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	4613      	mov	r3, r2
 80014f4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80014f6:	e012      	b.n	800151e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	79fa      	ldrb	r2, [r7, #7]
 80014fe:	68b9      	ldr	r1, [r7, #8]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff73 	bl	80013ec <SSD1306_Putc>
 8001506:	4603      	mov	r3, r0
 8001508:	461a      	mov	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	d002      	beq.n	8001518 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	e008      	b.n	800152a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	3301      	adds	r3, #1
 800151c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1e8      	bne.n	80014f8 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	781b      	ldrb	r3, [r3, #0]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001536:	2000      	movs	r0, #0
 8001538:	f7ff fecc 	bl	80012d4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800153c:	f7ff fe9c 	bl	8001278 <SSD1306_UpdateScreen>
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}

08001544 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800154a:	4b07      	ldr	r3, [pc, #28]	@ (8001568 <ssd1306_I2C_Init+0x24>)
 800154c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800154e:	e002      	b.n	8001556 <ssd1306_I2C_Init+0x12>
		p--;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3b01      	subs	r3, #1
 8001554:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1f9      	bne.n	8001550 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800155c:	bf00      	nop
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	0003d090 	.word	0x0003d090

0800156c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800156c:	b590      	push	{r4, r7, lr}
 800156e:	b0c7      	sub	sp, #284	@ 0x11c
 8001570:	af02      	add	r7, sp, #8
 8001572:	4604      	mov	r4, r0
 8001574:	4608      	mov	r0, r1
 8001576:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800157a:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 800157e:	600a      	str	r2, [r1, #0]
 8001580:	4619      	mov	r1, r3
 8001582:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001586:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800158a:	4622      	mov	r2, r4
 800158c:	701a      	strb	r2, [r3, #0]
 800158e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001592:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001596:	4602      	mov	r2, r0
 8001598:	701a      	strb	r2, [r3, #0]
 800159a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800159e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80015a2:	460a      	mov	r2, r1
 80015a4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80015a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80015ae:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80015b2:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80015b6:	7812      	ldrb	r2, [r2, #0]
 80015b8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80015ba:	2300      	movs	r3, #0
 80015bc:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80015c0:	e015      	b.n	80015ee <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80015c2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80015c6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80015ca:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	441a      	add	r2, r3
 80015d2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80015d6:	3301      	adds	r3, #1
 80015d8:	7811      	ldrb	r1, [r2, #0]
 80015da:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80015de:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80015e2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80015e4:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80015e8:	3301      	adds	r3, #1
 80015ea:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80015ee:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80015f8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80015fc:	8812      	ldrh	r2, [r2, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d8df      	bhi.n	80015c2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 8001602:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001606:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	b299      	uxth	r1, r3
 800160e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001612:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	3301      	adds	r3, #1
 800161a:	b29b      	uxth	r3, r3
 800161c:	f107 020c 	add.w	r2, r7, #12
 8001620:	200a      	movs	r0, #10
 8001622:	9000      	str	r0, [sp, #0]
 8001624:	4803      	ldr	r0, [pc, #12]	@ (8001634 <ssd1306_I2C_WriteMulti+0xc8>)
 8001626:	f001 fd81 	bl	800312c <HAL_I2C_Master_Transmit>
}
 800162a:	bf00      	nop
 800162c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001630:	46bd      	mov	sp, r7
 8001632:	bd90      	pop	{r4, r7, pc}
 8001634:	200004f8 	.word	0x200004f8

08001638 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af02      	add	r7, sp, #8
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
 8001642:	460b      	mov	r3, r1
 8001644:	71bb      	strb	r3, [r7, #6]
 8001646:	4613      	mov	r3, r2
 8001648:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800164a:	79bb      	ldrb	r3, [r7, #6]
 800164c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800164e:	797b      	ldrb	r3, [r7, #5]
 8001650:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	b299      	uxth	r1, r3
 8001656:	f107 020c 	add.w	r2, r7, #12
 800165a:	230a      	movs	r3, #10
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	2302      	movs	r3, #2
 8001660:	4803      	ldr	r0, [pc, #12]	@ (8001670 <ssd1306_I2C_Write+0x38>)
 8001662:	f001 fd63 	bl	800312c <HAL_I2C_Master_Transmit>
}
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200004f8 	.word	0x200004f8

08001674 <checkButton>:
#include "controlType.h"

static int prev_sw_on = -1;


void checkButton() {
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	if (g_f_sw_up) {
 8001678:	4b2a      	ldr	r3, [pc, #168]	@ (8001724 <checkButton+0xb0>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d00a      	beq.n	8001698 <checkButton+0x24>
		g_f_sw_up = 0;
 8001682:	4b28      	ldr	r3, [pc, #160]	@ (8001724 <checkButton+0xb0>)
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
		printf("push_sw_up\r\n");
 8001688:	4827      	ldr	r0, [pc, #156]	@ (8001728 <checkButton+0xb4>)
 800168a:	f003 ffe5 	bl	8005658 <puts>
		temper_up();
 800168e:	f000 f9b7 	bl	8001a00 <temper_up>
		HAL_Delay(10);
 8001692:	200a      	movs	r0, #10
 8001694:	f001 f8fe 	bl	8002894 <HAL_Delay>
	}
	if (g_f_sw_down) {
 8001698:	4b24      	ldr	r3, [pc, #144]	@ (800172c <checkButton+0xb8>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d00a      	beq.n	80016b8 <checkButton+0x44>
		g_f_sw_down = 0;
 80016a2:	4b22      	ldr	r3, [pc, #136]	@ (800172c <checkButton+0xb8>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	701a      	strb	r2, [r3, #0]
		printf("push_sw_down\r\n");
 80016a8:	4821      	ldr	r0, [pc, #132]	@ (8001730 <checkButton+0xbc>)
 80016aa:	f003 ffd5 	bl	8005658 <puts>
		temper_down();
 80016ae:	f000 f9bf 	bl	8001a30 <temper_down>
		HAL_Delay(10);
 80016b2:	200a      	movs	r0, #10
 80016b4:	f001 f8ee 	bl	8002894 <HAL_Delay>
	}
	if (g_f_sw_fix) {
 80016b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001734 <checkButton+0xc0>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00a      	beq.n	80016d8 <checkButton+0x64>
		g_f_sw_fix = 0;
 80016c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001734 <checkButton+0xc0>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
		printf("push_sw_fix\r\n");
 80016c8:	481b      	ldr	r0, [pc, #108]	@ (8001738 <checkButton+0xc4>)
 80016ca:	f003 ffc5 	bl	8005658 <puts>
		setFixedTemper();
 80016ce:	f000 f9c7 	bl	8001a60 <setFixedTemper>
		HAL_Delay(10);
 80016d2:	200a      	movs	r0, #10
 80016d4:	f001 f8de 	bl	8002894 <HAL_Delay>
	}

	if (g_f_sw_on != prev_sw_on) {
 80016d8:	4b18      	ldr	r3, [pc, #96]	@ (800173c <checkButton+0xc8>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	461a      	mov	r2, r3
 80016e0:	4b17      	ldr	r3, [pc, #92]	@ (8001740 <checkButton+0xcc>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d01a      	beq.n	800171e <checkButton+0xaa>
			prev_sw_on = g_f_sw_on;
 80016e8:	4b14      	ldr	r3, [pc, #80]	@ (800173c <checkButton+0xc8>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	461a      	mov	r2, r3
 80016f0:	4b13      	ldr	r3, [pc, #76]	@ (8001740 <checkButton+0xcc>)
 80016f2:	601a      	str	r2, [r3, #0]

			if (g_f_sw_on) {
 80016f4:	4b11      	ldr	r3, [pc, #68]	@ (800173c <checkButton+0xc8>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d006      	beq.n	800170c <checkButton+0x98>
				printf("push_sw_on\r\n");
 80016fe:	4811      	ldr	r0, [pc, #68]	@ (8001744 <checkButton+0xd0>)
 8001700:	f003 ffaa 	bl	8005658 <puts>
				heaterOnOff(ON_t);
 8001704:	2001      	movs	r0, #1
 8001706:	f000 f961 	bl	80019cc <heaterOnOff>
 800170a:	e005      	b.n	8001718 <checkButton+0xa4>
			} else {
				printf("push_sw_off\r\n");
 800170c:	480e      	ldr	r0, [pc, #56]	@ (8001748 <checkButton+0xd4>)
 800170e:	f003 ffa3 	bl	8005658 <puts>
				heaterOnOff(OFF_t);
 8001712:	2000      	movs	r0, #0
 8001714:	f000 f95a 	bl	80019cc <heaterOnOff>
			}

			HAL_Delay(10);
 8001718:	200a      	movs	r0, #10
 800171a:	f001 f8bb 	bl	8002894 <HAL_Delay>
		}


}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200004de 	.word	0x200004de
 8001728:	08006478 	.word	0x08006478
 800172c:	200004df 	.word	0x200004df
 8001730:	08006484 	.word	0x08006484
 8001734:	200004e0 	.word	0x200004e0
 8001738:	08006494 	.word	0x08006494
 800173c:	200004e1 	.word	0x200004e1
 8001740:	20000008 	.word	0x20000008
 8001744:	080064a4 	.word	0x080064a4
 8001748:	080064b0 	.word	0x080064b0

0800174c <init_fnd>:
#define false 0

extern SPI_HandleTypeDef hspi2;
unsigned char _LED_0F[29];

void init_fnd(){
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
	_LED_0F[0] = 0xC0; //0
 8001750:	4b2d      	ldr	r3, [pc, #180]	@ (8001808 <init_fnd+0xbc>)
 8001752:	22c0      	movs	r2, #192	@ 0xc0
 8001754:	701a      	strb	r2, [r3, #0]
	_LED_0F[1] = 0xF9; //1
 8001756:	4b2c      	ldr	r3, [pc, #176]	@ (8001808 <init_fnd+0xbc>)
 8001758:	22f9      	movs	r2, #249	@ 0xf9
 800175a:	705a      	strb	r2, [r3, #1]
	_LED_0F[2] = 0xA4; //2
 800175c:	4b2a      	ldr	r3, [pc, #168]	@ (8001808 <init_fnd+0xbc>)
 800175e:	22a4      	movs	r2, #164	@ 0xa4
 8001760:	709a      	strb	r2, [r3, #2]
	_LED_0F[3] = 0xB0; //3
 8001762:	4b29      	ldr	r3, [pc, #164]	@ (8001808 <init_fnd+0xbc>)
 8001764:	22b0      	movs	r2, #176	@ 0xb0
 8001766:	70da      	strb	r2, [r3, #3]
	_LED_0F[4] = 0x99; //4
 8001768:	4b27      	ldr	r3, [pc, #156]	@ (8001808 <init_fnd+0xbc>)
 800176a:	2299      	movs	r2, #153	@ 0x99
 800176c:	711a      	strb	r2, [r3, #4]
	_LED_0F[5] = 0x92; //5
 800176e:	4b26      	ldr	r3, [pc, #152]	@ (8001808 <init_fnd+0xbc>)
 8001770:	2292      	movs	r2, #146	@ 0x92
 8001772:	715a      	strb	r2, [r3, #5]
	_LED_0F[6] = 0x82; //6
 8001774:	4b24      	ldr	r3, [pc, #144]	@ (8001808 <init_fnd+0xbc>)
 8001776:	2282      	movs	r2, #130	@ 0x82
 8001778:	719a      	strb	r2, [r3, #6]
	_LED_0F[7] = 0xF8; //7
 800177a:	4b23      	ldr	r3, [pc, #140]	@ (8001808 <init_fnd+0xbc>)
 800177c:	22f8      	movs	r2, #248	@ 0xf8
 800177e:	71da      	strb	r2, [r3, #7]
	_LED_0F[8] = 0x80; //8
 8001780:	4b21      	ldr	r3, [pc, #132]	@ (8001808 <init_fnd+0xbc>)
 8001782:	2280      	movs	r2, #128	@ 0x80
 8001784:	721a      	strb	r2, [r3, #8]
	_LED_0F[9] = 0x90; //9
 8001786:	4b20      	ldr	r3, [pc, #128]	@ (8001808 <init_fnd+0xbc>)
 8001788:	2290      	movs	r2, #144	@ 0x90
 800178a:	725a      	strb	r2, [r3, #9]
	_LED_0F[10] = 0x88; //A
 800178c:	4b1e      	ldr	r3, [pc, #120]	@ (8001808 <init_fnd+0xbc>)
 800178e:	2288      	movs	r2, #136	@ 0x88
 8001790:	729a      	strb	r2, [r3, #10]
	_LED_0F[11] = 0x83; //b
 8001792:	4b1d      	ldr	r3, [pc, #116]	@ (8001808 <init_fnd+0xbc>)
 8001794:	2283      	movs	r2, #131	@ 0x83
 8001796:	72da      	strb	r2, [r3, #11]
	_LED_0F[12] = 0xC6; //C
 8001798:	4b1b      	ldr	r3, [pc, #108]	@ (8001808 <init_fnd+0xbc>)
 800179a:	22c6      	movs	r2, #198	@ 0xc6
 800179c:	731a      	strb	r2, [r3, #12]
	_LED_0F[13] = 0xA1; //d
 800179e:	4b1a      	ldr	r3, [pc, #104]	@ (8001808 <init_fnd+0xbc>)
 80017a0:	22a1      	movs	r2, #161	@ 0xa1
 80017a2:	735a      	strb	r2, [r3, #13]
	_LED_0F[14] = 0x86; //E
 80017a4:	4b18      	ldr	r3, [pc, #96]	@ (8001808 <init_fnd+0xbc>)
 80017a6:	2286      	movs	r2, #134	@ 0x86
 80017a8:	739a      	strb	r2, [r3, #14]
	_LED_0F[15] = 0x8E; //F
 80017aa:	4b17      	ldr	r3, [pc, #92]	@ (8001808 <init_fnd+0xbc>)
 80017ac:	228e      	movs	r2, #142	@ 0x8e
 80017ae:	73da      	strb	r2, [r3, #15]
	_LED_0F[16] = 0xC2; //G
 80017b0:	4b15      	ldr	r3, [pc, #84]	@ (8001808 <init_fnd+0xbc>)
 80017b2:	22c2      	movs	r2, #194	@ 0xc2
 80017b4:	741a      	strb	r2, [r3, #16]
	_LED_0F[17] = 0x89; //H
 80017b6:	4b14      	ldr	r3, [pc, #80]	@ (8001808 <init_fnd+0xbc>)
 80017b8:	2289      	movs	r2, #137	@ 0x89
 80017ba:	745a      	strb	r2, [r3, #17]
	_LED_0F[18] = 0xF9; //I
 80017bc:	4b12      	ldr	r3, [pc, #72]	@ (8001808 <init_fnd+0xbc>)
 80017be:	22f9      	movs	r2, #249	@ 0xf9
 80017c0:	749a      	strb	r2, [r3, #18]
	_LED_0F[19] = 0xF1; //J
 80017c2:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <init_fnd+0xbc>)
 80017c4:	22f1      	movs	r2, #241	@ 0xf1
 80017c6:	74da      	strb	r2, [r3, #19]
	_LED_0F[20] = 0xC3; //L
 80017c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001808 <init_fnd+0xbc>)
 80017ca:	22c3      	movs	r2, #195	@ 0xc3
 80017cc:	751a      	strb	r2, [r3, #20]
	_LED_0F[21] = 0xA9; //n
 80017ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001808 <init_fnd+0xbc>)
 80017d0:	22a9      	movs	r2, #169	@ 0xa9
 80017d2:	755a      	strb	r2, [r3, #21]
	_LED_0F[22] = 0xC0; //O
 80017d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001808 <init_fnd+0xbc>)
 80017d6:	22c0      	movs	r2, #192	@ 0xc0
 80017d8:	759a      	strb	r2, [r3, #22]
	_LED_0F[23] = 0x8C; //P
 80017da:	4b0b      	ldr	r3, [pc, #44]	@ (8001808 <init_fnd+0xbc>)
 80017dc:	228c      	movs	r2, #140	@ 0x8c
 80017de:	75da      	strb	r2, [r3, #23]
	_LED_0F[24] = 0x98; //q
 80017e0:	4b09      	ldr	r3, [pc, #36]	@ (8001808 <init_fnd+0xbc>)
 80017e2:	2298      	movs	r2, #152	@ 0x98
 80017e4:	761a      	strb	r2, [r3, #24]
	_LED_0F[25] = 0x92; //S
 80017e6:	4b08      	ldr	r3, [pc, #32]	@ (8001808 <init_fnd+0xbc>)
 80017e8:	2292      	movs	r2, #146	@ 0x92
 80017ea:	765a      	strb	r2, [r3, #25]
	_LED_0F[26] = 0xC1; //U
 80017ec:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <init_fnd+0xbc>)
 80017ee:	22c1      	movs	r2, #193	@ 0xc1
 80017f0:	769a      	strb	r2, [r3, #26]
	_LED_0F[27] = 0x91; //Y
 80017f2:	4b05      	ldr	r3, [pc, #20]	@ (8001808 <init_fnd+0xbc>)
 80017f4:	2291      	movs	r2, #145	@ 0x91
 80017f6:	76da      	strb	r2, [r3, #27]
	_LED_0F[28] = 0xFE; //hight -
 80017f8:	4b03      	ldr	r3, [pc, #12]	@ (8001808 <init_fnd+0xbc>)
 80017fa:	22fe      	movs	r2, #254	@ 0xfe
 80017fc:	771a      	strb	r2, [r3, #28]
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	200004c0 	.word	0x200004c0

0800180c <send>:
void send(uint8_t X){
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(FND_SCLK_GPIO_Port, FND_SCLK_Pin, 0);
		HAL_GPIO_WritePin(FND_SCLK_GPIO_Port, FND_SCLK_Pin, 1);

	}*/

	HAL_SPI_Transmit(&hspi2, &X, 1, 100);
 8001816:	1df9      	adds	r1, r7, #7
 8001818:	2364      	movs	r3, #100	@ 0x64
 800181a:	2201      	movs	r2, #1
 800181c:	4803      	ldr	r0, [pc, #12]	@ (800182c <send+0x20>)
 800181e:	f002 fd9f 	bl	8004360 <HAL_SPI_Transmit>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	2000054c 	.word	0x2000054c

08001830 <send_port>:

void send_port(uint8_t X, uint8_t port){
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	460a      	mov	r2, r1
 800183a:	71fb      	strb	r3, [r7, #7]
 800183c:	4613      	mov	r3, r2
 800183e:	71bb      	strb	r3, [r7, #6]
	send(X);
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff ffe2 	bl	800180c <send>
	send(port);
 8001848:	79bb      	ldrb	r3, [r7, #6]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff ffde 	bl	800180c <send>
	HAL_GPIO_WritePin(FND_RCLK_GPIO_Port, FND_RCLK_Pin, 0);
 8001850:	2200      	movs	r2, #0
 8001852:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001856:	4806      	ldr	r0, [pc, #24]	@ (8001870 <send_port+0x40>)
 8001858:	f001 fae9 	bl	8002e2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FND_RCLK_GPIO_Port, FND_RCLK_Pin, 1);
 800185c:	2201      	movs	r2, #1
 800185e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001862:	4803      	ldr	r0, [pc, #12]	@ (8001870 <send_port+0x40>)
 8001864:	f001 fae3 	bl	8002e2e <HAL_GPIO_WritePin>
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40010c00 	.word	0x40010c00

08001874 <digit4_temper>:

static uint8_t m_tempercount = 0;
void digit4_temper(int temper) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
	int n1, n2, n3, n4;

	n1 = (int) temper % 10;
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	4b4e      	ldr	r3, [pc, #312]	@ (80019b8 <digit4_temper+0x144>)
 8001880:	fb83 1302 	smull	r1, r3, r3, r2
 8001884:	1099      	asrs	r1, r3, #2
 8001886:	17d3      	asrs	r3, r2, #31
 8001888:	1ac9      	subs	r1, r1, r3
 800188a:	460b      	mov	r3, r1
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	440b      	add	r3, r1
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	617b      	str	r3, [r7, #20]
	n2 = (int) ((temper % 100)) / 10;
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	4b48      	ldr	r3, [pc, #288]	@ (80019bc <digit4_temper+0x148>)
 800189a:	fb83 1302 	smull	r1, r3, r3, r2
 800189e:	1159      	asrs	r1, r3, #5
 80018a0:	17d3      	asrs	r3, r2, #31
 80018a2:	1acb      	subs	r3, r1, r3
 80018a4:	2164      	movs	r1, #100	@ 0x64
 80018a6:	fb01 f303 	mul.w	r3, r1, r3
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	4a42      	ldr	r2, [pc, #264]	@ (80019b8 <digit4_temper+0x144>)
 80018ae:	fb82 1203 	smull	r1, r2, r2, r3
 80018b2:	1092      	asrs	r2, r2, #2
 80018b4:	17db      	asrs	r3, r3, #31
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	613b      	str	r3, [r7, #16]
	n3 = (int) ((temper)) / 100;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a3f      	ldr	r2, [pc, #252]	@ (80019bc <digit4_temper+0x148>)
 80018be:	fb82 1203 	smull	r1, r2, r2, r3
 80018c2:	1152      	asrs	r2, r2, #5
 80018c4:	17db      	asrs	r3, r3, #31
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	60fb      	str	r3, [r7, #12]
	n4 = (int) ((temper)) / 1000;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a3c      	ldr	r2, [pc, #240]	@ (80019c0 <digit4_temper+0x14c>)
 80018ce:	fb82 1203 	smull	r1, r2, r2, r3
 80018d2:	1192      	asrs	r2, r2, #6
 80018d4:	17db      	asrs	r3, r3, #31
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	60bb      	str	r3, [r7, #8]

	switch (m_tempercount) {
 80018da:	4b3a      	ldr	r3, [pc, #232]	@ (80019c4 <digit4_temper+0x150>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b03      	cmp	r3, #3
 80018e0:	d838      	bhi.n	8001954 <digit4_temper+0xe0>
 80018e2:	a201      	add	r2, pc, #4	@ (adr r2, 80018e8 <digit4_temper+0x74>)
 80018e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e8:	080018f9 	.word	0x080018f9
 80018ec:	0800190b 	.word	0x0800190b
 80018f0:	08001923 	.word	0x08001923
 80018f4:	0800193b 	.word	0x0800193b

	case 0:
		send_port(_LED_0F[n1], 0b0001); //0
 80018f8:	4a33      	ldr	r2, [pc, #204]	@ (80019c8 <digit4_temper+0x154>)
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	4413      	add	r3, r2
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2101      	movs	r1, #1
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff ff94 	bl	8001830 <send_port>
		break;
 8001908:	e029      	b.n	800195e <digit4_temper+0xea>
	case 1:
		send_port(_LED_0F[n2] & 0x7F, 0b0010); //1
 800190a:	4a2f      	ldr	r2, [pc, #188]	@ (80019c8 <digit4_temper+0x154>)
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	4413      	add	r3, r2
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2102      	movs	r1, #2
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff ff88 	bl	8001830 <send_port>
		break;
 8001920:	e01d      	b.n	800195e <digit4_temper+0xea>
	case 2:
		if (temper > 99) {
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b63      	cmp	r3, #99	@ 0x63
 8001926:	dd17      	ble.n	8001958 <digit4_temper+0xe4>
			send_port(_LED_0F[n3], 0b0100);
 8001928:	4a27      	ldr	r2, [pc, #156]	@ (80019c8 <digit4_temper+0x154>)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4413      	add	r3, r2
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2104      	movs	r1, #4
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff ff7c 	bl	8001830 <send_port>
		}
		break;
 8001938:	e00e      	b.n	8001958 <digit4_temper+0xe4>
	case 3:
		if (temper > 999) {
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001940:	db0c      	blt.n	800195c <digit4_temper+0xe8>
			send_port(_LED_0F[n4], 0b1000);
 8001942:	4a21      	ldr	r2, [pc, #132]	@ (80019c8 <digit4_temper+0x154>)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	4413      	add	r3, r2
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2108      	movs	r1, #8
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff6f 	bl	8001830 <send_port>
		}
		break;
 8001952:	e003      	b.n	800195c <digit4_temper+0xe8>
	default:
		break;
 8001954:	bf00      	nop
 8001956:	e002      	b.n	800195e <digit4_temper+0xea>
		break;
 8001958:	bf00      	nop
 800195a:	e000      	b.n	800195e <digit4_temper+0xea>
		break;
 800195c:	bf00      	nop
	}

	m_tempercount++;
 800195e:	4b19      	ldr	r3, [pc, #100]	@ (80019c4 <digit4_temper+0x150>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	3301      	adds	r3, #1
 8001964:	b2da      	uxtb	r2, r3
 8001966:	4b17      	ldr	r3, [pc, #92]	@ (80019c4 <digit4_temper+0x150>)
 8001968:	701a      	strb	r2, [r3, #0]

	if (temper > 999 && m_tempercount >= 4) {
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001970:	db07      	blt.n	8001982 <digit4_temper+0x10e>
 8001972:	4b14      	ldr	r3, [pc, #80]	@ (80019c4 <digit4_temper+0x150>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b03      	cmp	r3, #3
 8001978:	d903      	bls.n	8001982 <digit4_temper+0x10e>
		m_tempercount = 0;
 800197a:	4b12      	ldr	r3, [pc, #72]	@ (80019c4 <digit4_temper+0x150>)
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
 8001980:	e015      	b.n	80019ae <digit4_temper+0x13a>
	}else if(temper > 99 && m_tempercount >= 3){
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b63      	cmp	r3, #99	@ 0x63
 8001986:	dd07      	ble.n	8001998 <digit4_temper+0x124>
 8001988:	4b0e      	ldr	r3, [pc, #56]	@ (80019c4 <digit4_temper+0x150>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b02      	cmp	r3, #2
 800198e:	d903      	bls.n	8001998 <digit4_temper+0x124>
		m_tempercount = 0;
 8001990:	4b0c      	ldr	r3, [pc, #48]	@ (80019c4 <digit4_temper+0x150>)
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
 8001996:	e00a      	b.n	80019ae <digit4_temper+0x13a>
	}else if(temper <= 99 && m_tempercount >= 2){
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b63      	cmp	r3, #99	@ 0x63
 800199c:	dc07      	bgt.n	80019ae <digit4_temper+0x13a>
 800199e:	4b09      	ldr	r3, [pc, #36]	@ (80019c4 <digit4_temper+0x150>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d903      	bls.n	80019ae <digit4_temper+0x13a>
		m_tempercount = 0;
 80019a6:	4b07      	ldr	r3, [pc, #28]	@ (80019c4 <digit4_temper+0x150>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
	}

}
 80019ac:	e7ff      	b.n	80019ae <digit4_temper+0x13a>
 80019ae:	bf00      	nop
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	66666667 	.word	0x66666667
 80019bc:	51eb851f 	.word	0x51eb851f
 80019c0:	10624dd3 	.word	0x10624dd3
 80019c4:	200004dd 	.word	0x200004dd
 80019c8:	200004c0 	.word	0x200004c0

080019cc <heaterOnOff>:
#include "controlType.h"




void heaterOnOff(ON_OFF_t ON_OFF){
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
	if(ON_OFF){
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <heaterOnOff+0x1c>
		HAL_GPIO_WritePin(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, PB5_RELAY_ON_OFF_CTRL_Pin, 1);
 80019dc:	2201      	movs	r2, #1
 80019de:	2120      	movs	r1, #32
 80019e0:	4806      	ldr	r0, [pc, #24]	@ (80019fc <heaterOnOff+0x30>)
 80019e2:	f001 fa24 	bl	8002e2e <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, PB5_RELAY_ON_OFF_CTRL_Pin, 0);
	}
}
 80019e6:	e004      	b.n	80019f2 <heaterOnOff+0x26>
		HAL_GPIO_WritePin(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, PB5_RELAY_ON_OFF_CTRL_Pin, 0);
 80019e8:	2200      	movs	r2, #0
 80019ea:	2120      	movs	r1, #32
 80019ec:	4803      	ldr	r0, [pc, #12]	@ (80019fc <heaterOnOff+0x30>)
 80019ee:	f001 fa1e 	bl	8002e2e <HAL_GPIO_WritePin>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40010c00 	.word	0x40010c00

08001a00 <temper_up>:

void temper_up(){
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
	m_desired_temper++;
 8001a04:	4b09      	ldr	r3, [pc, #36]	@ (8001a2c <temper_up+0x2c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	4a08      	ldr	r2, [pc, #32]	@ (8001a2c <temper_up+0x2c>)
 8001a0c:	6013      	str	r3, [r2, #0]
	if(m_desired_temper > 99) m_desired_temper = 0;
 8001a0e:	4b07      	ldr	r3, [pc, #28]	@ (8001a2c <temper_up+0x2c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b63      	cmp	r3, #99	@ 0x63
 8001a14:	dd02      	ble.n	8001a1c <temper_up+0x1c>
 8001a16:	4b05      	ldr	r3, [pc, #20]	@ (8001a2c <temper_up+0x2c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
	printTemper(m_desired_temper);
 8001a1c:	4b03      	ldr	r3, [pc, #12]	@ (8001a2c <temper_up+0x2c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f000 fba5 	bl	8002170 <printTemper>
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	200004f4 	.word	0x200004f4

08001a30 <temper_down>:

void temper_down(){
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
	m_desired_temper--;
 8001a34:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <temper_down+0x2c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	4a08      	ldr	r2, [pc, #32]	@ (8001a5c <temper_down+0x2c>)
 8001a3c:	6013      	str	r3, [r2, #0]
	if(m_desired_temper < 0) m_desired_temper = 99;
 8001a3e:	4b07      	ldr	r3, [pc, #28]	@ (8001a5c <temper_down+0x2c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	da02      	bge.n	8001a4c <temper_down+0x1c>
 8001a46:	4b05      	ldr	r3, [pc, #20]	@ (8001a5c <temper_down+0x2c>)
 8001a48:	2263      	movs	r2, #99	@ 0x63
 8001a4a:	601a      	str	r2, [r3, #0]
	printTemper(m_desired_temper);
 8001a4c:	4b03      	ldr	r3, [pc, #12]	@ (8001a5c <temper_down+0x2c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f000 fb8d 	bl	8002170 <printTemper>
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200004f4 	.word	0x200004f4

08001a60 <setFixedTemper>:

void setFixedTemper(){
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
	m_fixed_temper = m_desired_temper;
 8001a64:	4b03      	ldr	r3, [pc, #12]	@ (8001a74 <setFixedTemper+0x14>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a03      	ldr	r2, [pc, #12]	@ (8001a78 <setFixedTemper+0x18>)
 8001a6a:	6013      	str	r3, [r2, #0]
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr
 8001a74:	200004f4 	.word	0x200004f4
 8001a78:	200004ec 	.word	0x200004ec

08001a7c <heaterControl>:
int getFixedTemper(){
	return m_desired_temper;
}


void heaterControl(int g_temper){
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
	if(g_temper < (m_fixed_temper*10) && !rev_current){
 8001a84:	4b0d      	ldr	r3, [pc, #52]	@ (8001abc <heaterControl+0x40>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	461a      	mov	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4293      	cmp	r3, r2
 8001a96:	da08      	bge.n	8001aaa <heaterControl+0x2e>
 8001a98:	4b09      	ldr	r3, [pc, #36]	@ (8001ac0 <heaterControl+0x44>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d103      	bne.n	8001aaa <heaterControl+0x2e>
		heaterOnOff(ON_t);
 8001aa2:	2001      	movs	r0, #1
 8001aa4:	f7ff ff92 	bl	80019cc <heaterOnOff>
 8001aa8:	e003      	b.n	8001ab2 <heaterControl+0x36>
	}
	else{
		heaterOnOff(OFF_t);
 8001aaa:	2000      	movs	r0, #0
 8001aac:	f7ff ff8e 	bl	80019cc <heaterOnOff>
	}
}
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200004ec 	.word	0x200004ec
 8001ac0:	200004e9 	.word	0x200004e9

08001ac4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *p, int len){
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)p, len, 10);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	230a      	movs	r3, #10
 8001ad6:	68b9      	ldr	r1, [r7, #8]
 8001ad8:	4803      	ldr	r0, [pc, #12]	@ (8001ae8 <_write+0x24>)
 8001ada:	f003 fad1 	bl	8005080 <HAL_UART_Transmit>
		return len;
 8001ade:	687b      	ldr	r3, [r7, #4]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000634 	.word	0x20000634

08001aec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aec:	b5b0      	push	{r4, r5, r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001af2:	f000 fe6d 	bl	80027d0 <HAL_Init>

  /* USER CODE BEGIN Init */
  init_fnd();
 8001af6:	f7ff fe29 	bl	800174c <init_fnd>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001afa:	f000 f88f 	bl	8001c1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001afe:	f000 f9f9 	bl	8001ef4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001b02:	f000 f9cd 	bl	8001ea0 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8001b06:	f000 f8fd 	bl	8001d04 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001b0a:	f000 f931 	bl	8001d70 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b0e:	f000 f97b 	bl	8001e08 <MX_TIM3_Init>
  MX_I2C2_Init();
 8001b12:	f000 f8c9 	bl	8001ca8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  Ds18b20_Init();
 8001b16:	f7fe fd09 	bl	800052c <Ds18b20_Init>
  HAL_TIM_Base_Start(&htim2);
 8001b1a:	4834      	ldr	r0, [pc, #208]	@ (8001bec <main+0x100>)
 8001b1c:	f002 fe6c 	bl	80047f8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8001b20:	4833      	ldr	r0, [pc, #204]	@ (8001bf0 <main+0x104>)
 8001b22:	f002 feb3 	bl	800488c <HAL_TIM_Base_Start_IT>
  SSD1306_Init();
 8001b26:	f7ff fae3 	bl	80010f0 <SSD1306_Init>

  //오프닝 화면
  opening();
 8001b2a:	f000 fabb 	bl	80020a4 <opening>

  char msg[] = "UART direct test\r\n";
 8001b2e:	4b31      	ldr	r3, [pc, #196]	@ (8001bf4 <main+0x108>)
 8001b30:	1d3c      	adds	r4, r7, #4
 8001b32:	461d      	mov	r5, r3
 8001b34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b38:	682b      	ldr	r3, [r5, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	8022      	strh	r2, [r4, #0]
 8001b3e:	3402      	adds	r4, #2
 8001b40:	0c1b      	lsrs	r3, r3, #16
 8001b42:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fb00 	bl	800014c <strlen>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	1d39      	adds	r1, r7, #4
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295
 8001b56:	4828      	ldr	r0, [pc, #160]	@ (8001bf8 <main+0x10c>)
 8001b58:	f003 fa92 	bl	8005080 <HAL_UART_Transmit>
static int m_first = 0;
static GPIO_PinState prev_state = GPIO_PIN_RESET;
  while (1)
  {

	  checkButton();// 버튼 인터럽트 확인
 8001b5c:	f7ff fd8a 	bl	8001674 <checkButton>

	  if(m_count > 100 || m_first == 0){
 8001b60:	4b26      	ldr	r3, [pc, #152]	@ (8001bfc <main+0x110>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b64      	cmp	r3, #100	@ 0x64
 8001b66:	dc03      	bgt.n	8001b70 <main+0x84>
 8001b68:	4b25      	ldr	r3, [pc, #148]	@ (8001c00 <main+0x114>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d133      	bne.n	8001bd8 <main+0xec>

		  Ds18b20_ManualConvert();  // 시간이 오래 걸리더라도,
 8001b70:	f7fe fd5c 	bl	800062c <Ds18b20_ManualConvert>
		  g_temper = (int)(ds18b20[0].Temperature * 10);  // 미리 저장만 함
 8001b74:	4b23      	ldr	r3, [pc, #140]	@ (8001c04 <main+0x118>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	4923      	ldr	r1, [pc, #140]	@ (8001c08 <main+0x11c>)
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe faee 	bl	800015c <__aeabi_fmul>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fcac 	bl	80004e0 <__aeabi_f2iz>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	4a20      	ldr	r2, [pc, #128]	@ (8001c0c <main+0x120>)
 8001b8c:	6013      	str	r3, [r2, #0]
		  heaterControl(g_temper);
 8001b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8001c0c <main+0x120>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff ff72 	bl	8001a7c <heaterControl>
		  heater_state = HAL_GPIO_ReadPin(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, PB5_RELAY_ON_OFF_CTRL_Pin);
 8001b98:	2120      	movs	r1, #32
 8001b9a:	481d      	ldr	r0, [pc, #116]	@ (8001c10 <main+0x124>)
 8001b9c:	f001 f930 	bl	8002e00 <HAL_GPIO_ReadPin>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c14 <main+0x128>)
 8001ba6:	701a      	strb	r2, [r3, #0]
		  if(heater_state != prev_state){
 8001ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c14 <main+0x128>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	4b1a      	ldr	r3, [pc, #104]	@ (8001c18 <main+0x12c>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d00a      	beq.n	8001bcc <main+0xe0>
			  prev_state = heater_state;
 8001bb6:	4b17      	ldr	r3, [pc, #92]	@ (8001c14 <main+0x128>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	4b16      	ldr	r3, [pc, #88]	@ (8001c18 <main+0x12c>)
 8001bbe:	701a      	strb	r2, [r3, #0]
			  printHeaterState(heater_state);
 8001bc0:	4b14      	ldr	r3, [pc, #80]	@ (8001c14 <main+0x128>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 fafa 	bl	80021c0 <printHeaterState>
		  }
		  //printHeaterState(heater_state);

		  m_count = 0;
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001bfc <main+0x110>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
		  m_first = 1;
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001c00 <main+0x114>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]





	m_count++;
 8001bd8:	4b08      	ldr	r3, [pc, #32]	@ (8001bfc <main+0x110>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	4a07      	ldr	r2, [pc, #28]	@ (8001bfc <main+0x110>)
 8001be0:	6013      	str	r3, [r2, #0]

	HAL_Delay(10);
 8001be2:	200a      	movs	r0, #10
 8001be4:	f000 fe56 	bl	8002894 <HAL_Delay>
	  checkButton();// 버튼 인터럽트 확인
 8001be8:	e7b8      	b.n	8001b5c <main+0x70>
 8001bea:	bf00      	nop
 8001bec:	200005a4 	.word	0x200005a4
 8001bf0:	200005ec 	.word	0x200005ec
 8001bf4:	080064c0 	.word	0x080064c0
 8001bf8:	20000634 	.word	0x20000634
 8001bfc:	2000067c 	.word	0x2000067c
 8001c00:	20000680 	.word	0x20000680
 8001c04:	20000090 	.word	0x20000090
 8001c08:	41200000 	.word	0x41200000
 8001c0c:	200004e4 	.word	0x200004e4
 8001c10:	40010c00 	.word	0x40010c00
 8001c14:	200004f0 	.word	0x200004f0
 8001c18:	20000684 	.word	0x20000684

08001c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b090      	sub	sp, #64	@ 0x40
 8001c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c22:	f107 0318 	add.w	r3, r7, #24
 8001c26:	2228      	movs	r2, #40	@ 0x28
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f003 fe16 	bl	800585c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c30:	1d3b      	adds	r3, r7, #4
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	605a      	str	r2, [r3, #4]
 8001c38:	609a      	str	r2, [r3, #8]
 8001c3a:	60da      	str	r2, [r3, #12]
 8001c3c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c42:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c46:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c50:	2302      	movs	r3, #2
 8001c52:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c54:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c58:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c5a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c60:	f107 0318 	add.w	r3, r7, #24
 8001c64:	4618      	mov	r0, r3
 8001c66:	f001 fee7 	bl	8003a38 <HAL_RCC_OscConfig>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001c70:	f000 fa12 	bl	8002098 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c74:	230f      	movs	r3, #15
 8001c76:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	2102      	movs	r1, #2
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f002 f954 	bl	8003f3c <HAL_RCC_ClockConfig>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001c9a:	f000 f9fd 	bl	8002098 <Error_Handler>
  }
}
 8001c9e:	bf00      	nop
 8001ca0:	3740      	adds	r7, #64	@ 0x40
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
	...

08001ca8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001cac:	4b12      	ldr	r3, [pc, #72]	@ (8001cf8 <MX_I2C2_Init+0x50>)
 8001cae:	4a13      	ldr	r2, [pc, #76]	@ (8001cfc <MX_I2C2_Init+0x54>)
 8001cb0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001cb2:	4b11      	ldr	r3, [pc, #68]	@ (8001cf8 <MX_I2C2_Init+0x50>)
 8001cb4:	4a12      	ldr	r2, [pc, #72]	@ (8001d00 <MX_I2C2_Init+0x58>)
 8001cb6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf8 <MX_I2C2_Init+0x50>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf8 <MX_I2C2_Init+0x50>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf8 <MX_I2C2_Init+0x50>)
 8001cc6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001cca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf8 <MX_I2C2_Init+0x50>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001cd2:	4b09      	ldr	r3, [pc, #36]	@ (8001cf8 <MX_I2C2_Init+0x50>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cd8:	4b07      	ldr	r3, [pc, #28]	@ (8001cf8 <MX_I2C2_Init+0x50>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cde:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <MX_I2C2_Init+0x50>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ce4:	4804      	ldr	r0, [pc, #16]	@ (8001cf8 <MX_I2C2_Init+0x50>)
 8001ce6:	f001 f8dd 	bl	8002ea4 <HAL_I2C_Init>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001cf0:	f000 f9d2 	bl	8002098 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001cf4:	bf00      	nop
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	200004f8 	.word	0x200004f8
 8001cfc:	40005800 	.word	0x40005800
 8001d00:	00061a80 	.word	0x00061a80

08001d04 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001d08:	4b17      	ldr	r3, [pc, #92]	@ (8001d68 <MX_SPI2_Init+0x64>)
 8001d0a:	4a18      	ldr	r2, [pc, #96]	@ (8001d6c <MX_SPI2_Init+0x68>)
 8001d0c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d0e:	4b16      	ldr	r3, [pc, #88]	@ (8001d68 <MX_SPI2_Init+0x64>)
 8001d10:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d14:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d16:	4b14      	ldr	r3, [pc, #80]	@ (8001d68 <MX_SPI2_Init+0x64>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d1c:	4b12      	ldr	r3, [pc, #72]	@ (8001d68 <MX_SPI2_Init+0x64>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d22:	4b11      	ldr	r3, [pc, #68]	@ (8001d68 <MX_SPI2_Init+0x64>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d28:	4b0f      	ldr	r3, [pc, #60]	@ (8001d68 <MX_SPI2_Init+0x64>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d68 <MX_SPI2_Init+0x64>)
 8001d30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d34:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d36:	4b0c      	ldr	r3, [pc, #48]	@ (8001d68 <MX_SPI2_Init+0x64>)
 8001d38:	2218      	movs	r2, #24
 8001d3a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d68 <MX_SPI2_Init+0x64>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d42:	4b09      	ldr	r3, [pc, #36]	@ (8001d68 <MX_SPI2_Init+0x64>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d48:	4b07      	ldr	r3, [pc, #28]	@ (8001d68 <MX_SPI2_Init+0x64>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001d4e:	4b06      	ldr	r3, [pc, #24]	@ (8001d68 <MX_SPI2_Init+0x64>)
 8001d50:	220a      	movs	r2, #10
 8001d52:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d54:	4804      	ldr	r0, [pc, #16]	@ (8001d68 <MX_SPI2_Init+0x64>)
 8001d56:	f002 fa7f 	bl	8004258 <HAL_SPI_Init>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001d60:	f000 f99a 	bl	8002098 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d64:	bf00      	nop
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	2000054c 	.word	0x2000054c
 8001d6c:	40003800 	.word	0x40003800

08001d70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d76:	f107 0308 	add.w	r3, r7, #8
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	605a      	str	r2, [r3, #4]
 8001d80:	609a      	str	r2, [r3, #8]
 8001d82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d84:	463b      	mov	r3, r7
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001e04 <MX_TIM2_Init+0x94>)
 8001d8e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001d94:	4b1b      	ldr	r3, [pc, #108]	@ (8001e04 <MX_TIM2_Init+0x94>)
 8001d96:	2247      	movs	r2, #71	@ 0x47
 8001d98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e04 <MX_TIM2_Init+0x94>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001da0:	4b18      	ldr	r3, [pc, #96]	@ (8001e04 <MX_TIM2_Init+0x94>)
 8001da2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001da6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da8:	4b16      	ldr	r3, [pc, #88]	@ (8001e04 <MX_TIM2_Init+0x94>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dae:	4b15      	ldr	r3, [pc, #84]	@ (8001e04 <MX_TIM2_Init+0x94>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001db4:	4813      	ldr	r0, [pc, #76]	@ (8001e04 <MX_TIM2_Init+0x94>)
 8001db6:	f002 fcd0 	bl	800475a <HAL_TIM_Base_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001dc0:	f000 f96a 	bl	8002098 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001dca:	f107 0308 	add.w	r3, r7, #8
 8001dce:	4619      	mov	r1, r3
 8001dd0:	480c      	ldr	r0, [pc, #48]	@ (8001e04 <MX_TIM2_Init+0x94>)
 8001dd2:	f002 fe9d 	bl	8004b10 <HAL_TIM_ConfigClockSource>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001ddc:	f000 f95c 	bl	8002098 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de0:	2300      	movs	r3, #0
 8001de2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001de8:	463b      	mov	r3, r7
 8001dea:	4619      	mov	r1, r3
 8001dec:	4805      	ldr	r0, [pc, #20]	@ (8001e04 <MX_TIM2_Init+0x94>)
 8001dee:	f003 f887 	bl	8004f00 <HAL_TIMEx_MasterConfigSynchronization>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001df8:	f000 f94e 	bl	8002098 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001dfc:	bf00      	nop
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	200005a4 	.word	0x200005a4

08001e08 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e0e:	f107 0308 	add.w	r3, r7, #8
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	605a      	str	r2, [r3, #4]
 8001e18:	609a      	str	r2, [r3, #8]
 8001e1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e1c:	463b      	mov	r3, r7
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e24:	4b1c      	ldr	r3, [pc, #112]	@ (8001e98 <MX_TIM3_Init+0x90>)
 8001e26:	4a1d      	ldr	r2, [pc, #116]	@ (8001e9c <MX_TIM3_Init+0x94>)
 8001e28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001e2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001e98 <MX_TIM3_Init+0x90>)
 8001e2c:	2247      	movs	r2, #71	@ 0x47
 8001e2e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e30:	4b19      	ldr	r3, [pc, #100]	@ (8001e98 <MX_TIM3_Init+0x90>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 24;
 8001e36:	4b18      	ldr	r3, [pc, #96]	@ (8001e98 <MX_TIM3_Init+0x90>)
 8001e38:	2218      	movs	r2, #24
 8001e3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e3c:	4b16      	ldr	r3, [pc, #88]	@ (8001e98 <MX_TIM3_Init+0x90>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e42:	4b15      	ldr	r3, [pc, #84]	@ (8001e98 <MX_TIM3_Init+0x90>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e48:	4813      	ldr	r0, [pc, #76]	@ (8001e98 <MX_TIM3_Init+0x90>)
 8001e4a:	f002 fc86 	bl	800475a <HAL_TIM_Base_Init>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001e54:	f000 f920 	bl	8002098 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e5e:	f107 0308 	add.w	r3, r7, #8
 8001e62:	4619      	mov	r1, r3
 8001e64:	480c      	ldr	r0, [pc, #48]	@ (8001e98 <MX_TIM3_Init+0x90>)
 8001e66:	f002 fe53 	bl	8004b10 <HAL_TIM_ConfigClockSource>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001e70:	f000 f912 	bl	8002098 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e74:	2300      	movs	r3, #0
 8001e76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e7c:	463b      	mov	r3, r7
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4805      	ldr	r0, [pc, #20]	@ (8001e98 <MX_TIM3_Init+0x90>)
 8001e82:	f003 f83d 	bl	8004f00 <HAL_TIMEx_MasterConfigSynchronization>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001e8c:	f000 f904 	bl	8002098 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e90:	bf00      	nop
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	200005ec 	.word	0x200005ec
 8001e9c:	40000400 	.word	0x40000400

08001ea0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ea4:	4b11      	ldr	r3, [pc, #68]	@ (8001eec <MX_USART1_UART_Init+0x4c>)
 8001ea6:	4a12      	ldr	r2, [pc, #72]	@ (8001ef0 <MX_USART1_UART_Init+0x50>)
 8001ea8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001eaa:	4b10      	ldr	r3, [pc, #64]	@ (8001eec <MX_USART1_UART_Init+0x4c>)
 8001eac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001eb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001eec <MX_USART1_UART_Init+0x4c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001eec <MX_USART1_UART_Init+0x4c>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8001eec <MX_USART1_UART_Init+0x4c>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ec4:	4b09      	ldr	r3, [pc, #36]	@ (8001eec <MX_USART1_UART_Init+0x4c>)
 8001ec6:	220c      	movs	r2, #12
 8001ec8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eca:	4b08      	ldr	r3, [pc, #32]	@ (8001eec <MX_USART1_UART_Init+0x4c>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed0:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <MX_USART1_UART_Init+0x4c>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ed6:	4805      	ldr	r0, [pc, #20]	@ (8001eec <MX_USART1_UART_Init+0x4c>)
 8001ed8:	f003 f882 	bl	8004fe0 <HAL_UART_Init>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ee2:	f000 f8d9 	bl	8002098 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000634 	.word	0x20000634
 8001ef0:	40013800 	.word	0x40013800

08001ef4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b088      	sub	sp, #32
 8001ef8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efa:	f107 0310 	add.w	r3, r7, #16
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	605a      	str	r2, [r3, #4]
 8001f04:	609a      	str	r2, [r3, #8]
 8001f06:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f08:	4b5e      	ldr	r3, [pc, #376]	@ (8002084 <MX_GPIO_Init+0x190>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	4a5d      	ldr	r2, [pc, #372]	@ (8002084 <MX_GPIO_Init+0x190>)
 8001f0e:	f043 0310 	orr.w	r3, r3, #16
 8001f12:	6193      	str	r3, [r2, #24]
 8001f14:	4b5b      	ldr	r3, [pc, #364]	@ (8002084 <MX_GPIO_Init+0x190>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f003 0310 	and.w	r3, r3, #16
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f20:	4b58      	ldr	r3, [pc, #352]	@ (8002084 <MX_GPIO_Init+0x190>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	4a57      	ldr	r2, [pc, #348]	@ (8002084 <MX_GPIO_Init+0x190>)
 8001f26:	f043 0320 	orr.w	r3, r3, #32
 8001f2a:	6193      	str	r3, [r2, #24]
 8001f2c:	4b55      	ldr	r3, [pc, #340]	@ (8002084 <MX_GPIO_Init+0x190>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	f003 0320 	and.w	r3, r3, #32
 8001f34:	60bb      	str	r3, [r7, #8]
 8001f36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f38:	4b52      	ldr	r3, [pc, #328]	@ (8002084 <MX_GPIO_Init+0x190>)
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	4a51      	ldr	r2, [pc, #324]	@ (8002084 <MX_GPIO_Init+0x190>)
 8001f3e:	f043 0304 	orr.w	r3, r3, #4
 8001f42:	6193      	str	r3, [r2, #24]
 8001f44:	4b4f      	ldr	r3, [pc, #316]	@ (8002084 <MX_GPIO_Init+0x190>)
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	607b      	str	r3, [r7, #4]
 8001f4e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f50:	4b4c      	ldr	r3, [pc, #304]	@ (8002084 <MX_GPIO_Init+0x190>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	4a4b      	ldr	r2, [pc, #300]	@ (8002084 <MX_GPIO_Init+0x190>)
 8001f56:	f043 0308 	orr.w	r3, r3, #8
 8001f5a:	6193      	str	r3, [r2, #24]
 8001f5c:	4b49      	ldr	r3, [pc, #292]	@ (8002084 <MX_GPIO_Init+0x190>)
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	f003 0308 	and.w	r3, r3, #8
 8001f64:	603b      	str	r3, [r7, #0]
 8001f66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_SET);
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f6e:	4846      	ldr	r0, [pc, #280]	@ (8002088 <MX_GPIO_Init+0x194>)
 8001f70:	f000 ff5d 	bl	8002e2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PA3_TEMP_DATA_GPIO_Port, PA3_TEMP_DATA_Pin, GPIO_PIN_SET);
 8001f74:	2201      	movs	r2, #1
 8001f76:	2108      	movs	r1, #8
 8001f78:	4844      	ldr	r0, [pc, #272]	@ (800208c <MX_GPIO_Init+0x198>)
 8001f7a:	f000 ff58 	bl	8002e2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FND_RCLK_Pin|PB6_LED1_Pin|PB7_LED2_Pin, GPIO_PIN_SET);
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f244 01c0 	movw	r1, #16576	@ 0x40c0
 8001f84:	4842      	ldr	r0, [pc, #264]	@ (8002090 <MX_GPIO_Init+0x19c>)
 8001f86:	f000 ff52 	bl	8002e2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, PB5_RELAY_ON_OFF_CTRL_Pin, GPIO_PIN_RESET);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2120      	movs	r1, #32
 8001f8e:	4840      	ldr	r0, [pc, #256]	@ (8002090 <MX_GPIO_Init+0x19c>)
 8001f90:	f000 ff4d 	bl	8002e2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 8001f94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 8001fa6:	f107 0310 	add.w	r3, r7, #16
 8001faa:	4619      	mov	r1, r3
 8001fac:	4836      	ldr	r0, [pc, #216]	@ (8002088 <MX_GPIO_Init+0x194>)
 8001fae:	f000 fda3 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_SW_Pin */
  GPIO_InitStruct.Pin = GPIO_SW_Pin;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_SW_GPIO_Port, &GPIO_InitStruct);
 8001fbe:	f107 0310 	add.w	r3, r7, #16
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4831      	ldr	r0, [pc, #196]	@ (800208c <MX_GPIO_Init+0x198>)
 8001fc6:	f000 fd97 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3_TEMP_DATA_Pin */
  GPIO_InitStruct.Pin = PA3_TEMP_DATA_Pin;
 8001fca:	2308      	movs	r3, #8
 8001fcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PA3_TEMP_DATA_GPIO_Port, &GPIO_InitStruct);
 8001fda:	f107 0310 	add.w	r3, r7, #16
 8001fde:	4619      	mov	r1, r3
 8001fe0:	482a      	ldr	r0, [pc, #168]	@ (800208c <MX_GPIO_Init+0x198>)
 8001fe2:	f000 fd89 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0_TEMP_SET_UP_Pin PB1_TEMP_SET_FIX_Pin PB2_TEMP_SET_DOWN_Pin PB12_START_SW_PIN_Pin */
  GPIO_InitStruct.Pin = PB0_TEMP_SET_UP_Pin|PB1_TEMP_SET_FIX_Pin|PB2_TEMP_SET_DOWN_Pin|PB12_START_SW_PIN_Pin;
 8001fe6:	f241 0307 	movw	r3, #4103	@ 0x1007
 8001fea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fec:	4b29      	ldr	r3, [pc, #164]	@ (8002094 <MX_GPIO_Init+0x1a0>)
 8001fee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff4:	f107 0310 	add.w	r3, r7, #16
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4825      	ldr	r0, [pc, #148]	@ (8002090 <MX_GPIO_Init+0x19c>)
 8001ffc:	f000 fd7c 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FND_RCLK_Pin PB6_LED1_Pin PB7_LED2_Pin */
  GPIO_InitStruct.Pin = FND_RCLK_Pin|PB6_LED1_Pin|PB7_LED2_Pin;
 8002000:	f244 03c0 	movw	r3, #16576	@ 0x40c0
 8002004:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002006:	2301      	movs	r3, #1
 8002008:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800200a:	2301      	movs	r3, #1
 800200c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800200e:	2303      	movs	r3, #3
 8002010:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002012:	f107 0310 	add.w	r3, r7, #16
 8002016:	4619      	mov	r1, r3
 8002018:	481d      	ldr	r0, [pc, #116]	@ (8002090 <MX_GPIO_Init+0x19c>)
 800201a:	f000 fd6d 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5_RELAY_ON_OFF_CTRL_Pin */
  GPIO_InitStruct.Pin = PB5_RELAY_ON_OFF_CTRL_Pin;
 800201e:	2320      	movs	r3, #32
 8002020:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002022:	2301      	movs	r3, #1
 8002024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002026:	2302      	movs	r3, #2
 8002028:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800202a:	2303      	movs	r3, #3
 800202c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, &GPIO_InitStruct);
 800202e:	f107 0310 	add.w	r3, r7, #16
 8002032:	4619      	mov	r1, r3
 8002034:	4816      	ldr	r0, [pc, #88]	@ (8002090 <MX_GPIO_Init+0x19c>)
 8002036:	f000 fd5f 	bl	8002af8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 9, 0);
 800203a:	2200      	movs	r2, #0
 800203c:	2109      	movs	r1, #9
 800203e:	2006      	movs	r0, #6
 8002040:	f000 fd23 	bl	8002a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002044:	2006      	movs	r0, #6
 8002046:	f000 fd3c 	bl	8002ac2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 9, 0);
 800204a:	2200      	movs	r2, #0
 800204c:	2109      	movs	r1, #9
 800204e:	2007      	movs	r0, #7
 8002050:	f000 fd1b 	bl	8002a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002054:	2007      	movs	r0, #7
 8002056:	f000 fd34 	bl	8002ac2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 9, 0);
 800205a:	2200      	movs	r2, #0
 800205c:	2109      	movs	r1, #9
 800205e:	2008      	movs	r0, #8
 8002060:	f000 fd13 	bl	8002a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002064:	2008      	movs	r0, #8
 8002066:	f000 fd2c 	bl	8002ac2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 9, 0);
 800206a:	2200      	movs	r2, #0
 800206c:	2109      	movs	r1, #9
 800206e:	2028      	movs	r0, #40	@ 0x28
 8002070:	f000 fd0b 	bl	8002a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002074:	2028      	movs	r0, #40	@ 0x28
 8002076:	f000 fd24 	bl	8002ac2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800207a:	bf00      	nop
 800207c:	3720      	adds	r7, #32
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40021000 	.word	0x40021000
 8002088:	40011000 	.word	0x40011000
 800208c:	40010800 	.word	0x40010800
 8002090:	40010c00 	.word	0x40010c00
 8002094:	10210000 	.word	0x10210000

08002098 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800209c:	b672      	cpsid	i
}
 800209e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020a0:	bf00      	nop
 80020a2:	e7fd      	b.n	80020a0 <Error_Handler+0x8>

080020a4 <opening>:
#include <stdio.h>
#include "controlType.h"
#include "main.h"
#include "g_var.h"

void opening() {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
	SSD1306_GotoXY(0, 0);
 80020a8:	2100      	movs	r1, #0
 80020aa:	2000      	movs	r0, #0
 80020ac:	f7ff f988 	bl	80013c0 <SSD1306_GotoXY>
	SSD1306_Puts("Start!", &Font_11x18, 1);
 80020b0:	2201      	movs	r2, #1
 80020b2:	4910      	ldr	r1, [pc, #64]	@ (80020f4 <opening+0x50>)
 80020b4:	4810      	ldr	r0, [pc, #64]	@ (80020f8 <opening+0x54>)
 80020b6:	f7ff fa17 	bl	80014e8 <SSD1306_Puts>
	SSD1306_GotoXY(10, 20);
 80020ba:	2114      	movs	r1, #20
 80020bc:	200a      	movs	r0, #10
 80020be:	f7ff f97f 	bl	80013c0 <SSD1306_GotoXY>
	SSD1306_Puts(" Pepper ", &Font_11x18, 1);
 80020c2:	2201      	movs	r2, #1
 80020c4:	490b      	ldr	r1, [pc, #44]	@ (80020f4 <opening+0x50>)
 80020c6:	480d      	ldr	r0, [pc, #52]	@ (80020fc <opening+0x58>)
 80020c8:	f7ff fa0e 	bl	80014e8 <SSD1306_Puts>
	SSD1306_GotoXY(22, 40);
 80020cc:	2128      	movs	r1, #40	@ 0x28
 80020ce:	2016      	movs	r0, #22
 80020d0:	f7ff f976 	bl	80013c0 <SSD1306_GotoXY>
	SSD1306_Puts("Drier!!:)", &Font_11x18, 1);
 80020d4:	2201      	movs	r2, #1
 80020d6:	4907      	ldr	r1, [pc, #28]	@ (80020f4 <opening+0x50>)
 80020d8:	4809      	ldr	r0, [pc, #36]	@ (8002100 <opening+0x5c>)
 80020da:	f7ff fa05 	bl	80014e8 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 80020de:	f7ff f8cb 	bl	8001278 <SSD1306_UpdateScreen>
	HAL_Delay(1000);
 80020e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020e6:	f000 fbd5 	bl	8002894 <HAL_Delay>
	printDefault();
 80020ea:	f000 f80b 	bl	8002104 <printDefault>

}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000000 	.word	0x20000000
 80020f8:	080064d4 	.word	0x080064d4
 80020fc:	080064dc 	.word	0x080064dc
 8002100:	080064e8 	.word	0x080064e8

08002104 <printDefault>:

void printDefault() {
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 8002108:	f7ff fa13 	bl	8001532 <SSD1306_Clear>
	SSD1306_GotoXY(1, 0);
 800210c:	2100      	movs	r1, #0
 800210e:	2001      	movs	r0, #1
 8002110:	f7ff f956 	bl	80013c0 <SSD1306_GotoXY>
	SSD1306_Puts("Temper Work", &Font_11x18, 1);
 8002114:	2201      	movs	r2, #1
 8002116:	4911      	ldr	r1, [pc, #68]	@ (800215c <printDefault+0x58>)
 8002118:	4811      	ldr	r0, [pc, #68]	@ (8002160 <printDefault+0x5c>)
 800211a:	f7ff f9e5 	bl	80014e8 <SSD1306_Puts>
	SSD1306_GotoXY(0, 15);
 800211e:	210f      	movs	r1, #15
 8002120:	2000      	movs	r0, #0
 8002122:	f7ff f94d 	bl	80013c0 <SSD1306_GotoXY>
	SSD1306_Puts("-------------", &Font_11x18, 1);
 8002126:	2201      	movs	r2, #1
 8002128:	490c      	ldr	r1, [pc, #48]	@ (800215c <printDefault+0x58>)
 800212a:	480e      	ldr	r0, [pc, #56]	@ (8002164 <printDefault+0x60>)
 800212c:	f7ff f9dc 	bl	80014e8 <SSD1306_Puts>
	SSD1306_GotoXY(14, 38);
 8002130:	2126      	movs	r1, #38	@ 0x26
 8002132:	200e      	movs	r0, #14
 8002134:	f7ff f944 	bl	80013c0 <SSD1306_GotoXY>
	SSD1306_Puts("00.0", &Font_11x18, 1);
 8002138:	2201      	movs	r2, #1
 800213a:	4908      	ldr	r1, [pc, #32]	@ (800215c <printDefault+0x58>)
 800213c:	480a      	ldr	r0, [pc, #40]	@ (8002168 <printDefault+0x64>)
 800213e:	f7ff f9d3 	bl	80014e8 <SSD1306_Puts>
	SSD1306_GotoXY(81, 38);
 8002142:	2126      	movs	r1, #38	@ 0x26
 8002144:	2051      	movs	r0, #81	@ 0x51
 8002146:	f7ff f93b 	bl	80013c0 <SSD1306_GotoXY>
	SSD1306_Puts("Off", &Font_11x18, 1);
 800214a:	2201      	movs	r2, #1
 800214c:	4903      	ldr	r1, [pc, #12]	@ (800215c <printDefault+0x58>)
 800214e:	4807      	ldr	r0, [pc, #28]	@ (800216c <printDefault+0x68>)
 8002150:	f7ff f9ca 	bl	80014e8 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8002154:	f7ff f890 	bl	8001278 <SSD1306_UpdateScreen>
}
 8002158:	bf00      	nop
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20000000 	.word	0x20000000
 8002160:	080064f4 	.word	0x080064f4
 8002164:	08006500 	.word	0x08006500
 8002168:	08006510 	.word	0x08006510
 800216c:	08006518 	.word	0x08006518

08002170 <printTemper>:

void printTemper(int temper) {
 8002170:	b580      	push	{r7, lr}
 8002172:	b09c      	sub	sp, #112	@ 0x70
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
	SSD1306_GotoXY(14, 38);
 8002178:	2126      	movs	r1, #38	@ 0x26
 800217a:	200e      	movs	r0, #14
 800217c:	f7ff f920 	bl	80013c0 <SSD1306_GotoXY>
	char temper_str[100] = "";
 8002180:	f107 030c 	add.w	r3, r7, #12
 8002184:	2264      	movs	r2, #100	@ 0x64
 8002186:	2100      	movs	r1, #0
 8002188:	4618      	mov	r0, r3
 800218a:	f003 fb67 	bl	800585c <memset>
	sprintf(temper_str, "%2d.0", temper);
 800218e:	f107 030c 	add.w	r3, r7, #12
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	4908      	ldr	r1, [pc, #32]	@ (80021b8 <printTemper+0x48>)
 8002196:	4618      	mov	r0, r3
 8002198:	f003 fa66 	bl	8005668 <siprintf>
	SSD1306_Puts(temper_str, &Font_11x18, 1);
 800219c:	f107 030c 	add.w	r3, r7, #12
 80021a0:	2201      	movs	r2, #1
 80021a2:	4906      	ldr	r1, [pc, #24]	@ (80021bc <printTemper+0x4c>)
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff f99f 	bl	80014e8 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 80021aa:	f7ff f865 	bl	8001278 <SSD1306_UpdateScreen>
}
 80021ae:	bf00      	nop
 80021b0:	3770      	adds	r7, #112	@ 0x70
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	0800651c 	.word	0x0800651c
 80021bc:	20000000 	.word	0x20000000

080021c0 <printHeaterState>:

void printHeaterState(uint32_t state) {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b09c      	sub	sp, #112	@ 0x70
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
	SSD1306_Clear();
 80021c8:	f7ff f9b3 	bl	8001532 <SSD1306_Clear>
	SSD1306_GotoXY(1, 0);
 80021cc:	2100      	movs	r1, #0
 80021ce:	2001      	movs	r0, #1
 80021d0:	f7ff f8f6 	bl	80013c0 <SSD1306_GotoXY>
	SSD1306_Puts("Temper Work", &Font_11x18, 1);
 80021d4:	2201      	movs	r2, #1
 80021d6:	491f      	ldr	r1, [pc, #124]	@ (8002254 <printHeaterState+0x94>)
 80021d8:	481f      	ldr	r0, [pc, #124]	@ (8002258 <printHeaterState+0x98>)
 80021da:	f7ff f985 	bl	80014e8 <SSD1306_Puts>
	SSD1306_GotoXY(0, 15);
 80021de:	210f      	movs	r1, #15
 80021e0:	2000      	movs	r0, #0
 80021e2:	f7ff f8ed 	bl	80013c0 <SSD1306_GotoXY>
	SSD1306_Puts("-------------", &Font_11x18, 1);
 80021e6:	2201      	movs	r2, #1
 80021e8:	491a      	ldr	r1, [pc, #104]	@ (8002254 <printHeaterState+0x94>)
 80021ea:	481c      	ldr	r0, [pc, #112]	@ (800225c <printHeaterState+0x9c>)
 80021ec:	f7ff f97c 	bl	80014e8 <SSD1306_Puts>
	SSD1306_GotoXY(14, 38);
 80021f0:	2126      	movs	r1, #38	@ 0x26
 80021f2:	200e      	movs	r0, #14
 80021f4:	f7ff f8e4 	bl	80013c0 <SSD1306_GotoXY>
	char temper_str[100] = "";
 80021f8:	f107 030c 	add.w	r3, r7, #12
 80021fc:	2264      	movs	r2, #100	@ 0x64
 80021fe:	2100      	movs	r1, #0
 8002200:	4618      	mov	r0, r3
 8002202:	f003 fb2b 	bl	800585c <memset>
	sprintf(temper_str, "%2d.0", m_desired_temper);
 8002206:	4b16      	ldr	r3, [pc, #88]	@ (8002260 <printHeaterState+0xa0>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	f107 030c 	add.w	r3, r7, #12
 800220e:	4915      	ldr	r1, [pc, #84]	@ (8002264 <printHeaterState+0xa4>)
 8002210:	4618      	mov	r0, r3
 8002212:	f003 fa29 	bl	8005668 <siprintf>
	SSD1306_Puts(temper_str, &Font_11x18, 1);
 8002216:	f107 030c 	add.w	r3, r7, #12
 800221a:	2201      	movs	r2, #1
 800221c:	490d      	ldr	r1, [pc, #52]	@ (8002254 <printHeaterState+0x94>)
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff f962 	bl	80014e8 <SSD1306_Puts>
	SSD1306_GotoXY(81, 38);
 8002224:	2126      	movs	r1, #38	@ 0x26
 8002226:	2051      	movs	r0, #81	@ 0x51
 8002228:	f7ff f8ca 	bl	80013c0 <SSD1306_GotoXY>
	if (state) {
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d005      	beq.n	800223e <printHeaterState+0x7e>
		SSD1306_Puts("On", &Font_11x18, 1);
 8002232:	2201      	movs	r2, #1
 8002234:	4907      	ldr	r1, [pc, #28]	@ (8002254 <printHeaterState+0x94>)
 8002236:	480c      	ldr	r0, [pc, #48]	@ (8002268 <printHeaterState+0xa8>)
 8002238:	f7ff f956 	bl	80014e8 <SSD1306_Puts>
 800223c:	e004      	b.n	8002248 <printHeaterState+0x88>
	} else {
		SSD1306_Puts("Off", &Font_11x18, 1);
 800223e:	2201      	movs	r2, #1
 8002240:	4904      	ldr	r1, [pc, #16]	@ (8002254 <printHeaterState+0x94>)
 8002242:	480a      	ldr	r0, [pc, #40]	@ (800226c <printHeaterState+0xac>)
 8002244:	f7ff f950 	bl	80014e8 <SSD1306_Puts>
	}
	SSD1306_UpdateScreen(); //display
 8002248:	f7ff f816 	bl	8001278 <SSD1306_UpdateScreen>
}
 800224c:	bf00      	nop
 800224e:	3770      	adds	r7, #112	@ 0x70
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20000000 	.word	0x20000000
 8002258:	080064f4 	.word	0x080064f4
 800225c:	08006500 	.word	0x08006500
 8002260:	200004f4 	.word	0x200004f4
 8002264:	0800651c 	.word	0x0800651c
 8002268:	08006524 	.word	0x08006524
 800226c:	08006518 	.word	0x08006518

08002270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002276:	4b15      	ldr	r3, [pc, #84]	@ (80022cc <HAL_MspInit+0x5c>)
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	4a14      	ldr	r2, [pc, #80]	@ (80022cc <HAL_MspInit+0x5c>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	6193      	str	r3, [r2, #24]
 8002282:	4b12      	ldr	r3, [pc, #72]	@ (80022cc <HAL_MspInit+0x5c>)
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800228e:	4b0f      	ldr	r3, [pc, #60]	@ (80022cc <HAL_MspInit+0x5c>)
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	4a0e      	ldr	r2, [pc, #56]	@ (80022cc <HAL_MspInit+0x5c>)
 8002294:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002298:	61d3      	str	r3, [r2, #28]
 800229a:	4b0c      	ldr	r3, [pc, #48]	@ (80022cc <HAL_MspInit+0x5c>)
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022a2:	607b      	str	r3, [r7, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80022a6:	4b0a      	ldr	r3, [pc, #40]	@ (80022d0 <HAL_MspInit+0x60>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	4a04      	ldr	r2, [pc, #16]	@ (80022d0 <HAL_MspInit+0x60>)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022c2:	bf00      	nop
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40010000 	.word	0x40010000

080022d4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022dc:	f107 0310 	add.w	r3, r7, #16
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a16      	ldr	r2, [pc, #88]	@ (8002348 <HAL_I2C_MspInit+0x74>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d124      	bne.n	800233e <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f4:	4b15      	ldr	r3, [pc, #84]	@ (800234c <HAL_I2C_MspInit+0x78>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	4a14      	ldr	r2, [pc, #80]	@ (800234c <HAL_I2C_MspInit+0x78>)
 80022fa:	f043 0308 	orr.w	r3, r3, #8
 80022fe:	6193      	str	r3, [r2, #24]
 8002300:	4b12      	ldr	r3, [pc, #72]	@ (800234c <HAL_I2C_MspInit+0x78>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	f003 0308 	and.w	r3, r3, #8
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800230c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002310:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002312:	2312      	movs	r3, #18
 8002314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002316:	2303      	movs	r3, #3
 8002318:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800231a:	f107 0310 	add.w	r3, r7, #16
 800231e:	4619      	mov	r1, r3
 8002320:	480b      	ldr	r0, [pc, #44]	@ (8002350 <HAL_I2C_MspInit+0x7c>)
 8002322:	f000 fbe9 	bl	8002af8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002326:	4b09      	ldr	r3, [pc, #36]	@ (800234c <HAL_I2C_MspInit+0x78>)
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	4a08      	ldr	r2, [pc, #32]	@ (800234c <HAL_I2C_MspInit+0x78>)
 800232c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002330:	61d3      	str	r3, [r2, #28]
 8002332:	4b06      	ldr	r3, [pc, #24]	@ (800234c <HAL_I2C_MspInit+0x78>)
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800233a:	60bb      	str	r3, [r7, #8]
 800233c:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 800233e:	bf00      	nop
 8002340:	3720      	adds	r7, #32
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40005800 	.word	0x40005800
 800234c:	40021000 	.word	0x40021000
 8002350:	40010c00 	.word	0x40010c00

08002354 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b088      	sub	sp, #32
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235c:	f107 0310 	add.w	r3, r7, #16
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a16      	ldr	r2, [pc, #88]	@ (80023c8 <HAL_SPI_MspInit+0x74>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d124      	bne.n	80023be <HAL_SPI_MspInit+0x6a>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002374:	4b15      	ldr	r3, [pc, #84]	@ (80023cc <HAL_SPI_MspInit+0x78>)
 8002376:	69db      	ldr	r3, [r3, #28]
 8002378:	4a14      	ldr	r2, [pc, #80]	@ (80023cc <HAL_SPI_MspInit+0x78>)
 800237a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800237e:	61d3      	str	r3, [r2, #28]
 8002380:	4b12      	ldr	r3, [pc, #72]	@ (80023cc <HAL_SPI_MspInit+0x78>)
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800238c:	4b0f      	ldr	r3, [pc, #60]	@ (80023cc <HAL_SPI_MspInit+0x78>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	4a0e      	ldr	r2, [pc, #56]	@ (80023cc <HAL_SPI_MspInit+0x78>)
 8002392:	f043 0308 	orr.w	r3, r3, #8
 8002396:	6193      	str	r3, [r2, #24]
 8002398:	4b0c      	ldr	r3, [pc, #48]	@ (80023cc <HAL_SPI_MspInit+0x78>)
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	f003 0308 	and.w	r3, r3, #8
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = FND_SCLK_Pin|FND_DIO_Pin;
 80023a4:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80023a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023aa:	2302      	movs	r3, #2
 80023ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023ae:	2303      	movs	r3, #3
 80023b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b2:	f107 0310 	add.w	r3, r7, #16
 80023b6:	4619      	mov	r1, r3
 80023b8:	4805      	ldr	r0, [pc, #20]	@ (80023d0 <HAL_SPI_MspInit+0x7c>)
 80023ba:	f000 fb9d 	bl	8002af8 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80023be:	bf00      	nop
 80023c0:	3720      	adds	r7, #32
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40003800 	.word	0x40003800
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40010c00 	.word	0x40010c00

080023d4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023e4:	d10c      	bne.n	8002400 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023e6:	4b15      	ldr	r3, [pc, #84]	@ (800243c <HAL_TIM_Base_MspInit+0x68>)
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	4a14      	ldr	r2, [pc, #80]	@ (800243c <HAL_TIM_Base_MspInit+0x68>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	61d3      	str	r3, [r2, #28]
 80023f2:	4b12      	ldr	r3, [pc, #72]	@ (800243c <HAL_TIM_Base_MspInit+0x68>)
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80023fe:	e018      	b.n	8002432 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a0e      	ldr	r2, [pc, #56]	@ (8002440 <HAL_TIM_Base_MspInit+0x6c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d113      	bne.n	8002432 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800240a:	4b0c      	ldr	r3, [pc, #48]	@ (800243c <HAL_TIM_Base_MspInit+0x68>)
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	4a0b      	ldr	r2, [pc, #44]	@ (800243c <HAL_TIM_Base_MspInit+0x68>)
 8002410:	f043 0302 	orr.w	r3, r3, #2
 8002414:	61d3      	str	r3, [r2, #28]
 8002416:	4b09      	ldr	r3, [pc, #36]	@ (800243c <HAL_TIM_Base_MspInit+0x68>)
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 13, 0);
 8002422:	2200      	movs	r2, #0
 8002424:	210d      	movs	r1, #13
 8002426:	201d      	movs	r0, #29
 8002428:	f000 fb2f 	bl	8002a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800242c:	201d      	movs	r0, #29
 800242e:	f000 fb48 	bl	8002ac2 <HAL_NVIC_EnableIRQ>
}
 8002432:	bf00      	nop
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40021000 	.word	0x40021000
 8002440:	40000400 	.word	0x40000400

08002444 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800244c:	f107 0310 	add.w	r3, r7, #16
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a1c      	ldr	r2, [pc, #112]	@ (80024d0 <HAL_UART_MspInit+0x8c>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d131      	bne.n	80024c8 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002464:	4b1b      	ldr	r3, [pc, #108]	@ (80024d4 <HAL_UART_MspInit+0x90>)
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	4a1a      	ldr	r2, [pc, #104]	@ (80024d4 <HAL_UART_MspInit+0x90>)
 800246a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800246e:	6193      	str	r3, [r2, #24]
 8002470:	4b18      	ldr	r3, [pc, #96]	@ (80024d4 <HAL_UART_MspInit+0x90>)
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800247c:	4b15      	ldr	r3, [pc, #84]	@ (80024d4 <HAL_UART_MspInit+0x90>)
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	4a14      	ldr	r2, [pc, #80]	@ (80024d4 <HAL_UART_MspInit+0x90>)
 8002482:	f043 0304 	orr.w	r3, r3, #4
 8002486:	6193      	str	r3, [r2, #24]
 8002488:	4b12      	ldr	r3, [pc, #72]	@ (80024d4 <HAL_UART_MspInit+0x90>)
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002494:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002498:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249a:	2302      	movs	r3, #2
 800249c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800249e:	2303      	movs	r3, #3
 80024a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a2:	f107 0310 	add.w	r3, r7, #16
 80024a6:	4619      	mov	r1, r3
 80024a8:	480b      	ldr	r0, [pc, #44]	@ (80024d8 <HAL_UART_MspInit+0x94>)
 80024aa:	f000 fb25 	bl	8002af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024bc:	f107 0310 	add.w	r3, r7, #16
 80024c0:	4619      	mov	r1, r3
 80024c2:	4805      	ldr	r0, [pc, #20]	@ (80024d8 <HAL_UART_MspInit+0x94>)
 80024c4:	f000 fb18 	bl	8002af8 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80024c8:	bf00      	nop
 80024ca:	3720      	adds	r7, #32
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40013800 	.word	0x40013800
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40010800 	.word	0x40010800

080024dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024e0:	bf00      	nop
 80024e2:	e7fd      	b.n	80024e0 <NMI_Handler+0x4>

080024e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024e8:	bf00      	nop
 80024ea:	e7fd      	b.n	80024e8 <HardFault_Handler+0x4>

080024ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024f0:	bf00      	nop
 80024f2:	e7fd      	b.n	80024f0 <MemManage_Handler+0x4>

080024f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024f8:	bf00      	nop
 80024fa:	e7fd      	b.n	80024f8 <BusFault_Handler+0x4>

080024fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002500:	bf00      	nop
 8002502:	e7fd      	b.n	8002500 <UsageFault_Handler+0x4>

08002504 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002508:	bf00      	nop
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr

08002510 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002514:	bf00      	nop
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr

0800251c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr

08002528 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800252c:	f000 f996 	bl	800285c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002530:	bf00      	nop
 8002532:	bd80      	pop	{r7, pc}

08002534 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB0_TEMP_SET_UP_Pin);
 8002538:	2001      	movs	r0, #1
 800253a:	f000 fc91 	bl	8002e60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  if(HAL_GetTick() - last_tick > 200){
 800253e:	f000 f99f 	bl	8002880 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	4b07      	ldr	r3, [pc, #28]	@ (8002564 <EXTI0_IRQHandler+0x30>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2bc8      	cmp	r3, #200	@ 0xc8
 800254c:	d907      	bls.n	800255e <EXTI0_IRQHandler+0x2a>
	  last_tick = HAL_GetTick();
 800254e:	f000 f997 	bl	8002880 <HAL_GetTick>
 8002552:	4603      	mov	r3, r0
 8002554:	4a03      	ldr	r2, [pc, #12]	@ (8002564 <EXTI0_IRQHandler+0x30>)
 8002556:	6013      	str	r3, [r2, #0]
	  g_f_sw_up = 1;
 8002558:	4b03      	ldr	r3, [pc, #12]	@ (8002568 <EXTI0_IRQHandler+0x34>)
 800255a:	2201      	movs	r2, #1
 800255c:	701a      	strb	r2, [r3, #0]
  }


  /* USER CODE END EXTI0_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000688 	.word	0x20000688
 8002568:	200004de 	.word	0x200004de

0800256c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB1_TEMP_SET_FIX_Pin);
 8002570:	2002      	movs	r0, #2
 8002572:	f000 fc75 	bl	8002e60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  if(HAL_GetTick() - last_tick > 200){
 8002576:	f000 f983 	bl	8002880 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	4b07      	ldr	r3, [pc, #28]	@ (800259c <EXTI1_IRQHandler+0x30>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2bc8      	cmp	r3, #200	@ 0xc8
 8002584:	d907      	bls.n	8002596 <EXTI1_IRQHandler+0x2a>
  	  last_tick = HAL_GetTick();
 8002586:	f000 f97b 	bl	8002880 <HAL_GetTick>
 800258a:	4603      	mov	r3, r0
 800258c:	4a03      	ldr	r2, [pc, #12]	@ (800259c <EXTI1_IRQHandler+0x30>)
 800258e:	6013      	str	r3, [r2, #0]
  	  g_f_sw_fix = 1;
 8002590:	4b03      	ldr	r3, [pc, #12]	@ (80025a0 <EXTI1_IRQHandler+0x34>)
 8002592:	2201      	movs	r2, #1
 8002594:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END EXTI1_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20000688 	.word	0x20000688
 80025a0:	200004e0 	.word	0x200004e0

080025a4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB2_TEMP_SET_DOWN_Pin);
 80025a8:	2004      	movs	r0, #4
 80025aa:	f000 fc59 	bl	8002e60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */
  if(HAL_GetTick() - last_tick > 200){
 80025ae:	f000 f967 	bl	8002880 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	4b07      	ldr	r3, [pc, #28]	@ (80025d4 <EXTI2_IRQHandler+0x30>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2bc8      	cmp	r3, #200	@ 0xc8
 80025bc:	d907      	bls.n	80025ce <EXTI2_IRQHandler+0x2a>
  	  last_tick = HAL_GetTick();
 80025be:	f000 f95f 	bl	8002880 <HAL_GetTick>
 80025c2:	4603      	mov	r3, r0
 80025c4:	4a03      	ldr	r2, [pc, #12]	@ (80025d4 <EXTI2_IRQHandler+0x30>)
 80025c6:	6013      	str	r3, [r2, #0]
  	  g_f_sw_down = 1;
 80025c8:	4b03      	ldr	r3, [pc, #12]	@ (80025d8 <EXTI2_IRQHandler+0x34>)
 80025ca:	2201      	movs	r2, #1
 80025cc:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END EXTI2_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20000688 	.word	0x20000688
 80025d8:	200004df 	.word	0x200004df

080025dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025e0:	4807      	ldr	r0, [pc, #28]	@ (8002600 <TIM3_IRQHandler+0x24>)
 80025e2:	f002 f9a5 	bl	8004930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  if(!temper_busy){
 80025e6:	4b07      	ldr	r3, [pc, #28]	@ (8002604 <TIM3_IRQHandler+0x28>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d104      	bne.n	80025fa <TIM3_IRQHandler+0x1e>
	  digit4_temper(g_temper);
 80025f0:	4b05      	ldr	r3, [pc, #20]	@ (8002608 <TIM3_IRQHandler+0x2c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff f93d 	bl	8001874 <digit4_temper>
  }
  /* USER CODE END TIM3_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	200005ec 	.word	0x200005ec
 8002604:	200004e8 	.word	0x200004e8
 8002608:	200004e4 	.word	0x200004e4

0800260c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB12_START_SW_PIN_Pin);
 8002610:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002614:	f000 fc24 	bl	8002e60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  rev_current =  HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 8002618:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800261c:	480f      	ldr	r0, [pc, #60]	@ (800265c <EXTI15_10_IRQHandler+0x50>)
 800261e:	f000 fbef 	bl	8002e00 <HAL_GPIO_ReadPin>
 8002622:	4603      	mov	r3, r0
 8002624:	461a      	mov	r2, r3
 8002626:	4b0e      	ldr	r3, [pc, #56]	@ (8002660 <EXTI15_10_IRQHandler+0x54>)
 8002628:	701a      	strb	r2, [r3, #0]

  /*static uint32_t last_tick = 0;
    if (HAL_GetTick() - last_tick > 100) {
      last_tick = HAL_GetTick();*/

      if (rev_current == GPIO_PIN_RESET) {
 800262a:	4b0d      	ldr	r3, [pc, #52]	@ (8002660 <EXTI15_10_IRQHandler+0x54>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b00      	cmp	r3, #0
 8002632:	d106      	bne.n	8002642 <EXTI15_10_IRQHandler+0x36>
        g_f_sw_on = 1;
 8002634:	4b0b      	ldr	r3, [pc, #44]	@ (8002664 <EXTI15_10_IRQHandler+0x58>)
 8002636:	2201      	movs	r2, #1
 8002638:	701a      	strb	r2, [r3, #0]
        printf("push_sw_on\r\n");
 800263a:	480b      	ldr	r0, [pc, #44]	@ (8002668 <EXTI15_10_IRQHandler+0x5c>)
 800263c:	f003 f80c 	bl	8005658 <puts>
    	//HAL_GPIO_WritePin(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, PB5_RELAY_ON_OFF_CTRL_Pin, 0);
      }
    //}

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002640:	e00a      	b.n	8002658 <EXTI15_10_IRQHandler+0x4c>
      else if(rev_current == GPIO_PIN_SET){
 8002642:	4b07      	ldr	r3, [pc, #28]	@ (8002660 <EXTI15_10_IRQHandler+0x54>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b01      	cmp	r3, #1
 800264a:	d105      	bne.n	8002658 <EXTI15_10_IRQHandler+0x4c>
    	g_f_sw_on = 0;
 800264c:	4b05      	ldr	r3, [pc, #20]	@ (8002664 <EXTI15_10_IRQHandler+0x58>)
 800264e:	2200      	movs	r2, #0
 8002650:	701a      	strb	r2, [r3, #0]
    	printf("push_sw_off\r\n");
 8002652:	4806      	ldr	r0, [pc, #24]	@ (800266c <EXTI15_10_IRQHandler+0x60>)
 8002654:	f003 f800 	bl	8005658 <puts>
}
 8002658:	bf00      	nop
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40010c00 	.word	0x40010c00
 8002660:	200004e9 	.word	0x200004e9
 8002664:	200004e1 	.word	0x200004e1
 8002668:	08006528 	.word	0x08006528
 800266c:	08006534 	.word	0x08006534

08002670 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	e00a      	b.n	8002698 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002682:	f3af 8000 	nop.w
 8002686:	4601      	mov	r1, r0
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	1c5a      	adds	r2, r3, #1
 800268c:	60ba      	str	r2, [r7, #8]
 800268e:	b2ca      	uxtb	r2, r1
 8002690:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	3301      	adds	r3, #1
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	429a      	cmp	r2, r3
 800269e:	dbf0      	blt.n	8002682 <_read+0x12>
  }

  return len;
 80026a0:	687b      	ldr	r3, [r7, #4]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <_close>:
  }
  return len;
}

int _close(int file)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr

080026c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026d0:	605a      	str	r2, [r3, #4]
  return 0;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr

080026de <_isatty>:

int _isatty(int file)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026e6:	2301      	movs	r3, #1
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc80      	pop	{r7}
 80026f0:	4770      	bx	lr

080026f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b085      	sub	sp, #20
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	60f8      	str	r0, [r7, #12]
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr
	...

0800270c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002714:	4a14      	ldr	r2, [pc, #80]	@ (8002768 <_sbrk+0x5c>)
 8002716:	4b15      	ldr	r3, [pc, #84]	@ (800276c <_sbrk+0x60>)
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002720:	4b13      	ldr	r3, [pc, #76]	@ (8002770 <_sbrk+0x64>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d102      	bne.n	800272e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002728:	4b11      	ldr	r3, [pc, #68]	@ (8002770 <_sbrk+0x64>)
 800272a:	4a12      	ldr	r2, [pc, #72]	@ (8002774 <_sbrk+0x68>)
 800272c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800272e:	4b10      	ldr	r3, [pc, #64]	@ (8002770 <_sbrk+0x64>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4413      	add	r3, r2
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	429a      	cmp	r2, r3
 800273a:	d207      	bcs.n	800274c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800273c:	f003 f8dc 	bl	80058f8 <__errno>
 8002740:	4603      	mov	r3, r0
 8002742:	220c      	movs	r2, #12
 8002744:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002746:	f04f 33ff 	mov.w	r3, #4294967295
 800274a:	e009      	b.n	8002760 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800274c:	4b08      	ldr	r3, [pc, #32]	@ (8002770 <_sbrk+0x64>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002752:	4b07      	ldr	r3, [pc, #28]	@ (8002770 <_sbrk+0x64>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4413      	add	r3, r2
 800275a:	4a05      	ldr	r2, [pc, #20]	@ (8002770 <_sbrk+0x64>)
 800275c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800275e:	68fb      	ldr	r3, [r7, #12]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20005000 	.word	0x20005000
 800276c:	00000400 	.word	0x00000400
 8002770:	2000068c 	.word	0x2000068c
 8002774:	200007e0 	.word	0x200007e0

08002778 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800277c:	bf00      	nop
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr

08002784 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002784:	f7ff fff8 	bl	8002778 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002788:	480b      	ldr	r0, [pc, #44]	@ (80027b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800278a:	490c      	ldr	r1, [pc, #48]	@ (80027bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800278c:	4a0c      	ldr	r2, [pc, #48]	@ (80027c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800278e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002790:	e002      	b.n	8002798 <LoopCopyDataInit>

08002792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002796:	3304      	adds	r3, #4

08002798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800279a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800279c:	d3f9      	bcc.n	8002792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800279e:	4a09      	ldr	r2, [pc, #36]	@ (80027c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80027a0:	4c09      	ldr	r4, [pc, #36]	@ (80027c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027a4:	e001      	b.n	80027aa <LoopFillZerobss>

080027a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027a8:	3204      	adds	r2, #4

080027aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027ac:	d3fb      	bcc.n	80027a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027ae:	f003 f8a9 	bl	8005904 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027b2:	f7ff f99b 	bl	8001aec <main>
  bx lr
 80027b6:	4770      	bx	lr
  ldr r0, =_sdata
 80027b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027bc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80027c0:	08007310 	.word	0x08007310
  ldr r2, =_sbss
 80027c4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80027c8:	200007e0 	.word	0x200007e0

080027cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027cc:	e7fe      	b.n	80027cc <ADC1_2_IRQHandler>
	...

080027d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027d4:	4b08      	ldr	r3, [pc, #32]	@ (80027f8 <HAL_Init+0x28>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a07      	ldr	r2, [pc, #28]	@ (80027f8 <HAL_Init+0x28>)
 80027da:	f043 0310 	orr.w	r3, r3, #16
 80027de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027e0:	2003      	movs	r0, #3
 80027e2:	f000 f947 	bl	8002a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027e6:	200f      	movs	r0, #15
 80027e8:	f000 f808 	bl	80027fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027ec:	f7ff fd40 	bl	8002270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40022000 	.word	0x40022000

080027fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002804:	4b12      	ldr	r3, [pc, #72]	@ (8002850 <HAL_InitTick+0x54>)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	4b12      	ldr	r3, [pc, #72]	@ (8002854 <HAL_InitTick+0x58>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	4619      	mov	r1, r3
 800280e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002812:	fbb3 f3f1 	udiv	r3, r3, r1
 8002816:	fbb2 f3f3 	udiv	r3, r2, r3
 800281a:	4618      	mov	r0, r3
 800281c:	f000 f95f 	bl	8002ade <HAL_SYSTICK_Config>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e00e      	b.n	8002848 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b0f      	cmp	r3, #15
 800282e:	d80a      	bhi.n	8002846 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002830:	2200      	movs	r2, #0
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	f04f 30ff 	mov.w	r0, #4294967295
 8002838:	f000 f927 	bl	8002a8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800283c:	4a06      	ldr	r2, [pc, #24]	@ (8002858 <HAL_InitTick+0x5c>)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002842:	2300      	movs	r3, #0
 8002844:	e000      	b.n	8002848 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
}
 8002848:	4618      	mov	r0, r3
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	2000000c 	.word	0x2000000c
 8002854:	20000014 	.word	0x20000014
 8002858:	20000010 	.word	0x20000010

0800285c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002860:	4b05      	ldr	r3, [pc, #20]	@ (8002878 <HAL_IncTick+0x1c>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	4b05      	ldr	r3, [pc, #20]	@ (800287c <HAL_IncTick+0x20>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4413      	add	r3, r2
 800286c:	4a03      	ldr	r2, [pc, #12]	@ (800287c <HAL_IncTick+0x20>)
 800286e:	6013      	str	r3, [r2, #0]
}
 8002870:	bf00      	nop
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr
 8002878:	20000014 	.word	0x20000014
 800287c:	20000690 	.word	0x20000690

08002880 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  return uwTick;
 8002884:	4b02      	ldr	r3, [pc, #8]	@ (8002890 <HAL_GetTick+0x10>)
 8002886:	681b      	ldr	r3, [r3, #0]
}
 8002888:	4618      	mov	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr
 8002890:	20000690 	.word	0x20000690

08002894 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800289c:	f7ff fff0 	bl	8002880 <HAL_GetTick>
 80028a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ac:	d005      	beq.n	80028ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ae:	4b0a      	ldr	r3, [pc, #40]	@ (80028d8 <HAL_Delay+0x44>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	461a      	mov	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4413      	add	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028ba:	bf00      	nop
 80028bc:	f7ff ffe0 	bl	8002880 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d8f7      	bhi.n	80028bc <HAL_Delay+0x28>
  {
  }
}
 80028cc:	bf00      	nop
 80028ce:	bf00      	nop
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20000014 	.word	0x20000014

080028dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002920 <__NVIC_SetPriorityGrouping+0x44>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028f8:	4013      	ands	r3, r2
 80028fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002904:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002908:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800290c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800290e:	4a04      	ldr	r2, [pc, #16]	@ (8002920 <__NVIC_SetPriorityGrouping+0x44>)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	60d3      	str	r3, [r2, #12]
}
 8002914:	bf00      	nop
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	e000ed00 	.word	0xe000ed00

08002924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002928:	4b04      	ldr	r3, [pc, #16]	@ (800293c <__NVIC_GetPriorityGrouping+0x18>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	0a1b      	lsrs	r3, r3, #8
 800292e:	f003 0307 	and.w	r3, r3, #7
}
 8002932:	4618      	mov	r0, r3
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800294a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294e:	2b00      	cmp	r3, #0
 8002950:	db0b      	blt.n	800296a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	f003 021f 	and.w	r2, r3, #31
 8002958:	4906      	ldr	r1, [pc, #24]	@ (8002974 <__NVIC_EnableIRQ+0x34>)
 800295a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295e:	095b      	lsrs	r3, r3, #5
 8002960:	2001      	movs	r0, #1
 8002962:	fa00 f202 	lsl.w	r2, r0, r2
 8002966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr
 8002974:	e000e100 	.word	0xe000e100

08002978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	6039      	str	r1, [r7, #0]
 8002982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002988:	2b00      	cmp	r3, #0
 800298a:	db0a      	blt.n	80029a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	b2da      	uxtb	r2, r3
 8002990:	490c      	ldr	r1, [pc, #48]	@ (80029c4 <__NVIC_SetPriority+0x4c>)
 8002992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002996:	0112      	lsls	r2, r2, #4
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	440b      	add	r3, r1
 800299c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029a0:	e00a      	b.n	80029b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	4908      	ldr	r1, [pc, #32]	@ (80029c8 <__NVIC_SetPriority+0x50>)
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	3b04      	subs	r3, #4
 80029b0:	0112      	lsls	r2, r2, #4
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	440b      	add	r3, r1
 80029b6:	761a      	strb	r2, [r3, #24]
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	e000e100 	.word	0xe000e100
 80029c8:	e000ed00 	.word	0xe000ed00

080029cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b089      	sub	sp, #36	@ 0x24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f1c3 0307 	rsb	r3, r3, #7
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	bf28      	it	cs
 80029ea:	2304      	movcs	r3, #4
 80029ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	3304      	adds	r3, #4
 80029f2:	2b06      	cmp	r3, #6
 80029f4:	d902      	bls.n	80029fc <NVIC_EncodePriority+0x30>
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	3b03      	subs	r3, #3
 80029fa:	e000      	b.n	80029fe <NVIC_EncodePriority+0x32>
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a00:	f04f 32ff 	mov.w	r2, #4294967295
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43da      	mvns	r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	401a      	ands	r2, r3
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a14:	f04f 31ff 	mov.w	r1, #4294967295
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1e:	43d9      	mvns	r1, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a24:	4313      	orrs	r3, r2
         );
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3724      	adds	r7, #36	@ 0x24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr

08002a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a40:	d301      	bcc.n	8002a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a42:	2301      	movs	r3, #1
 8002a44:	e00f      	b.n	8002a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a46:	4a0a      	ldr	r2, [pc, #40]	@ (8002a70 <SysTick_Config+0x40>)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a4e:	210f      	movs	r1, #15
 8002a50:	f04f 30ff 	mov.w	r0, #4294967295
 8002a54:	f7ff ff90 	bl	8002978 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a58:	4b05      	ldr	r3, [pc, #20]	@ (8002a70 <SysTick_Config+0x40>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a5e:	4b04      	ldr	r3, [pc, #16]	@ (8002a70 <SysTick_Config+0x40>)
 8002a60:	2207      	movs	r2, #7
 8002a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	e000e010 	.word	0xe000e010

08002a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7ff ff2d 	bl	80028dc <__NVIC_SetPriorityGrouping>
}
 8002a82:	bf00      	nop
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b086      	sub	sp, #24
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	4603      	mov	r3, r0
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	607a      	str	r2, [r7, #4]
 8002a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a9c:	f7ff ff42 	bl	8002924 <__NVIC_GetPriorityGrouping>
 8002aa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	68b9      	ldr	r1, [r7, #8]
 8002aa6:	6978      	ldr	r0, [r7, #20]
 8002aa8:	f7ff ff90 	bl	80029cc <NVIC_EncodePriority>
 8002aac:	4602      	mov	r2, r0
 8002aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ab2:	4611      	mov	r1, r2
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff ff5f 	bl	8002978 <__NVIC_SetPriority>
}
 8002aba:	bf00      	nop
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	4603      	mov	r3, r0
 8002aca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff ff35 	bl	8002940 <__NVIC_EnableIRQ>
}
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b082      	sub	sp, #8
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7ff ffa2 	bl	8002a30 <SysTick_Config>
 8002aec:	4603      	mov	r3, r0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b08b      	sub	sp, #44	@ 0x2c
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b02:	2300      	movs	r3, #0
 8002b04:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b06:	2300      	movs	r3, #0
 8002b08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b0a:	e169      	b.n	8002de0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	69fa      	ldr	r2, [r7, #28]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	f040 8158 	bne.w	8002dda <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	4a9a      	ldr	r2, [pc, #616]	@ (8002d98 <HAL_GPIO_Init+0x2a0>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d05e      	beq.n	8002bf2 <HAL_GPIO_Init+0xfa>
 8002b34:	4a98      	ldr	r2, [pc, #608]	@ (8002d98 <HAL_GPIO_Init+0x2a0>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d875      	bhi.n	8002c26 <HAL_GPIO_Init+0x12e>
 8002b3a:	4a98      	ldr	r2, [pc, #608]	@ (8002d9c <HAL_GPIO_Init+0x2a4>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d058      	beq.n	8002bf2 <HAL_GPIO_Init+0xfa>
 8002b40:	4a96      	ldr	r2, [pc, #600]	@ (8002d9c <HAL_GPIO_Init+0x2a4>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d86f      	bhi.n	8002c26 <HAL_GPIO_Init+0x12e>
 8002b46:	4a96      	ldr	r2, [pc, #600]	@ (8002da0 <HAL_GPIO_Init+0x2a8>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d052      	beq.n	8002bf2 <HAL_GPIO_Init+0xfa>
 8002b4c:	4a94      	ldr	r2, [pc, #592]	@ (8002da0 <HAL_GPIO_Init+0x2a8>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d869      	bhi.n	8002c26 <HAL_GPIO_Init+0x12e>
 8002b52:	4a94      	ldr	r2, [pc, #592]	@ (8002da4 <HAL_GPIO_Init+0x2ac>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d04c      	beq.n	8002bf2 <HAL_GPIO_Init+0xfa>
 8002b58:	4a92      	ldr	r2, [pc, #584]	@ (8002da4 <HAL_GPIO_Init+0x2ac>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d863      	bhi.n	8002c26 <HAL_GPIO_Init+0x12e>
 8002b5e:	4a92      	ldr	r2, [pc, #584]	@ (8002da8 <HAL_GPIO_Init+0x2b0>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d046      	beq.n	8002bf2 <HAL_GPIO_Init+0xfa>
 8002b64:	4a90      	ldr	r2, [pc, #576]	@ (8002da8 <HAL_GPIO_Init+0x2b0>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d85d      	bhi.n	8002c26 <HAL_GPIO_Init+0x12e>
 8002b6a:	2b12      	cmp	r3, #18
 8002b6c:	d82a      	bhi.n	8002bc4 <HAL_GPIO_Init+0xcc>
 8002b6e:	2b12      	cmp	r3, #18
 8002b70:	d859      	bhi.n	8002c26 <HAL_GPIO_Init+0x12e>
 8002b72:	a201      	add	r2, pc, #4	@ (adr r2, 8002b78 <HAL_GPIO_Init+0x80>)
 8002b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b78:	08002bf3 	.word	0x08002bf3
 8002b7c:	08002bcd 	.word	0x08002bcd
 8002b80:	08002bdf 	.word	0x08002bdf
 8002b84:	08002c21 	.word	0x08002c21
 8002b88:	08002c27 	.word	0x08002c27
 8002b8c:	08002c27 	.word	0x08002c27
 8002b90:	08002c27 	.word	0x08002c27
 8002b94:	08002c27 	.word	0x08002c27
 8002b98:	08002c27 	.word	0x08002c27
 8002b9c:	08002c27 	.word	0x08002c27
 8002ba0:	08002c27 	.word	0x08002c27
 8002ba4:	08002c27 	.word	0x08002c27
 8002ba8:	08002c27 	.word	0x08002c27
 8002bac:	08002c27 	.word	0x08002c27
 8002bb0:	08002c27 	.word	0x08002c27
 8002bb4:	08002c27 	.word	0x08002c27
 8002bb8:	08002c27 	.word	0x08002c27
 8002bbc:	08002bd5 	.word	0x08002bd5
 8002bc0:	08002be9 	.word	0x08002be9
 8002bc4:	4a79      	ldr	r2, [pc, #484]	@ (8002dac <HAL_GPIO_Init+0x2b4>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d013      	beq.n	8002bf2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002bca:	e02c      	b.n	8002c26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	623b      	str	r3, [r7, #32]
          break;
 8002bd2:	e029      	b.n	8002c28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	3304      	adds	r3, #4
 8002bda:	623b      	str	r3, [r7, #32]
          break;
 8002bdc:	e024      	b.n	8002c28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	3308      	adds	r3, #8
 8002be4:	623b      	str	r3, [r7, #32]
          break;
 8002be6:	e01f      	b.n	8002c28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	330c      	adds	r3, #12
 8002bee:	623b      	str	r3, [r7, #32]
          break;
 8002bf0:	e01a      	b.n	8002c28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d102      	bne.n	8002c00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002bfa:	2304      	movs	r3, #4
 8002bfc:	623b      	str	r3, [r7, #32]
          break;
 8002bfe:	e013      	b.n	8002c28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d105      	bne.n	8002c14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c08:	2308      	movs	r3, #8
 8002c0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	69fa      	ldr	r2, [r7, #28]
 8002c10:	611a      	str	r2, [r3, #16]
          break;
 8002c12:	e009      	b.n	8002c28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c14:	2308      	movs	r3, #8
 8002c16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	69fa      	ldr	r2, [r7, #28]
 8002c1c:	615a      	str	r2, [r3, #20]
          break;
 8002c1e:	e003      	b.n	8002c28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c20:	2300      	movs	r3, #0
 8002c22:	623b      	str	r3, [r7, #32]
          break;
 8002c24:	e000      	b.n	8002c28 <HAL_GPIO_Init+0x130>
          break;
 8002c26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	2bff      	cmp	r3, #255	@ 0xff
 8002c2c:	d801      	bhi.n	8002c32 <HAL_GPIO_Init+0x13a>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	e001      	b.n	8002c36 <HAL_GPIO_Init+0x13e>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	3304      	adds	r3, #4
 8002c36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	2bff      	cmp	r3, #255	@ 0xff
 8002c3c:	d802      	bhi.n	8002c44 <HAL_GPIO_Init+0x14c>
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	e002      	b.n	8002c4a <HAL_GPIO_Init+0x152>
 8002c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c46:	3b08      	subs	r3, #8
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	210f      	movs	r1, #15
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	fa01 f303 	lsl.w	r3, r1, r3
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	401a      	ands	r2, r3
 8002c5c:	6a39      	ldr	r1, [r7, #32]
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	fa01 f303 	lsl.w	r3, r1, r3
 8002c64:	431a      	orrs	r2, r3
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 80b1 	beq.w	8002dda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c78:	4b4d      	ldr	r3, [pc, #308]	@ (8002db0 <HAL_GPIO_Init+0x2b8>)
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	4a4c      	ldr	r2, [pc, #304]	@ (8002db0 <HAL_GPIO_Init+0x2b8>)
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	6193      	str	r3, [r2, #24]
 8002c84:	4b4a      	ldr	r3, [pc, #296]	@ (8002db0 <HAL_GPIO_Init+0x2b8>)
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c90:	4a48      	ldr	r2, [pc, #288]	@ (8002db4 <HAL_GPIO_Init+0x2bc>)
 8002c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c94:	089b      	lsrs	r3, r3, #2
 8002c96:	3302      	adds	r3, #2
 8002c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca0:	f003 0303 	and.w	r3, r3, #3
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	220f      	movs	r2, #15
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a40      	ldr	r2, [pc, #256]	@ (8002db8 <HAL_GPIO_Init+0x2c0>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d013      	beq.n	8002ce4 <HAL_GPIO_Init+0x1ec>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a3f      	ldr	r2, [pc, #252]	@ (8002dbc <HAL_GPIO_Init+0x2c4>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d00d      	beq.n	8002ce0 <HAL_GPIO_Init+0x1e8>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a3e      	ldr	r2, [pc, #248]	@ (8002dc0 <HAL_GPIO_Init+0x2c8>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d007      	beq.n	8002cdc <HAL_GPIO_Init+0x1e4>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a3d      	ldr	r2, [pc, #244]	@ (8002dc4 <HAL_GPIO_Init+0x2cc>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d101      	bne.n	8002cd8 <HAL_GPIO_Init+0x1e0>
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e006      	b.n	8002ce6 <HAL_GPIO_Init+0x1ee>
 8002cd8:	2304      	movs	r3, #4
 8002cda:	e004      	b.n	8002ce6 <HAL_GPIO_Init+0x1ee>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e002      	b.n	8002ce6 <HAL_GPIO_Init+0x1ee>
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e000      	b.n	8002ce6 <HAL_GPIO_Init+0x1ee>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ce8:	f002 0203 	and.w	r2, r2, #3
 8002cec:	0092      	lsls	r2, r2, #2
 8002cee:	4093      	lsls	r3, r2
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002cf6:	492f      	ldr	r1, [pc, #188]	@ (8002db4 <HAL_GPIO_Init+0x2bc>)
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfa:	089b      	lsrs	r3, r3, #2
 8002cfc:	3302      	adds	r3, #2
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d006      	beq.n	8002d1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d10:	4b2d      	ldr	r3, [pc, #180]	@ (8002dc8 <HAL_GPIO_Init+0x2d0>)
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	492c      	ldr	r1, [pc, #176]	@ (8002dc8 <HAL_GPIO_Init+0x2d0>)
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	608b      	str	r3, [r1, #8]
 8002d1c:	e006      	b.n	8002d2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d1e:	4b2a      	ldr	r3, [pc, #168]	@ (8002dc8 <HAL_GPIO_Init+0x2d0>)
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	43db      	mvns	r3, r3
 8002d26:	4928      	ldr	r1, [pc, #160]	@ (8002dc8 <HAL_GPIO_Init+0x2d0>)
 8002d28:	4013      	ands	r3, r2
 8002d2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d006      	beq.n	8002d46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d38:	4b23      	ldr	r3, [pc, #140]	@ (8002dc8 <HAL_GPIO_Init+0x2d0>)
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	4922      	ldr	r1, [pc, #136]	@ (8002dc8 <HAL_GPIO_Init+0x2d0>)
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	60cb      	str	r3, [r1, #12]
 8002d44:	e006      	b.n	8002d54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d46:	4b20      	ldr	r3, [pc, #128]	@ (8002dc8 <HAL_GPIO_Init+0x2d0>)
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	491e      	ldr	r1, [pc, #120]	@ (8002dc8 <HAL_GPIO_Init+0x2d0>)
 8002d50:	4013      	ands	r3, r2
 8002d52:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d006      	beq.n	8002d6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d60:	4b19      	ldr	r3, [pc, #100]	@ (8002dc8 <HAL_GPIO_Init+0x2d0>)
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	4918      	ldr	r1, [pc, #96]	@ (8002dc8 <HAL_GPIO_Init+0x2d0>)
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	604b      	str	r3, [r1, #4]
 8002d6c:	e006      	b.n	8002d7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d6e:	4b16      	ldr	r3, [pc, #88]	@ (8002dc8 <HAL_GPIO_Init+0x2d0>)
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	43db      	mvns	r3, r3
 8002d76:	4914      	ldr	r1, [pc, #80]	@ (8002dc8 <HAL_GPIO_Init+0x2d0>)
 8002d78:	4013      	ands	r3, r2
 8002d7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d021      	beq.n	8002dcc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d88:	4b0f      	ldr	r3, [pc, #60]	@ (8002dc8 <HAL_GPIO_Init+0x2d0>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	490e      	ldr	r1, [pc, #56]	@ (8002dc8 <HAL_GPIO_Init+0x2d0>)
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	600b      	str	r3, [r1, #0]
 8002d94:	e021      	b.n	8002dda <HAL_GPIO_Init+0x2e2>
 8002d96:	bf00      	nop
 8002d98:	10320000 	.word	0x10320000
 8002d9c:	10310000 	.word	0x10310000
 8002da0:	10220000 	.word	0x10220000
 8002da4:	10210000 	.word	0x10210000
 8002da8:	10120000 	.word	0x10120000
 8002dac:	10110000 	.word	0x10110000
 8002db0:	40021000 	.word	0x40021000
 8002db4:	40010000 	.word	0x40010000
 8002db8:	40010800 	.word	0x40010800
 8002dbc:	40010c00 	.word	0x40010c00
 8002dc0:	40011000 	.word	0x40011000
 8002dc4:	40011400 	.word	0x40011400
 8002dc8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8002dfc <HAL_GPIO_Init+0x304>)
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	4909      	ldr	r1, [pc, #36]	@ (8002dfc <HAL_GPIO_Init+0x304>)
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ddc:	3301      	adds	r3, #1
 8002dde:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f47f ae8e 	bne.w	8002b0c <HAL_GPIO_Init+0x14>
  }
}
 8002df0:	bf00      	nop
 8002df2:	bf00      	nop
 8002df4:	372c      	adds	r7, #44	@ 0x2c
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bc80      	pop	{r7}
 8002dfa:	4770      	bx	lr
 8002dfc:	40010400 	.word	0x40010400

08002e00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	887b      	ldrh	r3, [r7, #2]
 8002e12:	4013      	ands	r3, r2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	73fb      	strb	r3, [r7, #15]
 8002e1c:	e001      	b.n	8002e22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr

08002e2e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
 8002e36:	460b      	mov	r3, r1
 8002e38:	807b      	strh	r3, [r7, #2]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e3e:	787b      	ldrb	r3, [r7, #1]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e44:	887a      	ldrh	r2, [r7, #2]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e4a:	e003      	b.n	8002e54 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e4c:	887b      	ldrh	r3, [r7, #2]
 8002e4e:	041a      	lsls	r2, r3, #16
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	611a      	str	r2, [r3, #16]
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr
	...

08002e60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e6a:	4b08      	ldr	r3, [pc, #32]	@ (8002e8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e6c:	695a      	ldr	r2, [r3, #20]
 8002e6e:	88fb      	ldrh	r3, [r7, #6]
 8002e70:	4013      	ands	r3, r2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d006      	beq.n	8002e84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e76:	4a05      	ldr	r2, [pc, #20]	@ (8002e8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e78:	88fb      	ldrh	r3, [r7, #6]
 8002e7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e7c:	88fb      	ldrh	r3, [r7, #6]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 f806 	bl	8002e90 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e84:	bf00      	nop
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40010400 	.word	0x40010400

08002e90 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e12b      	b.n	800310e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d106      	bne.n	8002ed0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7ff fa02 	bl	80022d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2224      	movs	r2, #36	@ 0x24
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0201 	bic.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ef6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f08:	f001 f960 	bl	80041cc <HAL_RCC_GetPCLK1Freq>
 8002f0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	4a81      	ldr	r2, [pc, #516]	@ (8003118 <HAL_I2C_Init+0x274>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d807      	bhi.n	8002f28 <HAL_I2C_Init+0x84>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4a80      	ldr	r2, [pc, #512]	@ (800311c <HAL_I2C_Init+0x278>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	bf94      	ite	ls
 8002f20:	2301      	movls	r3, #1
 8002f22:	2300      	movhi	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	e006      	b.n	8002f36 <HAL_I2C_Init+0x92>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4a7d      	ldr	r2, [pc, #500]	@ (8003120 <HAL_I2C_Init+0x27c>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	bf94      	ite	ls
 8002f30:	2301      	movls	r3, #1
 8002f32:	2300      	movhi	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e0e7      	b.n	800310e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	4a78      	ldr	r2, [pc, #480]	@ (8003124 <HAL_I2C_Init+0x280>)
 8002f42:	fba2 2303 	umull	r2, r3, r2, r3
 8002f46:	0c9b      	lsrs	r3, r3, #18
 8002f48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	4a6a      	ldr	r2, [pc, #424]	@ (8003118 <HAL_I2C_Init+0x274>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d802      	bhi.n	8002f78 <HAL_I2C_Init+0xd4>
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	3301      	adds	r3, #1
 8002f76:	e009      	b.n	8002f8c <HAL_I2C_Init+0xe8>
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f7e:	fb02 f303 	mul.w	r3, r2, r3
 8002f82:	4a69      	ldr	r2, [pc, #420]	@ (8003128 <HAL_I2C_Init+0x284>)
 8002f84:	fba2 2303 	umull	r2, r3, r2, r3
 8002f88:	099b      	lsrs	r3, r3, #6
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6812      	ldr	r2, [r2, #0]
 8002f90:	430b      	orrs	r3, r1
 8002f92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f9e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	495c      	ldr	r1, [pc, #368]	@ (8003118 <HAL_I2C_Init+0x274>)
 8002fa8:	428b      	cmp	r3, r1
 8002faa:	d819      	bhi.n	8002fe0 <HAL_I2C_Init+0x13c>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	1e59      	subs	r1, r3, #1
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fba:	1c59      	adds	r1, r3, #1
 8002fbc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002fc0:	400b      	ands	r3, r1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00a      	beq.n	8002fdc <HAL_I2C_Init+0x138>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	1e59      	subs	r1, r3, #1
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fda:	e051      	b.n	8003080 <HAL_I2C_Init+0x1dc>
 8002fdc:	2304      	movs	r3, #4
 8002fde:	e04f      	b.n	8003080 <HAL_I2C_Init+0x1dc>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d111      	bne.n	800300c <HAL_I2C_Init+0x168>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	1e58      	subs	r0, r3, #1
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6859      	ldr	r1, [r3, #4]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	440b      	add	r3, r1
 8002ff6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003000:	2b00      	cmp	r3, #0
 8003002:	bf0c      	ite	eq
 8003004:	2301      	moveq	r3, #1
 8003006:	2300      	movne	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	e012      	b.n	8003032 <HAL_I2C_Init+0x18e>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	1e58      	subs	r0, r3, #1
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6859      	ldr	r1, [r3, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	0099      	lsls	r1, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003022:	3301      	adds	r3, #1
 8003024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003028:	2b00      	cmp	r3, #0
 800302a:	bf0c      	ite	eq
 800302c:	2301      	moveq	r3, #1
 800302e:	2300      	movne	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <HAL_I2C_Init+0x196>
 8003036:	2301      	movs	r3, #1
 8003038:	e022      	b.n	8003080 <HAL_I2C_Init+0x1dc>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10e      	bne.n	8003060 <HAL_I2C_Init+0x1bc>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	1e58      	subs	r0, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6859      	ldr	r1, [r3, #4]
 800304a:	460b      	mov	r3, r1
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	440b      	add	r3, r1
 8003050:	fbb0 f3f3 	udiv	r3, r0, r3
 8003054:	3301      	adds	r3, #1
 8003056:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800305a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800305e:	e00f      	b.n	8003080 <HAL_I2C_Init+0x1dc>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	1e58      	subs	r0, r3, #1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6859      	ldr	r1, [r3, #4]
 8003068:	460b      	mov	r3, r1
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	0099      	lsls	r1, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	fbb0 f3f3 	udiv	r3, r0, r3
 8003076:	3301      	adds	r3, #1
 8003078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800307c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	6809      	ldr	r1, [r1, #0]
 8003084:	4313      	orrs	r3, r2
 8003086:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69da      	ldr	r2, [r3, #28]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80030ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6911      	ldr	r1, [r2, #16]
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	68d2      	ldr	r2, [r2, #12]
 80030ba:	4311      	orrs	r1, r2
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6812      	ldr	r2, [r2, #0]
 80030c0:	430b      	orrs	r3, r1
 80030c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	695a      	ldr	r2, [r3, #20]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0201 	orr.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2220      	movs	r2, #32
 80030fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	000186a0 	.word	0x000186a0
 800311c:	001e847f 	.word	0x001e847f
 8003120:	003d08ff 	.word	0x003d08ff
 8003124:	431bde83 	.word	0x431bde83
 8003128:	10624dd3 	.word	0x10624dd3

0800312c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b088      	sub	sp, #32
 8003130:	af02      	add	r7, sp, #8
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	607a      	str	r2, [r7, #4]
 8003136:	461a      	mov	r2, r3
 8003138:	460b      	mov	r3, r1
 800313a:	817b      	strh	r3, [r7, #10]
 800313c:	4613      	mov	r3, r2
 800313e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003140:	f7ff fb9e 	bl	8002880 <HAL_GetTick>
 8003144:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b20      	cmp	r3, #32
 8003150:	f040 80e0 	bne.w	8003314 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	2319      	movs	r3, #25
 800315a:	2201      	movs	r2, #1
 800315c:	4970      	ldr	r1, [pc, #448]	@ (8003320 <HAL_I2C_Master_Transmit+0x1f4>)
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 fa92 	bl	8003688 <I2C_WaitOnFlagUntilTimeout>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800316a:	2302      	movs	r3, #2
 800316c:	e0d3      	b.n	8003316 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_I2C_Master_Transmit+0x50>
 8003178:	2302      	movs	r3, #2
 800317a:	e0cc      	b.n	8003316 <HAL_I2C_Master_Transmit+0x1ea>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b01      	cmp	r3, #1
 8003190:	d007      	beq.n	80031a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f042 0201 	orr.w	r2, r2, #1
 80031a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2221      	movs	r2, #33	@ 0x21
 80031b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2210      	movs	r2, #16
 80031be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	893a      	ldrh	r2, [r7, #8]
 80031d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d8:	b29a      	uxth	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	4a50      	ldr	r2, [pc, #320]	@ (8003324 <HAL_I2C_Master_Transmit+0x1f8>)
 80031e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031e4:	8979      	ldrh	r1, [r7, #10]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	6a3a      	ldr	r2, [r7, #32]
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 f9ca 	bl	8003584 <I2C_MasterRequestWrite>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e08d      	b.n	8003316 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031fa:	2300      	movs	r3, #0
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003210:	e066      	b.n	80032e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	6a39      	ldr	r1, [r7, #32]
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f000 fb50 	bl	80038bc <I2C_WaitOnTXEFlagUntilTimeout>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00d      	beq.n	800323e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003226:	2b04      	cmp	r3, #4
 8003228:	d107      	bne.n	800323a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003238:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e06b      	b.n	8003316 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003242:	781a      	ldrb	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324e:	1c5a      	adds	r2, r3, #1
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003258:	b29b      	uxth	r3, r3
 800325a:	3b01      	subs	r3, #1
 800325c:	b29a      	uxth	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003266:	3b01      	subs	r3, #1
 8003268:	b29a      	uxth	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b04      	cmp	r3, #4
 800327a:	d11b      	bne.n	80032b4 <HAL_I2C_Master_Transmit+0x188>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003280:	2b00      	cmp	r3, #0
 8003282:	d017      	beq.n	80032b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003288:	781a      	ldrb	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003294:	1c5a      	adds	r2, r3, #1
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800329e:	b29b      	uxth	r3, r3
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	6a39      	ldr	r1, [r7, #32]
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f000 fb47 	bl	800394c <I2C_WaitOnBTFFlagUntilTimeout>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00d      	beq.n	80032e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d107      	bne.n	80032dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e01a      	b.n	8003316 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d194      	bne.n	8003212 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2220      	movs	r2, #32
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003310:	2300      	movs	r3, #0
 8003312:	e000      	b.n	8003316 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003314:	2302      	movs	r3, #2
  }
}
 8003316:	4618      	mov	r0, r3
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	00100002 	.word	0x00100002
 8003324:	ffff0000 	.word	0xffff0000

08003328 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08a      	sub	sp, #40	@ 0x28
 800332c:	af02      	add	r7, sp, #8
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	607a      	str	r2, [r7, #4]
 8003332:	603b      	str	r3, [r7, #0]
 8003334:	460b      	mov	r3, r1
 8003336:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003338:	f7ff faa2 	bl	8002880 <HAL_GetTick>
 800333c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800333e:	2300      	movs	r3, #0
 8003340:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b20      	cmp	r3, #32
 800334c:	f040 8111 	bne.w	8003572 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	2319      	movs	r3, #25
 8003356:	2201      	movs	r2, #1
 8003358:	4988      	ldr	r1, [pc, #544]	@ (800357c <HAL_I2C_IsDeviceReady+0x254>)
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 f994 	bl	8003688 <I2C_WaitOnFlagUntilTimeout>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003366:	2302      	movs	r3, #2
 8003368:	e104      	b.n	8003574 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <HAL_I2C_IsDeviceReady+0x50>
 8003374:	2302      	movs	r3, #2
 8003376:	e0fd      	b.n	8003574 <HAL_I2C_IsDeviceReady+0x24c>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b01      	cmp	r3, #1
 800338c:	d007      	beq.n	800339e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f042 0201 	orr.w	r2, r2, #1
 800339c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2224      	movs	r2, #36	@ 0x24
 80033b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4a70      	ldr	r2, [pc, #448]	@ (8003580 <HAL_I2C_IsDeviceReady+0x258>)
 80033c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033d0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	2200      	movs	r2, #0
 80033da:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 f952 	bl	8003688 <I2C_WaitOnFlagUntilTimeout>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00d      	beq.n	8003406 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033f8:	d103      	bne.n	8003402 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003400:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e0b6      	b.n	8003574 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003406:	897b      	ldrh	r3, [r7, #10]
 8003408:	b2db      	uxtb	r3, r3
 800340a:	461a      	mov	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003414:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003416:	f7ff fa33 	bl	8002880 <HAL_GetTick>
 800341a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b02      	cmp	r3, #2
 8003428:	bf0c      	ite	eq
 800342a:	2301      	moveq	r3, #1
 800342c:	2300      	movne	r3, #0
 800342e:	b2db      	uxtb	r3, r3
 8003430:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800343c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003440:	bf0c      	ite	eq
 8003442:	2301      	moveq	r3, #1
 8003444:	2300      	movne	r3, #0
 8003446:	b2db      	uxtb	r3, r3
 8003448:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800344a:	e025      	b.n	8003498 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800344c:	f7ff fa18 	bl	8002880 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	429a      	cmp	r2, r3
 800345a:	d302      	bcc.n	8003462 <HAL_I2C_IsDeviceReady+0x13a>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d103      	bne.n	800346a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	22a0      	movs	r2, #160	@ 0xa0
 8003466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b02      	cmp	r3, #2
 8003476:	bf0c      	ite	eq
 8003478:	2301      	moveq	r3, #1
 800347a:	2300      	movne	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800348a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800348e:	bf0c      	ite	eq
 8003490:	2301      	moveq	r3, #1
 8003492:	2300      	movne	r3, #0
 8003494:	b2db      	uxtb	r3, r3
 8003496:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2ba0      	cmp	r3, #160	@ 0xa0
 80034a2:	d005      	beq.n	80034b0 <HAL_I2C_IsDeviceReady+0x188>
 80034a4:	7dfb      	ldrb	r3, [r7, #23]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d102      	bne.n	80034b0 <HAL_I2C_IsDeviceReady+0x188>
 80034aa:	7dbb      	ldrb	r3, [r7, #22]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0cd      	beq.n	800344c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d129      	bne.n	800351a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034d4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034d6:	2300      	movs	r3, #0
 80034d8:	613b      	str	r3, [r7, #16]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	613b      	str	r3, [r7, #16]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	613b      	str	r3, [r7, #16]
 80034ea:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	2319      	movs	r3, #25
 80034f2:	2201      	movs	r2, #1
 80034f4:	4921      	ldr	r1, [pc, #132]	@ (800357c <HAL_I2C_IsDeviceReady+0x254>)
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f8c6 	bl	8003688 <I2C_WaitOnFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e036      	b.n	8003574 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2220      	movs	r2, #32
 800350a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003516:	2300      	movs	r3, #0
 8003518:	e02c      	b.n	8003574 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003528:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003532:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	2319      	movs	r3, #25
 800353a:	2201      	movs	r2, #1
 800353c:	490f      	ldr	r1, [pc, #60]	@ (800357c <HAL_I2C_IsDeviceReady+0x254>)
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f000 f8a2 	bl	8003688 <I2C_WaitOnFlagUntilTimeout>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e012      	b.n	8003574 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	3301      	adds	r3, #1
 8003552:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	429a      	cmp	r2, r3
 800355a:	f4ff af32 	bcc.w	80033c2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2220      	movs	r2, #32
 8003562:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003572:	2302      	movs	r3, #2
  }
}
 8003574:	4618      	mov	r0, r3
 8003576:	3720      	adds	r7, #32
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	00100002 	.word	0x00100002
 8003580:	ffff0000 	.word	0xffff0000

08003584 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b088      	sub	sp, #32
 8003588:	af02      	add	r7, sp, #8
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	607a      	str	r2, [r7, #4]
 800358e:	603b      	str	r3, [r7, #0]
 8003590:	460b      	mov	r3, r1
 8003592:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003598:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2b08      	cmp	r3, #8
 800359e:	d006      	beq.n	80035ae <I2C_MasterRequestWrite+0x2a>
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d003      	beq.n	80035ae <I2C_MasterRequestWrite+0x2a>
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80035ac:	d108      	bne.n	80035c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	e00b      	b.n	80035d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c4:	2b12      	cmp	r3, #18
 80035c6:	d107      	bne.n	80035d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 f84f 	bl	8003688 <I2C_WaitOnFlagUntilTimeout>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00d      	beq.n	800360c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035fe:	d103      	bne.n	8003608 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003606:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e035      	b.n	8003678 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003614:	d108      	bne.n	8003628 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003616:	897b      	ldrh	r3, [r7, #10]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	461a      	mov	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003624:	611a      	str	r2, [r3, #16]
 8003626:	e01b      	b.n	8003660 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003628:	897b      	ldrh	r3, [r7, #10]
 800362a:	11db      	asrs	r3, r3, #7
 800362c:	b2db      	uxtb	r3, r3
 800362e:	f003 0306 	and.w	r3, r3, #6
 8003632:	b2db      	uxtb	r3, r3
 8003634:	f063 030f 	orn	r3, r3, #15
 8003638:	b2da      	uxtb	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	490e      	ldr	r1, [pc, #56]	@ (8003680 <I2C_MasterRequestWrite+0xfc>)
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 f898 	bl	800377c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e010      	b.n	8003678 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003656:	897b      	ldrh	r3, [r7, #10]
 8003658:	b2da      	uxtb	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	4907      	ldr	r1, [pc, #28]	@ (8003684 <I2C_MasterRequestWrite+0x100>)
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f000 f888 	bl	800377c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e000      	b.n	8003678 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3718      	adds	r7, #24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	00010008 	.word	0x00010008
 8003684:	00010002 	.word	0x00010002

08003688 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	603b      	str	r3, [r7, #0]
 8003694:	4613      	mov	r3, r2
 8003696:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003698:	e048      	b.n	800372c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a0:	d044      	beq.n	800372c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a2:	f7ff f8ed 	bl	8002880 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d302      	bcc.n	80036b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d139      	bne.n	800372c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	0c1b      	lsrs	r3, r3, #16
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d10d      	bne.n	80036de <I2C_WaitOnFlagUntilTimeout+0x56>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	43da      	mvns	r2, r3
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	4013      	ands	r3, r2
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	bf0c      	ite	eq
 80036d4:	2301      	moveq	r3, #1
 80036d6:	2300      	movne	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	461a      	mov	r2, r3
 80036dc:	e00c      	b.n	80036f8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	43da      	mvns	r2, r3
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	4013      	ands	r3, r2
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	bf0c      	ite	eq
 80036f0:	2301      	moveq	r3, #1
 80036f2:	2300      	movne	r3, #0
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	461a      	mov	r2, r3
 80036f8:	79fb      	ldrb	r3, [r7, #7]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d116      	bne.n	800372c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003718:	f043 0220 	orr.w	r2, r3, #32
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e023      	b.n	8003774 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	0c1b      	lsrs	r3, r3, #16
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b01      	cmp	r3, #1
 8003734:	d10d      	bne.n	8003752 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	43da      	mvns	r2, r3
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	4013      	ands	r3, r2
 8003742:	b29b      	uxth	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	bf0c      	ite	eq
 8003748:	2301      	moveq	r3, #1
 800374a:	2300      	movne	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	461a      	mov	r2, r3
 8003750:	e00c      	b.n	800376c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	43da      	mvns	r2, r3
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	4013      	ands	r3, r2
 800375e:	b29b      	uxth	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	bf0c      	ite	eq
 8003764:	2301      	moveq	r3, #1
 8003766:	2300      	movne	r3, #0
 8003768:	b2db      	uxtb	r3, r3
 800376a:	461a      	mov	r2, r3
 800376c:	79fb      	ldrb	r3, [r7, #7]
 800376e:	429a      	cmp	r2, r3
 8003770:	d093      	beq.n	800369a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
 8003788:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800378a:	e071      	b.n	8003870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003796:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800379a:	d123      	bne.n	80037e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d0:	f043 0204 	orr.w	r2, r3, #4
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e067      	b.n	80038b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ea:	d041      	beq.n	8003870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ec:	f7ff f848 	bl	8002880 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d302      	bcc.n	8003802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d136      	bne.n	8003870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	0c1b      	lsrs	r3, r3, #16
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b01      	cmp	r3, #1
 800380a:	d10c      	bne.n	8003826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	43da      	mvns	r2, r3
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	4013      	ands	r3, r2
 8003818:	b29b      	uxth	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	bf14      	ite	ne
 800381e:	2301      	movne	r3, #1
 8003820:	2300      	moveq	r3, #0
 8003822:	b2db      	uxtb	r3, r3
 8003824:	e00b      	b.n	800383e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	43da      	mvns	r2, r3
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	4013      	ands	r3, r2
 8003832:	b29b      	uxth	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	bf14      	ite	ne
 8003838:	2301      	movne	r3, #1
 800383a:	2300      	moveq	r3, #0
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d016      	beq.n	8003870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2220      	movs	r2, #32
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385c:	f043 0220 	orr.w	r2, r3, #32
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e021      	b.n	80038b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	0c1b      	lsrs	r3, r3, #16
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b01      	cmp	r3, #1
 8003878:	d10c      	bne.n	8003894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	43da      	mvns	r2, r3
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	4013      	ands	r3, r2
 8003886:	b29b      	uxth	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	bf14      	ite	ne
 800388c:	2301      	movne	r3, #1
 800388e:	2300      	moveq	r3, #0
 8003890:	b2db      	uxtb	r3, r3
 8003892:	e00b      	b.n	80038ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	43da      	mvns	r2, r3
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	4013      	ands	r3, r2
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	bf14      	ite	ne
 80038a6:	2301      	movne	r3, #1
 80038a8:	2300      	moveq	r3, #0
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f47f af6d 	bne.w	800378c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038c8:	e034      	b.n	8003934 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f000 f886 	bl	80039dc <I2C_IsAcknowledgeFailed>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e034      	b.n	8003944 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e0:	d028      	beq.n	8003934 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e2:	f7fe ffcd 	bl	8002880 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d302      	bcc.n	80038f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d11d      	bne.n	8003934 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003902:	2b80      	cmp	r3, #128	@ 0x80
 8003904:	d016      	beq.n	8003934 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2220      	movs	r2, #32
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003920:	f043 0220 	orr.w	r2, r3, #32
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e007      	b.n	8003944 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800393e:	2b80      	cmp	r3, #128	@ 0x80
 8003940:	d1c3      	bne.n	80038ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003958:	e034      	b.n	80039c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 f83e 	bl	80039dc <I2C_IsAcknowledgeFailed>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e034      	b.n	80039d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003970:	d028      	beq.n	80039c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003972:	f7fe ff85 	bl	8002880 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	429a      	cmp	r2, r3
 8003980:	d302      	bcc.n	8003988 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d11d      	bne.n	80039c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	f003 0304 	and.w	r3, r3, #4
 8003992:	2b04      	cmp	r3, #4
 8003994:	d016      	beq.n	80039c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2220      	movs	r2, #32
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b0:	f043 0220 	orr.w	r2, r3, #32
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e007      	b.n	80039d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	f003 0304 	and.w	r3, r3, #4
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d1c3      	bne.n	800395a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039f2:	d11b      	bne.n	8003a2c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80039fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2220      	movs	r2, #32
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a18:	f043 0204 	orr.w	r2, r3, #4
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e000      	b.n	8003a2e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bc80      	pop	{r7}
 8003a36:	4770      	bx	lr

08003a38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e272      	b.n	8003f30 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f000 8087 	beq.w	8003b66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a58:	4b92      	ldr	r3, [pc, #584]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f003 030c 	and.w	r3, r3, #12
 8003a60:	2b04      	cmp	r3, #4
 8003a62:	d00c      	beq.n	8003a7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a64:	4b8f      	ldr	r3, [pc, #572]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f003 030c 	and.w	r3, r3, #12
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d112      	bne.n	8003a96 <HAL_RCC_OscConfig+0x5e>
 8003a70:	4b8c      	ldr	r3, [pc, #560]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a7c:	d10b      	bne.n	8003a96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a7e:	4b89      	ldr	r3, [pc, #548]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d06c      	beq.n	8003b64 <HAL_RCC_OscConfig+0x12c>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d168      	bne.n	8003b64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e24c      	b.n	8003f30 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a9e:	d106      	bne.n	8003aae <HAL_RCC_OscConfig+0x76>
 8003aa0:	4b80      	ldr	r3, [pc, #512]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a7f      	ldr	r2, [pc, #508]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003aa6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	e02e      	b.n	8003b0c <HAL_RCC_OscConfig+0xd4>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10c      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x98>
 8003ab6:	4b7b      	ldr	r3, [pc, #492]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a7a      	ldr	r2, [pc, #488]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003abc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ac0:	6013      	str	r3, [r2, #0]
 8003ac2:	4b78      	ldr	r3, [pc, #480]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a77      	ldr	r2, [pc, #476]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003ac8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	e01d      	b.n	8003b0c <HAL_RCC_OscConfig+0xd4>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ad8:	d10c      	bne.n	8003af4 <HAL_RCC_OscConfig+0xbc>
 8003ada:	4b72      	ldr	r3, [pc, #456]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a71      	ldr	r2, [pc, #452]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003ae0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ae4:	6013      	str	r3, [r2, #0]
 8003ae6:	4b6f      	ldr	r3, [pc, #444]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a6e      	ldr	r2, [pc, #440]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003aec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003af0:	6013      	str	r3, [r2, #0]
 8003af2:	e00b      	b.n	8003b0c <HAL_RCC_OscConfig+0xd4>
 8003af4:	4b6b      	ldr	r3, [pc, #428]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a6a      	ldr	r2, [pc, #424]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003afa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	4b68      	ldr	r3, [pc, #416]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a67      	ldr	r2, [pc, #412]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003b06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d013      	beq.n	8003b3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b14:	f7fe feb4 	bl	8002880 <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b1c:	f7fe feb0 	bl	8002880 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b64      	cmp	r3, #100	@ 0x64
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e200      	b.n	8003f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b2e:	4b5d      	ldr	r3, [pc, #372]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d0f0      	beq.n	8003b1c <HAL_RCC_OscConfig+0xe4>
 8003b3a:	e014      	b.n	8003b66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3c:	f7fe fea0 	bl	8002880 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b44:	f7fe fe9c 	bl	8002880 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b64      	cmp	r3, #100	@ 0x64
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e1ec      	b.n	8003f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b56:	4b53      	ldr	r3, [pc, #332]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1f0      	bne.n	8003b44 <HAL_RCC_OscConfig+0x10c>
 8003b62:	e000      	b.n	8003b66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d063      	beq.n	8003c3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b72:	4b4c      	ldr	r3, [pc, #304]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f003 030c 	and.w	r3, r3, #12
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00b      	beq.n	8003b96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b7e:	4b49      	ldr	r3, [pc, #292]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f003 030c 	and.w	r3, r3, #12
 8003b86:	2b08      	cmp	r3, #8
 8003b88:	d11c      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x18c>
 8003b8a:	4b46      	ldr	r3, [pc, #280]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d116      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b96:	4b43      	ldr	r3, [pc, #268]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d005      	beq.n	8003bae <HAL_RCC_OscConfig+0x176>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d001      	beq.n	8003bae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e1c0      	b.n	8003f30 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bae:	4b3d      	ldr	r3, [pc, #244]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	4939      	ldr	r1, [pc, #228]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bc2:	e03a      	b.n	8003c3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d020      	beq.n	8003c0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bcc:	4b36      	ldr	r3, [pc, #216]	@ (8003ca8 <HAL_RCC_OscConfig+0x270>)
 8003bce:	2201      	movs	r2, #1
 8003bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd2:	f7fe fe55 	bl	8002880 <HAL_GetTick>
 8003bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd8:	e008      	b.n	8003bec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bda:	f7fe fe51 	bl	8002880 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d901      	bls.n	8003bec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e1a1      	b.n	8003f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bec:	4b2d      	ldr	r3, [pc, #180]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d0f0      	beq.n	8003bda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf8:	4b2a      	ldr	r3, [pc, #168]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	4927      	ldr	r1, [pc, #156]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	600b      	str	r3, [r1, #0]
 8003c0c:	e015      	b.n	8003c3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c0e:	4b26      	ldr	r3, [pc, #152]	@ (8003ca8 <HAL_RCC_OscConfig+0x270>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c14:	f7fe fe34 	bl	8002880 <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c1c:	f7fe fe30 	bl	8002880 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e180      	b.n	8003f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1f0      	bne.n	8003c1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0308 	and.w	r3, r3, #8
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d03a      	beq.n	8003cbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d019      	beq.n	8003c82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c4e:	4b17      	ldr	r3, [pc, #92]	@ (8003cac <HAL_RCC_OscConfig+0x274>)
 8003c50:	2201      	movs	r2, #1
 8003c52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c54:	f7fe fe14 	bl	8002880 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c5c:	f7fe fe10 	bl	8002880 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e160      	b.n	8003f30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca4 <HAL_RCC_OscConfig+0x26c>)
 8003c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0f0      	beq.n	8003c5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003c7a:	2001      	movs	r0, #1
 8003c7c:	f000 face 	bl	800421c <RCC_Delay>
 8003c80:	e01c      	b.n	8003cbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c82:	4b0a      	ldr	r3, [pc, #40]	@ (8003cac <HAL_RCC_OscConfig+0x274>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c88:	f7fe fdfa 	bl	8002880 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c8e:	e00f      	b.n	8003cb0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c90:	f7fe fdf6 	bl	8002880 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d908      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e146      	b.n	8003f30 <HAL_RCC_OscConfig+0x4f8>
 8003ca2:	bf00      	nop
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	42420000 	.word	0x42420000
 8003cac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb0:	4b92      	ldr	r3, [pc, #584]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1e9      	bne.n	8003c90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 80a6 	beq.w	8003e16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cce:	4b8b      	ldr	r3, [pc, #556]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10d      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cda:	4b88      	ldr	r3, [pc, #544]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	4a87      	ldr	r2, [pc, #540]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003ce0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ce4:	61d3      	str	r3, [r2, #28]
 8003ce6:	4b85      	ldr	r3, [pc, #532]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cee:	60bb      	str	r3, [r7, #8]
 8003cf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf6:	4b82      	ldr	r3, [pc, #520]	@ (8003f00 <HAL_RCC_OscConfig+0x4c8>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d118      	bne.n	8003d34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d02:	4b7f      	ldr	r3, [pc, #508]	@ (8003f00 <HAL_RCC_OscConfig+0x4c8>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a7e      	ldr	r2, [pc, #504]	@ (8003f00 <HAL_RCC_OscConfig+0x4c8>)
 8003d08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d0e:	f7fe fdb7 	bl	8002880 <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d16:	f7fe fdb3 	bl	8002880 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b64      	cmp	r3, #100	@ 0x64
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e103      	b.n	8003f30 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d28:	4b75      	ldr	r3, [pc, #468]	@ (8003f00 <HAL_RCC_OscConfig+0x4c8>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0f0      	beq.n	8003d16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d106      	bne.n	8003d4a <HAL_RCC_OscConfig+0x312>
 8003d3c:	4b6f      	ldr	r3, [pc, #444]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	4a6e      	ldr	r2, [pc, #440]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003d42:	f043 0301 	orr.w	r3, r3, #1
 8003d46:	6213      	str	r3, [r2, #32]
 8003d48:	e02d      	b.n	8003da6 <HAL_RCC_OscConfig+0x36e>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10c      	bne.n	8003d6c <HAL_RCC_OscConfig+0x334>
 8003d52:	4b6a      	ldr	r3, [pc, #424]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	4a69      	ldr	r2, [pc, #420]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003d58:	f023 0301 	bic.w	r3, r3, #1
 8003d5c:	6213      	str	r3, [r2, #32]
 8003d5e:	4b67      	ldr	r3, [pc, #412]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	4a66      	ldr	r2, [pc, #408]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003d64:	f023 0304 	bic.w	r3, r3, #4
 8003d68:	6213      	str	r3, [r2, #32]
 8003d6a:	e01c      	b.n	8003da6 <HAL_RCC_OscConfig+0x36e>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	2b05      	cmp	r3, #5
 8003d72:	d10c      	bne.n	8003d8e <HAL_RCC_OscConfig+0x356>
 8003d74:	4b61      	ldr	r3, [pc, #388]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	4a60      	ldr	r2, [pc, #384]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003d7a:	f043 0304 	orr.w	r3, r3, #4
 8003d7e:	6213      	str	r3, [r2, #32]
 8003d80:	4b5e      	ldr	r3, [pc, #376]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	4a5d      	ldr	r2, [pc, #372]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003d86:	f043 0301 	orr.w	r3, r3, #1
 8003d8a:	6213      	str	r3, [r2, #32]
 8003d8c:	e00b      	b.n	8003da6 <HAL_RCC_OscConfig+0x36e>
 8003d8e:	4b5b      	ldr	r3, [pc, #364]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	4a5a      	ldr	r2, [pc, #360]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003d94:	f023 0301 	bic.w	r3, r3, #1
 8003d98:	6213      	str	r3, [r2, #32]
 8003d9a:	4b58      	ldr	r3, [pc, #352]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	4a57      	ldr	r2, [pc, #348]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003da0:	f023 0304 	bic.w	r3, r3, #4
 8003da4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d015      	beq.n	8003dda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dae:	f7fe fd67 	bl	8002880 <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db4:	e00a      	b.n	8003dcc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db6:	f7fe fd63 	bl	8002880 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e0b1      	b.n	8003f30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dcc:	4b4b      	ldr	r3, [pc, #300]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0ee      	beq.n	8003db6 <HAL_RCC_OscConfig+0x37e>
 8003dd8:	e014      	b.n	8003e04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dda:	f7fe fd51 	bl	8002880 <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003de0:	e00a      	b.n	8003df8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de2:	f7fe fd4d 	bl	8002880 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e09b      	b.n	8003f30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003df8:	4b40      	ldr	r3, [pc, #256]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1ee      	bne.n	8003de2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e04:	7dfb      	ldrb	r3, [r7, #23]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d105      	bne.n	8003e16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e0a:	4b3c      	ldr	r3, [pc, #240]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	4a3b      	ldr	r2, [pc, #236]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003e10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 8087 	beq.w	8003f2e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e20:	4b36      	ldr	r3, [pc, #216]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f003 030c 	and.w	r3, r3, #12
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d061      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	69db      	ldr	r3, [r3, #28]
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d146      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e34:	4b33      	ldr	r3, [pc, #204]	@ (8003f04 <HAL_RCC_OscConfig+0x4cc>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e3a:	f7fe fd21 	bl	8002880 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e42:	f7fe fd1d 	bl	8002880 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e06d      	b.n	8003f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e54:	4b29      	ldr	r3, [pc, #164]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1f0      	bne.n	8003e42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e68:	d108      	bne.n	8003e7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e6a:	4b24      	ldr	r3, [pc, #144]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	4921      	ldr	r1, [pc, #132]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e7c:	4b1f      	ldr	r3, [pc, #124]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a19      	ldr	r1, [r3, #32]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8c:	430b      	orrs	r3, r1
 8003e8e:	491b      	ldr	r1, [pc, #108]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e94:	4b1b      	ldr	r3, [pc, #108]	@ (8003f04 <HAL_RCC_OscConfig+0x4cc>)
 8003e96:	2201      	movs	r2, #1
 8003e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9a:	f7fe fcf1 	bl	8002880 <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ea0:	e008      	b.n	8003eb4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea2:	f7fe fced 	bl	8002880 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e03d      	b.n	8003f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003eb4:	4b11      	ldr	r3, [pc, #68]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0f0      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x46a>
 8003ec0:	e035      	b.n	8003f2e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec2:	4b10      	ldr	r3, [pc, #64]	@ (8003f04 <HAL_RCC_OscConfig+0x4cc>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec8:	f7fe fcda 	bl	8002880 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed0:	f7fe fcd6 	bl	8002880 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e026      	b.n	8003f30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ee2:	4b06      	ldr	r3, [pc, #24]	@ (8003efc <HAL_RCC_OscConfig+0x4c4>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f0      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x498>
 8003eee:	e01e      	b.n	8003f2e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	69db      	ldr	r3, [r3, #28]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d107      	bne.n	8003f08 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e019      	b.n	8003f30 <HAL_RCC_OscConfig+0x4f8>
 8003efc:	40021000 	.word	0x40021000
 8003f00:	40007000 	.word	0x40007000
 8003f04:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f08:	4b0b      	ldr	r3, [pc, #44]	@ (8003f38 <HAL_RCC_OscConfig+0x500>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d106      	bne.n	8003f2a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d001      	beq.n	8003f2e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e000      	b.n	8003f30 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3718      	adds	r7, #24
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40021000 	.word	0x40021000

08003f3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e0d0      	b.n	80040f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f50:	4b6a      	ldr	r3, [pc, #424]	@ (80040fc <HAL_RCC_ClockConfig+0x1c0>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0307 	and.w	r3, r3, #7
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d910      	bls.n	8003f80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f5e:	4b67      	ldr	r3, [pc, #412]	@ (80040fc <HAL_RCC_ClockConfig+0x1c0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f023 0207 	bic.w	r2, r3, #7
 8003f66:	4965      	ldr	r1, [pc, #404]	@ (80040fc <HAL_RCC_ClockConfig+0x1c0>)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f6e:	4b63      	ldr	r3, [pc, #396]	@ (80040fc <HAL_RCC_ClockConfig+0x1c0>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d001      	beq.n	8003f80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e0b8      	b.n	80040f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d020      	beq.n	8003fce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d005      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f98:	4b59      	ldr	r3, [pc, #356]	@ (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	4a58      	ldr	r2, [pc, #352]	@ (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003fa2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0308 	and.w	r3, r3, #8
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d005      	beq.n	8003fbc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fb0:	4b53      	ldr	r3, [pc, #332]	@ (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	4a52      	ldr	r2, [pc, #328]	@ (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003fba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fbc:	4b50      	ldr	r3, [pc, #320]	@ (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	494d      	ldr	r1, [pc, #308]	@ (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d040      	beq.n	800405c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d107      	bne.n	8003ff2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fe2:	4b47      	ldr	r3, [pc, #284]	@ (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d115      	bne.n	800401a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e07f      	b.n	80040f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d107      	bne.n	800400a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ffa:	4b41      	ldr	r3, [pc, #260]	@ (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d109      	bne.n	800401a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e073      	b.n	80040f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800400a:	4b3d      	ldr	r3, [pc, #244]	@ (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e06b      	b.n	80040f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800401a:	4b39      	ldr	r3, [pc, #228]	@ (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f023 0203 	bic.w	r2, r3, #3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	4936      	ldr	r1, [pc, #216]	@ (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 8004028:	4313      	orrs	r3, r2
 800402a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800402c:	f7fe fc28 	bl	8002880 <HAL_GetTick>
 8004030:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004032:	e00a      	b.n	800404a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004034:	f7fe fc24 	bl	8002880 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004042:	4293      	cmp	r3, r2
 8004044:	d901      	bls.n	800404a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e053      	b.n	80040f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800404a:	4b2d      	ldr	r3, [pc, #180]	@ (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f003 020c 	and.w	r2, r3, #12
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	429a      	cmp	r2, r3
 800405a:	d1eb      	bne.n	8004034 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800405c:	4b27      	ldr	r3, [pc, #156]	@ (80040fc <HAL_RCC_ClockConfig+0x1c0>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0307 	and.w	r3, r3, #7
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	429a      	cmp	r2, r3
 8004068:	d210      	bcs.n	800408c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800406a:	4b24      	ldr	r3, [pc, #144]	@ (80040fc <HAL_RCC_ClockConfig+0x1c0>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f023 0207 	bic.w	r2, r3, #7
 8004072:	4922      	ldr	r1, [pc, #136]	@ (80040fc <HAL_RCC_ClockConfig+0x1c0>)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	4313      	orrs	r3, r2
 8004078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800407a:	4b20      	ldr	r3, [pc, #128]	@ (80040fc <HAL_RCC_ClockConfig+0x1c0>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	429a      	cmp	r2, r3
 8004086:	d001      	beq.n	800408c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e032      	b.n	80040f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b00      	cmp	r3, #0
 8004096:	d008      	beq.n	80040aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004098:	4b19      	ldr	r3, [pc, #100]	@ (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	4916      	ldr	r1, [pc, #88]	@ (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d009      	beq.n	80040ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040b6:	4b12      	ldr	r3, [pc, #72]	@ (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	490e      	ldr	r1, [pc, #56]	@ (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040ca:	f000 f821 	bl	8004110 <HAL_RCC_GetSysClockFreq>
 80040ce:	4602      	mov	r2, r0
 80040d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	091b      	lsrs	r3, r3, #4
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	490a      	ldr	r1, [pc, #40]	@ (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 80040dc:	5ccb      	ldrb	r3, [r1, r3]
 80040de:	fa22 f303 	lsr.w	r3, r2, r3
 80040e2:	4a09      	ldr	r2, [pc, #36]	@ (8004108 <HAL_RCC_ClockConfig+0x1cc>)
 80040e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040e6:	4b09      	ldr	r3, [pc, #36]	@ (800410c <HAL_RCC_ClockConfig+0x1d0>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fe fb86 	bl	80027fc <HAL_InitTick>

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	40022000 	.word	0x40022000
 8004100:	40021000 	.word	0x40021000
 8004104:	080072a0 	.word	0x080072a0
 8004108:	2000000c 	.word	0x2000000c
 800410c:	20000010 	.word	0x20000010

08004110 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]
 800411a:	2300      	movs	r3, #0
 800411c:	60bb      	str	r3, [r7, #8]
 800411e:	2300      	movs	r3, #0
 8004120:	617b      	str	r3, [r7, #20]
 8004122:	2300      	movs	r3, #0
 8004124:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004126:	2300      	movs	r3, #0
 8004128:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800412a:	4b1e      	ldr	r3, [pc, #120]	@ (80041a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f003 030c 	and.w	r3, r3, #12
 8004136:	2b04      	cmp	r3, #4
 8004138:	d002      	beq.n	8004140 <HAL_RCC_GetSysClockFreq+0x30>
 800413a:	2b08      	cmp	r3, #8
 800413c:	d003      	beq.n	8004146 <HAL_RCC_GetSysClockFreq+0x36>
 800413e:	e027      	b.n	8004190 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004140:	4b19      	ldr	r3, [pc, #100]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004142:	613b      	str	r3, [r7, #16]
      break;
 8004144:	e027      	b.n	8004196 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	0c9b      	lsrs	r3, r3, #18
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	4a17      	ldr	r2, [pc, #92]	@ (80041ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8004150:	5cd3      	ldrb	r3, [r2, r3]
 8004152:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d010      	beq.n	8004180 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800415e:	4b11      	ldr	r3, [pc, #68]	@ (80041a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	0c5b      	lsrs	r3, r3, #17
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	4a11      	ldr	r2, [pc, #68]	@ (80041b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800416a:	5cd3      	ldrb	r3, [r2, r3]
 800416c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a0d      	ldr	r2, [pc, #52]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004172:	fb03 f202 	mul.w	r2, r3, r2
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	fbb2 f3f3 	udiv	r3, r2, r3
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	e004      	b.n	800418a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a0c      	ldr	r2, [pc, #48]	@ (80041b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004184:	fb02 f303 	mul.w	r3, r2, r3
 8004188:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	613b      	str	r3, [r7, #16]
      break;
 800418e:	e002      	b.n	8004196 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004190:	4b05      	ldr	r3, [pc, #20]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004192:	613b      	str	r3, [r7, #16]
      break;
 8004194:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004196:	693b      	ldr	r3, [r7, #16]
}
 8004198:	4618      	mov	r0, r3
 800419a:	371c      	adds	r7, #28
 800419c:	46bd      	mov	sp, r7
 800419e:	bc80      	pop	{r7}
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	40021000 	.word	0x40021000
 80041a8:	007a1200 	.word	0x007a1200
 80041ac:	080072b8 	.word	0x080072b8
 80041b0:	080072c8 	.word	0x080072c8
 80041b4:	003d0900 	.word	0x003d0900

080041b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041bc:	4b02      	ldr	r3, [pc, #8]	@ (80041c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80041be:	681b      	ldr	r3, [r3, #0]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bc80      	pop	{r7}
 80041c6:	4770      	bx	lr
 80041c8:	2000000c 	.word	0x2000000c

080041cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041d0:	f7ff fff2 	bl	80041b8 <HAL_RCC_GetHCLKFreq>
 80041d4:	4602      	mov	r2, r0
 80041d6:	4b05      	ldr	r3, [pc, #20]	@ (80041ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	0a1b      	lsrs	r3, r3, #8
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	4903      	ldr	r1, [pc, #12]	@ (80041f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041e2:	5ccb      	ldrb	r3, [r1, r3]
 80041e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40021000 	.word	0x40021000
 80041f0:	080072b0 	.word	0x080072b0

080041f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041f8:	f7ff ffde 	bl	80041b8 <HAL_RCC_GetHCLKFreq>
 80041fc:	4602      	mov	r2, r0
 80041fe:	4b05      	ldr	r3, [pc, #20]	@ (8004214 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	0adb      	lsrs	r3, r3, #11
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	4903      	ldr	r1, [pc, #12]	@ (8004218 <HAL_RCC_GetPCLK2Freq+0x24>)
 800420a:	5ccb      	ldrb	r3, [r1, r3]
 800420c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004210:	4618      	mov	r0, r3
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40021000 	.word	0x40021000
 8004218:	080072b0 	.word	0x080072b0

0800421c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004224:	4b0a      	ldr	r3, [pc, #40]	@ (8004250 <RCC_Delay+0x34>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a0a      	ldr	r2, [pc, #40]	@ (8004254 <RCC_Delay+0x38>)
 800422a:	fba2 2303 	umull	r2, r3, r2, r3
 800422e:	0a5b      	lsrs	r3, r3, #9
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	fb02 f303 	mul.w	r3, r2, r3
 8004236:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004238:	bf00      	nop
  }
  while (Delay --);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	1e5a      	subs	r2, r3, #1
 800423e:	60fa      	str	r2, [r7, #12]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1f9      	bne.n	8004238 <RCC_Delay+0x1c>
}
 8004244:	bf00      	nop
 8004246:	bf00      	nop
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	bc80      	pop	{r7}
 800424e:	4770      	bx	lr
 8004250:	2000000c 	.word	0x2000000c
 8004254:	10624dd3 	.word	0x10624dd3

08004258 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e076      	b.n	8004358 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426e:	2b00      	cmp	r3, #0
 8004270:	d108      	bne.n	8004284 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800427a:	d009      	beq.n	8004290 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	61da      	str	r2, [r3, #28]
 8004282:	e005      	b.n	8004290 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7fe f852 	bl	8002354 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80042d8:	431a      	orrs	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	431a      	orrs	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004300:	431a      	orrs	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800430a:	431a      	orrs	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004314:	ea42 0103 	orr.w	r1, r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800431c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	0c1a      	lsrs	r2, r3, #16
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f002 0204 	and.w	r2, r2, #4
 8004336:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	69da      	ldr	r2, [r3, #28]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004346:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3708      	adds	r7, #8
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b088      	sub	sp, #32
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	603b      	str	r3, [r7, #0]
 800436c:	4613      	mov	r3, r2
 800436e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004370:	f7fe fa86 	bl	8002880 <HAL_GetTick>
 8004374:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004376:	88fb      	ldrh	r3, [r7, #6]
 8004378:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b01      	cmp	r3, #1
 8004384:	d001      	beq.n	800438a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004386:	2302      	movs	r3, #2
 8004388:	e12a      	b.n	80045e0 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <HAL_SPI_Transmit+0x36>
 8004390:	88fb      	ldrh	r3, [r7, #6]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e122      	b.n	80045e0 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d101      	bne.n	80043a8 <HAL_SPI_Transmit+0x48>
 80043a4:	2302      	movs	r3, #2
 80043a6:	e11b      	b.n	80045e0 <HAL_SPI_Transmit+0x280>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2203      	movs	r2, #3
 80043b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	88fa      	ldrh	r2, [r7, #6]
 80043c8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	88fa      	ldrh	r2, [r7, #6]
 80043ce:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043f6:	d10f      	bne.n	8004418 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004406:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004416:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004422:	2b40      	cmp	r3, #64	@ 0x40
 8004424:	d007      	beq.n	8004436 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004434:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800443e:	d152      	bne.n	80044e6 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <HAL_SPI_Transmit+0xee>
 8004448:	8b7b      	ldrh	r3, [r7, #26]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d145      	bne.n	80044da <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004452:	881a      	ldrh	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800445e:	1c9a      	adds	r2, r3, #2
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004468:	b29b      	uxth	r3, r3
 800446a:	3b01      	subs	r3, #1
 800446c:	b29a      	uxth	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004472:	e032      	b.n	80044da <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b02      	cmp	r3, #2
 8004480:	d112      	bne.n	80044a8 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004486:	881a      	ldrh	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004492:	1c9a      	adds	r2, r3, #2
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800449c:	b29b      	uxth	r3, r3
 800449e:	3b01      	subs	r3, #1
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80044a6:	e018      	b.n	80044da <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044a8:	f7fe f9ea 	bl	8002880 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d803      	bhi.n	80044c0 <HAL_SPI_Transmit+0x160>
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044be:	d102      	bne.n	80044c6 <HAL_SPI_Transmit+0x166>
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d109      	bne.n	80044da <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e082      	b.n	80045e0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044de:	b29b      	uxth	r3, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1c7      	bne.n	8004474 <HAL_SPI_Transmit+0x114>
 80044e4:	e053      	b.n	800458e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d002      	beq.n	80044f4 <HAL_SPI_Transmit+0x194>
 80044ee:	8b7b      	ldrh	r3, [r7, #26]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d147      	bne.n	8004584 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	330c      	adds	r3, #12
 80044fe:	7812      	ldrb	r2, [r2, #0]
 8004500:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004506:	1c5a      	adds	r2, r3, #1
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004510:	b29b      	uxth	r3, r3
 8004512:	3b01      	subs	r3, #1
 8004514:	b29a      	uxth	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800451a:	e033      	b.n	8004584 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b02      	cmp	r3, #2
 8004528:	d113      	bne.n	8004552 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	330c      	adds	r3, #12
 8004534:	7812      	ldrb	r2, [r2, #0]
 8004536:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453c:	1c5a      	adds	r2, r3, #1
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004546:	b29b      	uxth	r3, r3
 8004548:	3b01      	subs	r3, #1
 800454a:	b29a      	uxth	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004550:	e018      	b.n	8004584 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004552:	f7fe f995 	bl	8002880 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	429a      	cmp	r2, r3
 8004560:	d803      	bhi.n	800456a <HAL_SPI_Transmit+0x20a>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004568:	d102      	bne.n	8004570 <HAL_SPI_Transmit+0x210>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d109      	bne.n	8004584 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e02d      	b.n	80045e0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004588:	b29b      	uxth	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1c6      	bne.n	800451c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800458e:	69fa      	ldr	r2, [r7, #28]
 8004590:	6839      	ldr	r1, [r7, #0]
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 f8b0 	bl	80046f8 <SPI_EndRxTxTransaction>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d002      	beq.n	80045a4 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2220      	movs	r2, #32
 80045a2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10a      	bne.n	80045c2 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045ac:	2300      	movs	r3, #0
 80045ae:	617b      	str	r3, [r7, #20]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	617b      	str	r3, [r7, #20]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	617b      	str	r3, [r7, #20]
 80045c0:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e000      	b.n	80045e0 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80045de:	2300      	movs	r3, #0
  }
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3720      	adds	r7, #32
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b088      	sub	sp, #32
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	603b      	str	r3, [r7, #0]
 80045f4:	4613      	mov	r3, r2
 80045f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045f8:	f7fe f942 	bl	8002880 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004600:	1a9b      	subs	r3, r3, r2
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	4413      	add	r3, r2
 8004606:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004608:	f7fe f93a 	bl	8002880 <HAL_GetTick>
 800460c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800460e:	4b39      	ldr	r3, [pc, #228]	@ (80046f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	015b      	lsls	r3, r3, #5
 8004614:	0d1b      	lsrs	r3, r3, #20
 8004616:	69fa      	ldr	r2, [r7, #28]
 8004618:	fb02 f303 	mul.w	r3, r2, r3
 800461c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800461e:	e054      	b.n	80046ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004626:	d050      	beq.n	80046ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004628:	f7fe f92a 	bl	8002880 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	69fa      	ldr	r2, [r7, #28]
 8004634:	429a      	cmp	r2, r3
 8004636:	d902      	bls.n	800463e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d13d      	bne.n	80046ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800464c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004656:	d111      	bne.n	800467c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004660:	d004      	beq.n	800466c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800466a:	d107      	bne.n	800467c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800467a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004680:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004684:	d10f      	bne.n	80046a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80046a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e017      	b.n	80046ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	3b01      	subs	r3, #1
 80046c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	4013      	ands	r3, r2
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	bf0c      	ite	eq
 80046da:	2301      	moveq	r3, #1
 80046dc:	2300      	movne	r3, #0
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	461a      	mov	r2, r3
 80046e2:	79fb      	ldrb	r3, [r7, #7]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d19b      	bne.n	8004620 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3720      	adds	r7, #32
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	2000000c 	.word	0x2000000c

080046f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af02      	add	r7, sp, #8
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2201      	movs	r2, #1
 800470c:	2102      	movs	r1, #2
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f7ff ff6a 	bl	80045e8 <SPI_WaitFlagStateUntilTimeout>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d007      	beq.n	800472a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800471e:	f043 0220 	orr.w	r2, r3, #32
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e013      	b.n	8004752 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2200      	movs	r2, #0
 8004732:	2180      	movs	r1, #128	@ 0x80
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f7ff ff57 	bl	80045e8 <SPI_WaitFlagStateUntilTimeout>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d007      	beq.n	8004750 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004744:	f043 0220 	orr.w	r2, r3, #32
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e000      	b.n	8004752 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b082      	sub	sp, #8
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e041      	b.n	80047f0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	d106      	bne.n	8004786 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f7fd fe27 	bl	80023d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2202      	movs	r2, #2
 800478a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	3304      	adds	r3, #4
 8004796:	4619      	mov	r1, r3
 8004798:	4610      	mov	r0, r2
 800479a:	f000 faad 	bl	8004cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b01      	cmp	r3, #1
 800480a:	d001      	beq.n	8004810 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e032      	b.n	8004876 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a18      	ldr	r2, [pc, #96]	@ (8004880 <HAL_TIM_Base_Start+0x88>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d00e      	beq.n	8004840 <HAL_TIM_Base_Start+0x48>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800482a:	d009      	beq.n	8004840 <HAL_TIM_Base_Start+0x48>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a14      	ldr	r2, [pc, #80]	@ (8004884 <HAL_TIM_Base_Start+0x8c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d004      	beq.n	8004840 <HAL_TIM_Base_Start+0x48>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a13      	ldr	r2, [pc, #76]	@ (8004888 <HAL_TIM_Base_Start+0x90>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d111      	bne.n	8004864 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f003 0307 	and.w	r3, r3, #7
 800484a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2b06      	cmp	r3, #6
 8004850:	d010      	beq.n	8004874 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f042 0201 	orr.w	r2, r2, #1
 8004860:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004862:	e007      	b.n	8004874 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 0201 	orr.w	r2, r2, #1
 8004872:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	bc80      	pop	{r7}
 800487e:	4770      	bx	lr
 8004880:	40012c00 	.word	0x40012c00
 8004884:	40000400 	.word	0x40000400
 8004888:	40000800 	.word	0x40000800

0800488c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b01      	cmp	r3, #1
 800489e:	d001      	beq.n	80048a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e03a      	b.n	800491a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0201 	orr.w	r2, r2, #1
 80048ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a18      	ldr	r2, [pc, #96]	@ (8004924 <HAL_TIM_Base_Start_IT+0x98>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00e      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x58>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048ce:	d009      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x58>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a14      	ldr	r2, [pc, #80]	@ (8004928 <HAL_TIM_Base_Start_IT+0x9c>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d004      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x58>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a13      	ldr	r2, [pc, #76]	@ (800492c <HAL_TIM_Base_Start_IT+0xa0>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d111      	bne.n	8004908 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2b06      	cmp	r3, #6
 80048f4:	d010      	beq.n	8004918 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f042 0201 	orr.w	r2, r2, #1
 8004904:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004906:	e007      	b.n	8004918 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0201 	orr.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	bc80      	pop	{r7}
 8004922:	4770      	bx	lr
 8004924:	40012c00 	.word	0x40012c00
 8004928:	40000400 	.word	0x40000400
 800492c:	40000800 	.word	0x40000800

08004930 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d020      	beq.n	8004994 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d01b      	beq.n	8004994 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f06f 0202 	mvn.w	r2, #2
 8004964:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f9a1 	bl	8004cc2 <HAL_TIM_IC_CaptureCallback>
 8004980:	e005      	b.n	800498e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f994 	bl	8004cb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f9a3 	bl	8004cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	f003 0304 	and.w	r3, r3, #4
 800499a:	2b00      	cmp	r3, #0
 800499c:	d020      	beq.n	80049e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f003 0304 	and.w	r3, r3, #4
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d01b      	beq.n	80049e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f06f 0204 	mvn.w	r2, #4
 80049b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2202      	movs	r2, #2
 80049b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f97b 	bl	8004cc2 <HAL_TIM_IC_CaptureCallback>
 80049cc:	e005      	b.n	80049da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f96e 	bl	8004cb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f97d 	bl	8004cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	f003 0308 	and.w	r3, r3, #8
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d020      	beq.n	8004a2c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f003 0308 	and.w	r3, r3, #8
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d01b      	beq.n	8004a2c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0208 	mvn.w	r2, #8
 80049fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2204      	movs	r2, #4
 8004a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f955 	bl	8004cc2 <HAL_TIM_IC_CaptureCallback>
 8004a18:	e005      	b.n	8004a26 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f948 	bl	8004cb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f957 	bl	8004cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f003 0310 	and.w	r3, r3, #16
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d020      	beq.n	8004a78 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f003 0310 	and.w	r3, r3, #16
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d01b      	beq.n	8004a78 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0210 	mvn.w	r2, #16
 8004a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2208      	movs	r2, #8
 8004a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f92f 	bl	8004cc2 <HAL_TIM_IC_CaptureCallback>
 8004a64:	e005      	b.n	8004a72 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f922 	bl	8004cb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f931 	bl	8004cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00c      	beq.n	8004a9c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d007      	beq.n	8004a9c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f06f 0201 	mvn.w	r2, #1
 8004a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f901 	bl	8004c9e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00c      	beq.n	8004ac0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d007      	beq.n	8004ac0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fa87 	bl	8004fce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00c      	beq.n	8004ae4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d007      	beq.n	8004ae4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f901 	bl	8004ce6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f003 0320 	and.w	r3, r3, #32
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00c      	beq.n	8004b08 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f003 0320 	and.w	r3, r3, #32
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d007      	beq.n	8004b08 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f06f 0220 	mvn.w	r2, #32
 8004b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 fa5a 	bl	8004fbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b08:	bf00      	nop
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <HAL_TIM_ConfigClockSource+0x1c>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e0b4      	b.n	8004c96 <HAL_TIM_ConfigClockSource+0x186>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b64:	d03e      	beq.n	8004be4 <HAL_TIM_ConfigClockSource+0xd4>
 8004b66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b6a:	f200 8087 	bhi.w	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b72:	f000 8086 	beq.w	8004c82 <HAL_TIM_ConfigClockSource+0x172>
 8004b76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b7a:	d87f      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b7c:	2b70      	cmp	r3, #112	@ 0x70
 8004b7e:	d01a      	beq.n	8004bb6 <HAL_TIM_ConfigClockSource+0xa6>
 8004b80:	2b70      	cmp	r3, #112	@ 0x70
 8004b82:	d87b      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b84:	2b60      	cmp	r3, #96	@ 0x60
 8004b86:	d050      	beq.n	8004c2a <HAL_TIM_ConfigClockSource+0x11a>
 8004b88:	2b60      	cmp	r3, #96	@ 0x60
 8004b8a:	d877      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b8c:	2b50      	cmp	r3, #80	@ 0x50
 8004b8e:	d03c      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0xfa>
 8004b90:	2b50      	cmp	r3, #80	@ 0x50
 8004b92:	d873      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b94:	2b40      	cmp	r3, #64	@ 0x40
 8004b96:	d058      	beq.n	8004c4a <HAL_TIM_ConfigClockSource+0x13a>
 8004b98:	2b40      	cmp	r3, #64	@ 0x40
 8004b9a:	d86f      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b9c:	2b30      	cmp	r3, #48	@ 0x30
 8004b9e:	d064      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x15a>
 8004ba0:	2b30      	cmp	r3, #48	@ 0x30
 8004ba2:	d86b      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004ba4:	2b20      	cmp	r3, #32
 8004ba6:	d060      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x15a>
 8004ba8:	2b20      	cmp	r3, #32
 8004baa:	d867      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d05c      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x15a>
 8004bb0:	2b10      	cmp	r3, #16
 8004bb2:	d05a      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x15a>
 8004bb4:	e062      	b.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bc6:	f000 f97c 	bl	8004ec2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004bd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	609a      	str	r2, [r3, #8]
      break;
 8004be2:	e04f      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bf4:	f000 f965 	bl	8004ec2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689a      	ldr	r2, [r3, #8]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c06:	609a      	str	r2, [r3, #8]
      break;
 8004c08:	e03c      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c16:	461a      	mov	r2, r3
 8004c18:	f000 f8dc 	bl	8004dd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2150      	movs	r1, #80	@ 0x50
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 f933 	bl	8004e8e <TIM_ITRx_SetConfig>
      break;
 8004c28:	e02c      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c36:	461a      	mov	r2, r3
 8004c38:	f000 f8fa 	bl	8004e30 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2160      	movs	r1, #96	@ 0x60
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 f923 	bl	8004e8e <TIM_ITRx_SetConfig>
      break;
 8004c48:	e01c      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c56:	461a      	mov	r2, r3
 8004c58:	f000 f8bc 	bl	8004dd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2140      	movs	r1, #64	@ 0x40
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 f913 	bl	8004e8e <TIM_ITRx_SetConfig>
      break;
 8004c68:	e00c      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4619      	mov	r1, r3
 8004c74:	4610      	mov	r0, r2
 8004c76:	f000 f90a 	bl	8004e8e <TIM_ITRx_SetConfig>
      break;
 8004c7a:	e003      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c80:	e000      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b083      	sub	sp, #12
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bc80      	pop	{r7}
 8004cae:	4770      	bx	lr

08004cb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bc80      	pop	{r7}
 8004cc0:	4770      	bx	lr

08004cc2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bc80      	pop	{r7}
 8004cd2:	4770      	bx	lr

08004cd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bc80      	pop	{r7}
 8004ce4:	4770      	bx	lr

08004ce6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b083      	sub	sp, #12
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cee:	bf00      	nop
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bc80      	pop	{r7}
 8004cf6:	4770      	bx	lr

08004cf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a2f      	ldr	r2, [pc, #188]	@ (8004dc8 <TIM_Base_SetConfig+0xd0>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d00b      	beq.n	8004d28 <TIM_Base_SetConfig+0x30>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d16:	d007      	beq.n	8004d28 <TIM_Base_SetConfig+0x30>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a2c      	ldr	r2, [pc, #176]	@ (8004dcc <TIM_Base_SetConfig+0xd4>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d003      	beq.n	8004d28 <TIM_Base_SetConfig+0x30>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a2b      	ldr	r2, [pc, #172]	@ (8004dd0 <TIM_Base_SetConfig+0xd8>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d108      	bne.n	8004d3a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a22      	ldr	r2, [pc, #136]	@ (8004dc8 <TIM_Base_SetConfig+0xd0>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d00b      	beq.n	8004d5a <TIM_Base_SetConfig+0x62>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d48:	d007      	beq.n	8004d5a <TIM_Base_SetConfig+0x62>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a1f      	ldr	r2, [pc, #124]	@ (8004dcc <TIM_Base_SetConfig+0xd4>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d003      	beq.n	8004d5a <TIM_Base_SetConfig+0x62>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a1e      	ldr	r2, [pc, #120]	@ (8004dd0 <TIM_Base_SetConfig+0xd8>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d108      	bne.n	8004d6c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a0d      	ldr	r2, [pc, #52]	@ (8004dc8 <TIM_Base_SetConfig+0xd0>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d103      	bne.n	8004da0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	691a      	ldr	r2, [r3, #16]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d005      	beq.n	8004dbe <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	f023 0201 	bic.w	r2, r3, #1
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	611a      	str	r2, [r3, #16]
  }
}
 8004dbe:	bf00      	nop
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bc80      	pop	{r7}
 8004dc6:	4770      	bx	lr
 8004dc8:	40012c00 	.word	0x40012c00
 8004dcc:	40000400 	.word	0x40000400
 8004dd0:	40000800 	.word	0x40000800

08004dd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	f023 0201 	bic.w	r2, r3, #1
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004dfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	011b      	lsls	r3, r3, #4
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f023 030a 	bic.w	r3, r3, #10
 8004e10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	621a      	str	r2, [r3, #32]
}
 8004e26:	bf00      	nop
 8004e28:	371c      	adds	r7, #28
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bc80      	pop	{r7}
 8004e2e:	4770      	bx	lr

08004e30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b087      	sub	sp, #28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	f023 0210 	bic.w	r2, r3, #16
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	031b      	lsls	r3, r3, #12
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e6c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	621a      	str	r2, [r3, #32]
}
 8004e84:	bf00      	nop
 8004e86:	371c      	adds	r7, #28
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bc80      	pop	{r7}
 8004e8c:	4770      	bx	lr

08004e8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b085      	sub	sp, #20
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
 8004e96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ea4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	f043 0307 	orr.w	r3, r3, #7
 8004eb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	609a      	str	r2, [r3, #8]
}
 8004eb8:	bf00      	nop
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bc80      	pop	{r7}
 8004ec0:	4770      	bx	lr

08004ec2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b087      	sub	sp, #28
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	60f8      	str	r0, [r7, #12]
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	607a      	str	r2, [r7, #4]
 8004ece:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004edc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	021a      	lsls	r2, r3, #8
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	609a      	str	r2, [r3, #8]
}
 8004ef6:	bf00      	nop
 8004ef8:	371c      	adds	r7, #28
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bc80      	pop	{r7}
 8004efe:	4770      	bx	lr

08004f00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d101      	bne.n	8004f18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f14:	2302      	movs	r3, #2
 8004f16:	e046      	b.n	8004fa6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a16      	ldr	r2, [pc, #88]	@ (8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d00e      	beq.n	8004f7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f64:	d009      	beq.n	8004f7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a12      	ldr	r2, [pc, #72]	@ (8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d004      	beq.n	8004f7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a10      	ldr	r2, [pc, #64]	@ (8004fb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d10c      	bne.n	8004f94 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bc80      	pop	{r7}
 8004fae:	4770      	bx	lr
 8004fb0:	40012c00 	.word	0x40012c00
 8004fb4:	40000400 	.word	0x40000400
 8004fb8:	40000800 	.word	0x40000800

08004fbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bc80      	pop	{r7}
 8004fcc:	4770      	bx	lr

08004fce <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b083      	sub	sp, #12
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fd6:	bf00      	nop
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bc80      	pop	{r7}
 8004fde:	4770      	bx	lr

08004fe0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e042      	b.n	8005078 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d106      	bne.n	800500c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7fd fa1c 	bl	8002444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2224      	movs	r2, #36	@ 0x24
 8005010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68da      	ldr	r2, [r3, #12]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005022:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f971 	bl	800530c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	691a      	ldr	r2, [r3, #16]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005038:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	695a      	ldr	r2, [r3, #20]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005048:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68da      	ldr	r2, [r3, #12]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005058:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2220      	movs	r2, #32
 8005064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2220      	movs	r2, #32
 800506c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b08a      	sub	sp, #40	@ 0x28
 8005084:	af02      	add	r7, sp, #8
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	603b      	str	r3, [r7, #0]
 800508c:	4613      	mov	r3, r2
 800508e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005090:	2300      	movs	r3, #0
 8005092:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b20      	cmp	r3, #32
 800509e:	d175      	bne.n	800518c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d002      	beq.n	80050ac <HAL_UART_Transmit+0x2c>
 80050a6:	88fb      	ldrh	r3, [r7, #6]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e06e      	b.n	800518e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2221      	movs	r2, #33	@ 0x21
 80050ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050be:	f7fd fbdf 	bl	8002880 <HAL_GetTick>
 80050c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	88fa      	ldrh	r2, [r7, #6]
 80050c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	88fa      	ldrh	r2, [r7, #6]
 80050ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050d8:	d108      	bne.n	80050ec <HAL_UART_Transmit+0x6c>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d104      	bne.n	80050ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050e2:	2300      	movs	r3, #0
 80050e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	61bb      	str	r3, [r7, #24]
 80050ea:	e003      	b.n	80050f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050f0:	2300      	movs	r3, #0
 80050f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050f4:	e02e      	b.n	8005154 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2200      	movs	r2, #0
 80050fe:	2180      	movs	r1, #128	@ 0x80
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 f848 	bl	8005196 <UART_WaitOnFlagUntilTimeout>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d005      	beq.n	8005118 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2220      	movs	r2, #32
 8005110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e03a      	b.n	800518e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10b      	bne.n	8005136 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	881b      	ldrh	r3, [r3, #0]
 8005122:	461a      	mov	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800512c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	3302      	adds	r3, #2
 8005132:	61bb      	str	r3, [r7, #24]
 8005134:	e007      	b.n	8005146 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	781a      	ldrb	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	3301      	adds	r3, #1
 8005144:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800514a:	b29b      	uxth	r3, r3
 800514c:	3b01      	subs	r3, #1
 800514e:	b29a      	uxth	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005158:	b29b      	uxth	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1cb      	bne.n	80050f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	2200      	movs	r2, #0
 8005166:	2140      	movs	r1, #64	@ 0x40
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f000 f814 	bl	8005196 <UART_WaitOnFlagUntilTimeout>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d005      	beq.n	8005180 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2220      	movs	r2, #32
 8005178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e006      	b.n	800518e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2220      	movs	r2, #32
 8005184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005188:	2300      	movs	r3, #0
 800518a:	e000      	b.n	800518e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800518c:	2302      	movs	r3, #2
  }
}
 800518e:	4618      	mov	r0, r3
 8005190:	3720      	adds	r7, #32
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b086      	sub	sp, #24
 800519a:	af00      	add	r7, sp, #0
 800519c:	60f8      	str	r0, [r7, #12]
 800519e:	60b9      	str	r1, [r7, #8]
 80051a0:	603b      	str	r3, [r7, #0]
 80051a2:	4613      	mov	r3, r2
 80051a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051a6:	e03b      	b.n	8005220 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051a8:	6a3b      	ldr	r3, [r7, #32]
 80051aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ae:	d037      	beq.n	8005220 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051b0:	f7fd fb66 	bl	8002880 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	6a3a      	ldr	r2, [r7, #32]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d302      	bcc.n	80051c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e03a      	b.n	8005240 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d023      	beq.n	8005220 <UART_WaitOnFlagUntilTimeout+0x8a>
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2b80      	cmp	r3, #128	@ 0x80
 80051dc:	d020      	beq.n	8005220 <UART_WaitOnFlagUntilTimeout+0x8a>
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	2b40      	cmp	r3, #64	@ 0x40
 80051e2:	d01d      	beq.n	8005220 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0308 	and.w	r3, r3, #8
 80051ee:	2b08      	cmp	r3, #8
 80051f0:	d116      	bne.n	8005220 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80051f2:	2300      	movs	r3, #0
 80051f4:	617b      	str	r3, [r7, #20]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	617b      	str	r3, [r7, #20]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	617b      	str	r3, [r7, #20]
 8005206:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 f81d 	bl	8005248 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2208      	movs	r2, #8
 8005212:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e00f      	b.n	8005240 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	4013      	ands	r3, r2
 800522a:	68ba      	ldr	r2, [r7, #8]
 800522c:	429a      	cmp	r2, r3
 800522e:	bf0c      	ite	eq
 8005230:	2301      	moveq	r3, #1
 8005232:	2300      	movne	r3, #0
 8005234:	b2db      	uxtb	r3, r3
 8005236:	461a      	mov	r2, r3
 8005238:	79fb      	ldrb	r3, [r7, #7]
 800523a:	429a      	cmp	r2, r3
 800523c:	d0b4      	beq.n	80051a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3718      	adds	r7, #24
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005248:	b480      	push	{r7}
 800524a:	b095      	sub	sp, #84	@ 0x54
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	330c      	adds	r3, #12
 8005256:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800525a:	e853 3f00 	ldrex	r3, [r3]
 800525e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005262:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005266:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	330c      	adds	r3, #12
 800526e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005270:	643a      	str	r2, [r7, #64]	@ 0x40
 8005272:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005274:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005276:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005278:	e841 2300 	strex	r3, r2, [r1]
 800527c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800527e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1e5      	bne.n	8005250 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	3314      	adds	r3, #20
 800528a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	e853 3f00 	ldrex	r3, [r3]
 8005292:	61fb      	str	r3, [r7, #28]
   return(result);
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	f023 0301 	bic.w	r3, r3, #1
 800529a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	3314      	adds	r3, #20
 80052a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052ac:	e841 2300 	strex	r3, r2, [r1]
 80052b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1e5      	bne.n	8005284 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d119      	bne.n	80052f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	330c      	adds	r3, #12
 80052c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	e853 3f00 	ldrex	r3, [r3]
 80052ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	f023 0310 	bic.w	r3, r3, #16
 80052d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	330c      	adds	r3, #12
 80052de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052e0:	61ba      	str	r2, [r7, #24]
 80052e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e4:	6979      	ldr	r1, [r7, #20]
 80052e6:	69ba      	ldr	r2, [r7, #24]
 80052e8:	e841 2300 	strex	r3, r2, [r1]
 80052ec:	613b      	str	r3, [r7, #16]
   return(result);
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1e5      	bne.n	80052c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005302:	bf00      	nop
 8005304:	3754      	adds	r7, #84	@ 0x54
 8005306:	46bd      	mov	sp, r7
 8005308:	bc80      	pop	{r7}
 800530a:	4770      	bx	lr

0800530c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68da      	ldr	r2, [r3, #12]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	430a      	orrs	r2, r1
 8005328:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	689a      	ldr	r2, [r3, #8]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	431a      	orrs	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	4313      	orrs	r3, r2
 800533a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005346:	f023 030c 	bic.w	r3, r3, #12
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	6812      	ldr	r2, [r2, #0]
 800534e:	68b9      	ldr	r1, [r7, #8]
 8005350:	430b      	orrs	r3, r1
 8005352:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	699a      	ldr	r2, [r3, #24]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	430a      	orrs	r2, r1
 8005368:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a2c      	ldr	r2, [pc, #176]	@ (8005420 <UART_SetConfig+0x114>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d103      	bne.n	800537c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005374:	f7fe ff3e 	bl	80041f4 <HAL_RCC_GetPCLK2Freq>
 8005378:	60f8      	str	r0, [r7, #12]
 800537a:	e002      	b.n	8005382 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800537c:	f7fe ff26 	bl	80041cc <HAL_RCC_GetPCLK1Freq>
 8005380:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	4613      	mov	r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	009a      	lsls	r2, r3, #2
 800538c:	441a      	add	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	fbb2 f3f3 	udiv	r3, r2, r3
 8005398:	4a22      	ldr	r2, [pc, #136]	@ (8005424 <UART_SetConfig+0x118>)
 800539a:	fba2 2303 	umull	r2, r3, r2, r3
 800539e:	095b      	lsrs	r3, r3, #5
 80053a0:	0119      	lsls	r1, r3, #4
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	4613      	mov	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	009a      	lsls	r2, r3, #2
 80053ac:	441a      	add	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80053b8:	4b1a      	ldr	r3, [pc, #104]	@ (8005424 <UART_SetConfig+0x118>)
 80053ba:	fba3 0302 	umull	r0, r3, r3, r2
 80053be:	095b      	lsrs	r3, r3, #5
 80053c0:	2064      	movs	r0, #100	@ 0x64
 80053c2:	fb00 f303 	mul.w	r3, r0, r3
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	011b      	lsls	r3, r3, #4
 80053ca:	3332      	adds	r3, #50	@ 0x32
 80053cc:	4a15      	ldr	r2, [pc, #84]	@ (8005424 <UART_SetConfig+0x118>)
 80053ce:	fba2 2303 	umull	r2, r3, r2, r3
 80053d2:	095b      	lsrs	r3, r3, #5
 80053d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053d8:	4419      	add	r1, r3
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	4613      	mov	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4413      	add	r3, r2
 80053e2:	009a      	lsls	r2, r3, #2
 80053e4:	441a      	add	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80053f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005424 <UART_SetConfig+0x118>)
 80053f2:	fba3 0302 	umull	r0, r3, r3, r2
 80053f6:	095b      	lsrs	r3, r3, #5
 80053f8:	2064      	movs	r0, #100	@ 0x64
 80053fa:	fb00 f303 	mul.w	r3, r0, r3
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	011b      	lsls	r3, r3, #4
 8005402:	3332      	adds	r3, #50	@ 0x32
 8005404:	4a07      	ldr	r2, [pc, #28]	@ (8005424 <UART_SetConfig+0x118>)
 8005406:	fba2 2303 	umull	r2, r3, r2, r3
 800540a:	095b      	lsrs	r3, r3, #5
 800540c:	f003 020f 	and.w	r2, r3, #15
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	440a      	add	r2, r1
 8005416:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005418:	bf00      	nop
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	40013800 	.word	0x40013800
 8005424:	51eb851f 	.word	0x51eb851f

08005428 <std>:
 8005428:	2300      	movs	r3, #0
 800542a:	b510      	push	{r4, lr}
 800542c:	4604      	mov	r4, r0
 800542e:	e9c0 3300 	strd	r3, r3, [r0]
 8005432:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005436:	6083      	str	r3, [r0, #8]
 8005438:	8181      	strh	r1, [r0, #12]
 800543a:	6643      	str	r3, [r0, #100]	@ 0x64
 800543c:	81c2      	strh	r2, [r0, #14]
 800543e:	6183      	str	r3, [r0, #24]
 8005440:	4619      	mov	r1, r3
 8005442:	2208      	movs	r2, #8
 8005444:	305c      	adds	r0, #92	@ 0x5c
 8005446:	f000 fa09 	bl	800585c <memset>
 800544a:	4b0d      	ldr	r3, [pc, #52]	@ (8005480 <std+0x58>)
 800544c:	6224      	str	r4, [r4, #32]
 800544e:	6263      	str	r3, [r4, #36]	@ 0x24
 8005450:	4b0c      	ldr	r3, [pc, #48]	@ (8005484 <std+0x5c>)
 8005452:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005454:	4b0c      	ldr	r3, [pc, #48]	@ (8005488 <std+0x60>)
 8005456:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005458:	4b0c      	ldr	r3, [pc, #48]	@ (800548c <std+0x64>)
 800545a:	6323      	str	r3, [r4, #48]	@ 0x30
 800545c:	4b0c      	ldr	r3, [pc, #48]	@ (8005490 <std+0x68>)
 800545e:	429c      	cmp	r4, r3
 8005460:	d006      	beq.n	8005470 <std+0x48>
 8005462:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005466:	4294      	cmp	r4, r2
 8005468:	d002      	beq.n	8005470 <std+0x48>
 800546a:	33d0      	adds	r3, #208	@ 0xd0
 800546c:	429c      	cmp	r4, r3
 800546e:	d105      	bne.n	800547c <std+0x54>
 8005470:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005478:	f000 ba68 	b.w	800594c <__retarget_lock_init_recursive>
 800547c:	bd10      	pop	{r4, pc}
 800547e:	bf00      	nop
 8005480:	080056ad 	.word	0x080056ad
 8005484:	080056cf 	.word	0x080056cf
 8005488:	08005707 	.word	0x08005707
 800548c:	0800572b 	.word	0x0800572b
 8005490:	20000694 	.word	0x20000694

08005494 <stdio_exit_handler>:
 8005494:	4a02      	ldr	r2, [pc, #8]	@ (80054a0 <stdio_exit_handler+0xc>)
 8005496:	4903      	ldr	r1, [pc, #12]	@ (80054a4 <stdio_exit_handler+0x10>)
 8005498:	4803      	ldr	r0, [pc, #12]	@ (80054a8 <stdio_exit_handler+0x14>)
 800549a:	f000 b869 	b.w	8005570 <_fwalk_sglue>
 800549e:	bf00      	nop
 80054a0:	20000018 	.word	0x20000018
 80054a4:	08006211 	.word	0x08006211
 80054a8:	20000028 	.word	0x20000028

080054ac <cleanup_stdio>:
 80054ac:	6841      	ldr	r1, [r0, #4]
 80054ae:	4b0c      	ldr	r3, [pc, #48]	@ (80054e0 <cleanup_stdio+0x34>)
 80054b0:	b510      	push	{r4, lr}
 80054b2:	4299      	cmp	r1, r3
 80054b4:	4604      	mov	r4, r0
 80054b6:	d001      	beq.n	80054bc <cleanup_stdio+0x10>
 80054b8:	f000 feaa 	bl	8006210 <_fflush_r>
 80054bc:	68a1      	ldr	r1, [r4, #8]
 80054be:	4b09      	ldr	r3, [pc, #36]	@ (80054e4 <cleanup_stdio+0x38>)
 80054c0:	4299      	cmp	r1, r3
 80054c2:	d002      	beq.n	80054ca <cleanup_stdio+0x1e>
 80054c4:	4620      	mov	r0, r4
 80054c6:	f000 fea3 	bl	8006210 <_fflush_r>
 80054ca:	68e1      	ldr	r1, [r4, #12]
 80054cc:	4b06      	ldr	r3, [pc, #24]	@ (80054e8 <cleanup_stdio+0x3c>)
 80054ce:	4299      	cmp	r1, r3
 80054d0:	d004      	beq.n	80054dc <cleanup_stdio+0x30>
 80054d2:	4620      	mov	r0, r4
 80054d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054d8:	f000 be9a 	b.w	8006210 <_fflush_r>
 80054dc:	bd10      	pop	{r4, pc}
 80054de:	bf00      	nop
 80054e0:	20000694 	.word	0x20000694
 80054e4:	200006fc 	.word	0x200006fc
 80054e8:	20000764 	.word	0x20000764

080054ec <global_stdio_init.part.0>:
 80054ec:	b510      	push	{r4, lr}
 80054ee:	4b0b      	ldr	r3, [pc, #44]	@ (800551c <global_stdio_init.part.0+0x30>)
 80054f0:	4c0b      	ldr	r4, [pc, #44]	@ (8005520 <global_stdio_init.part.0+0x34>)
 80054f2:	4a0c      	ldr	r2, [pc, #48]	@ (8005524 <global_stdio_init.part.0+0x38>)
 80054f4:	4620      	mov	r0, r4
 80054f6:	601a      	str	r2, [r3, #0]
 80054f8:	2104      	movs	r1, #4
 80054fa:	2200      	movs	r2, #0
 80054fc:	f7ff ff94 	bl	8005428 <std>
 8005500:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005504:	2201      	movs	r2, #1
 8005506:	2109      	movs	r1, #9
 8005508:	f7ff ff8e 	bl	8005428 <std>
 800550c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005510:	2202      	movs	r2, #2
 8005512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005516:	2112      	movs	r1, #18
 8005518:	f7ff bf86 	b.w	8005428 <std>
 800551c:	200007cc 	.word	0x200007cc
 8005520:	20000694 	.word	0x20000694
 8005524:	08005495 	.word	0x08005495

08005528 <__sfp_lock_acquire>:
 8005528:	4801      	ldr	r0, [pc, #4]	@ (8005530 <__sfp_lock_acquire+0x8>)
 800552a:	f000 ba10 	b.w	800594e <__retarget_lock_acquire_recursive>
 800552e:	bf00      	nop
 8005530:	200007d5 	.word	0x200007d5

08005534 <__sfp_lock_release>:
 8005534:	4801      	ldr	r0, [pc, #4]	@ (800553c <__sfp_lock_release+0x8>)
 8005536:	f000 ba0b 	b.w	8005950 <__retarget_lock_release_recursive>
 800553a:	bf00      	nop
 800553c:	200007d5 	.word	0x200007d5

08005540 <__sinit>:
 8005540:	b510      	push	{r4, lr}
 8005542:	4604      	mov	r4, r0
 8005544:	f7ff fff0 	bl	8005528 <__sfp_lock_acquire>
 8005548:	6a23      	ldr	r3, [r4, #32]
 800554a:	b11b      	cbz	r3, 8005554 <__sinit+0x14>
 800554c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005550:	f7ff bff0 	b.w	8005534 <__sfp_lock_release>
 8005554:	4b04      	ldr	r3, [pc, #16]	@ (8005568 <__sinit+0x28>)
 8005556:	6223      	str	r3, [r4, #32]
 8005558:	4b04      	ldr	r3, [pc, #16]	@ (800556c <__sinit+0x2c>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1f5      	bne.n	800554c <__sinit+0xc>
 8005560:	f7ff ffc4 	bl	80054ec <global_stdio_init.part.0>
 8005564:	e7f2      	b.n	800554c <__sinit+0xc>
 8005566:	bf00      	nop
 8005568:	080054ad 	.word	0x080054ad
 800556c:	200007cc 	.word	0x200007cc

08005570 <_fwalk_sglue>:
 8005570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005574:	4607      	mov	r7, r0
 8005576:	4688      	mov	r8, r1
 8005578:	4614      	mov	r4, r2
 800557a:	2600      	movs	r6, #0
 800557c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005580:	f1b9 0901 	subs.w	r9, r9, #1
 8005584:	d505      	bpl.n	8005592 <_fwalk_sglue+0x22>
 8005586:	6824      	ldr	r4, [r4, #0]
 8005588:	2c00      	cmp	r4, #0
 800558a:	d1f7      	bne.n	800557c <_fwalk_sglue+0xc>
 800558c:	4630      	mov	r0, r6
 800558e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005592:	89ab      	ldrh	r3, [r5, #12]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d907      	bls.n	80055a8 <_fwalk_sglue+0x38>
 8005598:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800559c:	3301      	adds	r3, #1
 800559e:	d003      	beq.n	80055a8 <_fwalk_sglue+0x38>
 80055a0:	4629      	mov	r1, r5
 80055a2:	4638      	mov	r0, r7
 80055a4:	47c0      	blx	r8
 80055a6:	4306      	orrs	r6, r0
 80055a8:	3568      	adds	r5, #104	@ 0x68
 80055aa:	e7e9      	b.n	8005580 <_fwalk_sglue+0x10>

080055ac <_puts_r>:
 80055ac:	6a03      	ldr	r3, [r0, #32]
 80055ae:	b570      	push	{r4, r5, r6, lr}
 80055b0:	4605      	mov	r5, r0
 80055b2:	460e      	mov	r6, r1
 80055b4:	6884      	ldr	r4, [r0, #8]
 80055b6:	b90b      	cbnz	r3, 80055bc <_puts_r+0x10>
 80055b8:	f7ff ffc2 	bl	8005540 <__sinit>
 80055bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80055be:	07db      	lsls	r3, r3, #31
 80055c0:	d405      	bmi.n	80055ce <_puts_r+0x22>
 80055c2:	89a3      	ldrh	r3, [r4, #12]
 80055c4:	0598      	lsls	r0, r3, #22
 80055c6:	d402      	bmi.n	80055ce <_puts_r+0x22>
 80055c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80055ca:	f000 f9c0 	bl	800594e <__retarget_lock_acquire_recursive>
 80055ce:	89a3      	ldrh	r3, [r4, #12]
 80055d0:	0719      	lsls	r1, r3, #28
 80055d2:	d502      	bpl.n	80055da <_puts_r+0x2e>
 80055d4:	6923      	ldr	r3, [r4, #16]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d135      	bne.n	8005646 <_puts_r+0x9a>
 80055da:	4621      	mov	r1, r4
 80055dc:	4628      	mov	r0, r5
 80055de:	f000 f8e7 	bl	80057b0 <__swsetup_r>
 80055e2:	b380      	cbz	r0, 8005646 <_puts_r+0x9a>
 80055e4:	f04f 35ff 	mov.w	r5, #4294967295
 80055e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80055ea:	07da      	lsls	r2, r3, #31
 80055ec:	d405      	bmi.n	80055fa <_puts_r+0x4e>
 80055ee:	89a3      	ldrh	r3, [r4, #12]
 80055f0:	059b      	lsls	r3, r3, #22
 80055f2:	d402      	bmi.n	80055fa <_puts_r+0x4e>
 80055f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80055f6:	f000 f9ab 	bl	8005950 <__retarget_lock_release_recursive>
 80055fa:	4628      	mov	r0, r5
 80055fc:	bd70      	pop	{r4, r5, r6, pc}
 80055fe:	2b00      	cmp	r3, #0
 8005600:	da04      	bge.n	800560c <_puts_r+0x60>
 8005602:	69a2      	ldr	r2, [r4, #24]
 8005604:	429a      	cmp	r2, r3
 8005606:	dc17      	bgt.n	8005638 <_puts_r+0x8c>
 8005608:	290a      	cmp	r1, #10
 800560a:	d015      	beq.n	8005638 <_puts_r+0x8c>
 800560c:	6823      	ldr	r3, [r4, #0]
 800560e:	1c5a      	adds	r2, r3, #1
 8005610:	6022      	str	r2, [r4, #0]
 8005612:	7019      	strb	r1, [r3, #0]
 8005614:	68a3      	ldr	r3, [r4, #8]
 8005616:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800561a:	3b01      	subs	r3, #1
 800561c:	60a3      	str	r3, [r4, #8]
 800561e:	2900      	cmp	r1, #0
 8005620:	d1ed      	bne.n	80055fe <_puts_r+0x52>
 8005622:	2b00      	cmp	r3, #0
 8005624:	da11      	bge.n	800564a <_puts_r+0x9e>
 8005626:	4622      	mov	r2, r4
 8005628:	210a      	movs	r1, #10
 800562a:	4628      	mov	r0, r5
 800562c:	f000 f881 	bl	8005732 <__swbuf_r>
 8005630:	3001      	adds	r0, #1
 8005632:	d0d7      	beq.n	80055e4 <_puts_r+0x38>
 8005634:	250a      	movs	r5, #10
 8005636:	e7d7      	b.n	80055e8 <_puts_r+0x3c>
 8005638:	4622      	mov	r2, r4
 800563a:	4628      	mov	r0, r5
 800563c:	f000 f879 	bl	8005732 <__swbuf_r>
 8005640:	3001      	adds	r0, #1
 8005642:	d1e7      	bne.n	8005614 <_puts_r+0x68>
 8005644:	e7ce      	b.n	80055e4 <_puts_r+0x38>
 8005646:	3e01      	subs	r6, #1
 8005648:	e7e4      	b.n	8005614 <_puts_r+0x68>
 800564a:	6823      	ldr	r3, [r4, #0]
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	6022      	str	r2, [r4, #0]
 8005650:	220a      	movs	r2, #10
 8005652:	701a      	strb	r2, [r3, #0]
 8005654:	e7ee      	b.n	8005634 <_puts_r+0x88>
	...

08005658 <puts>:
 8005658:	4b02      	ldr	r3, [pc, #8]	@ (8005664 <puts+0xc>)
 800565a:	4601      	mov	r1, r0
 800565c:	6818      	ldr	r0, [r3, #0]
 800565e:	f7ff bfa5 	b.w	80055ac <_puts_r>
 8005662:	bf00      	nop
 8005664:	20000024 	.word	0x20000024

08005668 <siprintf>:
 8005668:	b40e      	push	{r1, r2, r3}
 800566a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800566e:	b510      	push	{r4, lr}
 8005670:	2400      	movs	r4, #0
 8005672:	b09d      	sub	sp, #116	@ 0x74
 8005674:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005676:	9002      	str	r0, [sp, #8]
 8005678:	9006      	str	r0, [sp, #24]
 800567a:	9107      	str	r1, [sp, #28]
 800567c:	9104      	str	r1, [sp, #16]
 800567e:	4809      	ldr	r0, [pc, #36]	@ (80056a4 <siprintf+0x3c>)
 8005680:	4909      	ldr	r1, [pc, #36]	@ (80056a8 <siprintf+0x40>)
 8005682:	f853 2b04 	ldr.w	r2, [r3], #4
 8005686:	9105      	str	r1, [sp, #20]
 8005688:	6800      	ldr	r0, [r0, #0]
 800568a:	a902      	add	r1, sp, #8
 800568c:	9301      	str	r3, [sp, #4]
 800568e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005690:	f000 fab2 	bl	8005bf8 <_svfiprintf_r>
 8005694:	9b02      	ldr	r3, [sp, #8]
 8005696:	701c      	strb	r4, [r3, #0]
 8005698:	b01d      	add	sp, #116	@ 0x74
 800569a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800569e:	b003      	add	sp, #12
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	20000024 	.word	0x20000024
 80056a8:	ffff0208 	.word	0xffff0208

080056ac <__sread>:
 80056ac:	b510      	push	{r4, lr}
 80056ae:	460c      	mov	r4, r1
 80056b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056b4:	f000 f8fc 	bl	80058b0 <_read_r>
 80056b8:	2800      	cmp	r0, #0
 80056ba:	bfab      	itete	ge
 80056bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80056be:	89a3      	ldrhlt	r3, [r4, #12]
 80056c0:	181b      	addge	r3, r3, r0
 80056c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80056c6:	bfac      	ite	ge
 80056c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80056ca:	81a3      	strhlt	r3, [r4, #12]
 80056cc:	bd10      	pop	{r4, pc}

080056ce <__swrite>:
 80056ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056d2:	461f      	mov	r7, r3
 80056d4:	898b      	ldrh	r3, [r1, #12]
 80056d6:	4605      	mov	r5, r0
 80056d8:	05db      	lsls	r3, r3, #23
 80056da:	460c      	mov	r4, r1
 80056dc:	4616      	mov	r6, r2
 80056de:	d505      	bpl.n	80056ec <__swrite+0x1e>
 80056e0:	2302      	movs	r3, #2
 80056e2:	2200      	movs	r2, #0
 80056e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056e8:	f000 f8d0 	bl	800588c <_lseek_r>
 80056ec:	89a3      	ldrh	r3, [r4, #12]
 80056ee:	4632      	mov	r2, r6
 80056f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056f4:	81a3      	strh	r3, [r4, #12]
 80056f6:	4628      	mov	r0, r5
 80056f8:	463b      	mov	r3, r7
 80056fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005702:	f000 b8e7 	b.w	80058d4 <_write_r>

08005706 <__sseek>:
 8005706:	b510      	push	{r4, lr}
 8005708:	460c      	mov	r4, r1
 800570a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800570e:	f000 f8bd 	bl	800588c <_lseek_r>
 8005712:	1c43      	adds	r3, r0, #1
 8005714:	89a3      	ldrh	r3, [r4, #12]
 8005716:	bf15      	itete	ne
 8005718:	6560      	strne	r0, [r4, #84]	@ 0x54
 800571a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800571e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005722:	81a3      	strheq	r3, [r4, #12]
 8005724:	bf18      	it	ne
 8005726:	81a3      	strhne	r3, [r4, #12]
 8005728:	bd10      	pop	{r4, pc}

0800572a <__sclose>:
 800572a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800572e:	f000 b89d 	b.w	800586c <_close_r>

08005732 <__swbuf_r>:
 8005732:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005734:	460e      	mov	r6, r1
 8005736:	4614      	mov	r4, r2
 8005738:	4605      	mov	r5, r0
 800573a:	b118      	cbz	r0, 8005744 <__swbuf_r+0x12>
 800573c:	6a03      	ldr	r3, [r0, #32]
 800573e:	b90b      	cbnz	r3, 8005744 <__swbuf_r+0x12>
 8005740:	f7ff fefe 	bl	8005540 <__sinit>
 8005744:	69a3      	ldr	r3, [r4, #24]
 8005746:	60a3      	str	r3, [r4, #8]
 8005748:	89a3      	ldrh	r3, [r4, #12]
 800574a:	071a      	lsls	r2, r3, #28
 800574c:	d501      	bpl.n	8005752 <__swbuf_r+0x20>
 800574e:	6923      	ldr	r3, [r4, #16]
 8005750:	b943      	cbnz	r3, 8005764 <__swbuf_r+0x32>
 8005752:	4621      	mov	r1, r4
 8005754:	4628      	mov	r0, r5
 8005756:	f000 f82b 	bl	80057b0 <__swsetup_r>
 800575a:	b118      	cbz	r0, 8005764 <__swbuf_r+0x32>
 800575c:	f04f 37ff 	mov.w	r7, #4294967295
 8005760:	4638      	mov	r0, r7
 8005762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005764:	6823      	ldr	r3, [r4, #0]
 8005766:	6922      	ldr	r2, [r4, #16]
 8005768:	b2f6      	uxtb	r6, r6
 800576a:	1a98      	subs	r0, r3, r2
 800576c:	6963      	ldr	r3, [r4, #20]
 800576e:	4637      	mov	r7, r6
 8005770:	4283      	cmp	r3, r0
 8005772:	dc05      	bgt.n	8005780 <__swbuf_r+0x4e>
 8005774:	4621      	mov	r1, r4
 8005776:	4628      	mov	r0, r5
 8005778:	f000 fd4a 	bl	8006210 <_fflush_r>
 800577c:	2800      	cmp	r0, #0
 800577e:	d1ed      	bne.n	800575c <__swbuf_r+0x2a>
 8005780:	68a3      	ldr	r3, [r4, #8]
 8005782:	3b01      	subs	r3, #1
 8005784:	60a3      	str	r3, [r4, #8]
 8005786:	6823      	ldr	r3, [r4, #0]
 8005788:	1c5a      	adds	r2, r3, #1
 800578a:	6022      	str	r2, [r4, #0]
 800578c:	701e      	strb	r6, [r3, #0]
 800578e:	6962      	ldr	r2, [r4, #20]
 8005790:	1c43      	adds	r3, r0, #1
 8005792:	429a      	cmp	r2, r3
 8005794:	d004      	beq.n	80057a0 <__swbuf_r+0x6e>
 8005796:	89a3      	ldrh	r3, [r4, #12]
 8005798:	07db      	lsls	r3, r3, #31
 800579a:	d5e1      	bpl.n	8005760 <__swbuf_r+0x2e>
 800579c:	2e0a      	cmp	r6, #10
 800579e:	d1df      	bne.n	8005760 <__swbuf_r+0x2e>
 80057a0:	4621      	mov	r1, r4
 80057a2:	4628      	mov	r0, r5
 80057a4:	f000 fd34 	bl	8006210 <_fflush_r>
 80057a8:	2800      	cmp	r0, #0
 80057aa:	d0d9      	beq.n	8005760 <__swbuf_r+0x2e>
 80057ac:	e7d6      	b.n	800575c <__swbuf_r+0x2a>
	...

080057b0 <__swsetup_r>:
 80057b0:	b538      	push	{r3, r4, r5, lr}
 80057b2:	4b29      	ldr	r3, [pc, #164]	@ (8005858 <__swsetup_r+0xa8>)
 80057b4:	4605      	mov	r5, r0
 80057b6:	6818      	ldr	r0, [r3, #0]
 80057b8:	460c      	mov	r4, r1
 80057ba:	b118      	cbz	r0, 80057c4 <__swsetup_r+0x14>
 80057bc:	6a03      	ldr	r3, [r0, #32]
 80057be:	b90b      	cbnz	r3, 80057c4 <__swsetup_r+0x14>
 80057c0:	f7ff febe 	bl	8005540 <__sinit>
 80057c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057c8:	0719      	lsls	r1, r3, #28
 80057ca:	d422      	bmi.n	8005812 <__swsetup_r+0x62>
 80057cc:	06da      	lsls	r2, r3, #27
 80057ce:	d407      	bmi.n	80057e0 <__swsetup_r+0x30>
 80057d0:	2209      	movs	r2, #9
 80057d2:	602a      	str	r2, [r5, #0]
 80057d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057d8:	f04f 30ff 	mov.w	r0, #4294967295
 80057dc:	81a3      	strh	r3, [r4, #12]
 80057de:	e033      	b.n	8005848 <__swsetup_r+0x98>
 80057e0:	0758      	lsls	r0, r3, #29
 80057e2:	d512      	bpl.n	800580a <__swsetup_r+0x5a>
 80057e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057e6:	b141      	cbz	r1, 80057fa <__swsetup_r+0x4a>
 80057e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80057ec:	4299      	cmp	r1, r3
 80057ee:	d002      	beq.n	80057f6 <__swsetup_r+0x46>
 80057f0:	4628      	mov	r0, r5
 80057f2:	f000 f8af 	bl	8005954 <_free_r>
 80057f6:	2300      	movs	r3, #0
 80057f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80057fa:	89a3      	ldrh	r3, [r4, #12]
 80057fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005800:	81a3      	strh	r3, [r4, #12]
 8005802:	2300      	movs	r3, #0
 8005804:	6063      	str	r3, [r4, #4]
 8005806:	6923      	ldr	r3, [r4, #16]
 8005808:	6023      	str	r3, [r4, #0]
 800580a:	89a3      	ldrh	r3, [r4, #12]
 800580c:	f043 0308 	orr.w	r3, r3, #8
 8005810:	81a3      	strh	r3, [r4, #12]
 8005812:	6923      	ldr	r3, [r4, #16]
 8005814:	b94b      	cbnz	r3, 800582a <__swsetup_r+0x7a>
 8005816:	89a3      	ldrh	r3, [r4, #12]
 8005818:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800581c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005820:	d003      	beq.n	800582a <__swsetup_r+0x7a>
 8005822:	4621      	mov	r1, r4
 8005824:	4628      	mov	r0, r5
 8005826:	f000 fd40 	bl	80062aa <__smakebuf_r>
 800582a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800582e:	f013 0201 	ands.w	r2, r3, #1
 8005832:	d00a      	beq.n	800584a <__swsetup_r+0x9a>
 8005834:	2200      	movs	r2, #0
 8005836:	60a2      	str	r2, [r4, #8]
 8005838:	6962      	ldr	r2, [r4, #20]
 800583a:	4252      	negs	r2, r2
 800583c:	61a2      	str	r2, [r4, #24]
 800583e:	6922      	ldr	r2, [r4, #16]
 8005840:	b942      	cbnz	r2, 8005854 <__swsetup_r+0xa4>
 8005842:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005846:	d1c5      	bne.n	80057d4 <__swsetup_r+0x24>
 8005848:	bd38      	pop	{r3, r4, r5, pc}
 800584a:	0799      	lsls	r1, r3, #30
 800584c:	bf58      	it	pl
 800584e:	6962      	ldrpl	r2, [r4, #20]
 8005850:	60a2      	str	r2, [r4, #8]
 8005852:	e7f4      	b.n	800583e <__swsetup_r+0x8e>
 8005854:	2000      	movs	r0, #0
 8005856:	e7f7      	b.n	8005848 <__swsetup_r+0x98>
 8005858:	20000024 	.word	0x20000024

0800585c <memset>:
 800585c:	4603      	mov	r3, r0
 800585e:	4402      	add	r2, r0
 8005860:	4293      	cmp	r3, r2
 8005862:	d100      	bne.n	8005866 <memset+0xa>
 8005864:	4770      	bx	lr
 8005866:	f803 1b01 	strb.w	r1, [r3], #1
 800586a:	e7f9      	b.n	8005860 <memset+0x4>

0800586c <_close_r>:
 800586c:	b538      	push	{r3, r4, r5, lr}
 800586e:	2300      	movs	r3, #0
 8005870:	4d05      	ldr	r5, [pc, #20]	@ (8005888 <_close_r+0x1c>)
 8005872:	4604      	mov	r4, r0
 8005874:	4608      	mov	r0, r1
 8005876:	602b      	str	r3, [r5, #0]
 8005878:	f7fc ff17 	bl	80026aa <_close>
 800587c:	1c43      	adds	r3, r0, #1
 800587e:	d102      	bne.n	8005886 <_close_r+0x1a>
 8005880:	682b      	ldr	r3, [r5, #0]
 8005882:	b103      	cbz	r3, 8005886 <_close_r+0x1a>
 8005884:	6023      	str	r3, [r4, #0]
 8005886:	bd38      	pop	{r3, r4, r5, pc}
 8005888:	200007d0 	.word	0x200007d0

0800588c <_lseek_r>:
 800588c:	b538      	push	{r3, r4, r5, lr}
 800588e:	4604      	mov	r4, r0
 8005890:	4608      	mov	r0, r1
 8005892:	4611      	mov	r1, r2
 8005894:	2200      	movs	r2, #0
 8005896:	4d05      	ldr	r5, [pc, #20]	@ (80058ac <_lseek_r+0x20>)
 8005898:	602a      	str	r2, [r5, #0]
 800589a:	461a      	mov	r2, r3
 800589c:	f7fc ff29 	bl	80026f2 <_lseek>
 80058a0:	1c43      	adds	r3, r0, #1
 80058a2:	d102      	bne.n	80058aa <_lseek_r+0x1e>
 80058a4:	682b      	ldr	r3, [r5, #0]
 80058a6:	b103      	cbz	r3, 80058aa <_lseek_r+0x1e>
 80058a8:	6023      	str	r3, [r4, #0]
 80058aa:	bd38      	pop	{r3, r4, r5, pc}
 80058ac:	200007d0 	.word	0x200007d0

080058b0 <_read_r>:
 80058b0:	b538      	push	{r3, r4, r5, lr}
 80058b2:	4604      	mov	r4, r0
 80058b4:	4608      	mov	r0, r1
 80058b6:	4611      	mov	r1, r2
 80058b8:	2200      	movs	r2, #0
 80058ba:	4d05      	ldr	r5, [pc, #20]	@ (80058d0 <_read_r+0x20>)
 80058bc:	602a      	str	r2, [r5, #0]
 80058be:	461a      	mov	r2, r3
 80058c0:	f7fc fed6 	bl	8002670 <_read>
 80058c4:	1c43      	adds	r3, r0, #1
 80058c6:	d102      	bne.n	80058ce <_read_r+0x1e>
 80058c8:	682b      	ldr	r3, [r5, #0]
 80058ca:	b103      	cbz	r3, 80058ce <_read_r+0x1e>
 80058cc:	6023      	str	r3, [r4, #0]
 80058ce:	bd38      	pop	{r3, r4, r5, pc}
 80058d0:	200007d0 	.word	0x200007d0

080058d4 <_write_r>:
 80058d4:	b538      	push	{r3, r4, r5, lr}
 80058d6:	4604      	mov	r4, r0
 80058d8:	4608      	mov	r0, r1
 80058da:	4611      	mov	r1, r2
 80058dc:	2200      	movs	r2, #0
 80058de:	4d05      	ldr	r5, [pc, #20]	@ (80058f4 <_write_r+0x20>)
 80058e0:	602a      	str	r2, [r5, #0]
 80058e2:	461a      	mov	r2, r3
 80058e4:	f7fc f8ee 	bl	8001ac4 <_write>
 80058e8:	1c43      	adds	r3, r0, #1
 80058ea:	d102      	bne.n	80058f2 <_write_r+0x1e>
 80058ec:	682b      	ldr	r3, [r5, #0]
 80058ee:	b103      	cbz	r3, 80058f2 <_write_r+0x1e>
 80058f0:	6023      	str	r3, [r4, #0]
 80058f2:	bd38      	pop	{r3, r4, r5, pc}
 80058f4:	200007d0 	.word	0x200007d0

080058f8 <__errno>:
 80058f8:	4b01      	ldr	r3, [pc, #4]	@ (8005900 <__errno+0x8>)
 80058fa:	6818      	ldr	r0, [r3, #0]
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	20000024 	.word	0x20000024

08005904 <__libc_init_array>:
 8005904:	b570      	push	{r4, r5, r6, lr}
 8005906:	2600      	movs	r6, #0
 8005908:	4d0c      	ldr	r5, [pc, #48]	@ (800593c <__libc_init_array+0x38>)
 800590a:	4c0d      	ldr	r4, [pc, #52]	@ (8005940 <__libc_init_array+0x3c>)
 800590c:	1b64      	subs	r4, r4, r5
 800590e:	10a4      	asrs	r4, r4, #2
 8005910:	42a6      	cmp	r6, r4
 8005912:	d109      	bne.n	8005928 <__libc_init_array+0x24>
 8005914:	f000 fda4 	bl	8006460 <_init>
 8005918:	2600      	movs	r6, #0
 800591a:	4d0a      	ldr	r5, [pc, #40]	@ (8005944 <__libc_init_array+0x40>)
 800591c:	4c0a      	ldr	r4, [pc, #40]	@ (8005948 <__libc_init_array+0x44>)
 800591e:	1b64      	subs	r4, r4, r5
 8005920:	10a4      	asrs	r4, r4, #2
 8005922:	42a6      	cmp	r6, r4
 8005924:	d105      	bne.n	8005932 <__libc_init_array+0x2e>
 8005926:	bd70      	pop	{r4, r5, r6, pc}
 8005928:	f855 3b04 	ldr.w	r3, [r5], #4
 800592c:	4798      	blx	r3
 800592e:	3601      	adds	r6, #1
 8005930:	e7ee      	b.n	8005910 <__libc_init_array+0xc>
 8005932:	f855 3b04 	ldr.w	r3, [r5], #4
 8005936:	4798      	blx	r3
 8005938:	3601      	adds	r6, #1
 800593a:	e7f2      	b.n	8005922 <__libc_init_array+0x1e>
 800593c:	08007308 	.word	0x08007308
 8005940:	08007308 	.word	0x08007308
 8005944:	08007308 	.word	0x08007308
 8005948:	0800730c 	.word	0x0800730c

0800594c <__retarget_lock_init_recursive>:
 800594c:	4770      	bx	lr

0800594e <__retarget_lock_acquire_recursive>:
 800594e:	4770      	bx	lr

08005950 <__retarget_lock_release_recursive>:
 8005950:	4770      	bx	lr
	...

08005954 <_free_r>:
 8005954:	b538      	push	{r3, r4, r5, lr}
 8005956:	4605      	mov	r5, r0
 8005958:	2900      	cmp	r1, #0
 800595a:	d040      	beq.n	80059de <_free_r+0x8a>
 800595c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005960:	1f0c      	subs	r4, r1, #4
 8005962:	2b00      	cmp	r3, #0
 8005964:	bfb8      	it	lt
 8005966:	18e4      	addlt	r4, r4, r3
 8005968:	f000 f8de 	bl	8005b28 <__malloc_lock>
 800596c:	4a1c      	ldr	r2, [pc, #112]	@ (80059e0 <_free_r+0x8c>)
 800596e:	6813      	ldr	r3, [r2, #0]
 8005970:	b933      	cbnz	r3, 8005980 <_free_r+0x2c>
 8005972:	6063      	str	r3, [r4, #4]
 8005974:	6014      	str	r4, [r2, #0]
 8005976:	4628      	mov	r0, r5
 8005978:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800597c:	f000 b8da 	b.w	8005b34 <__malloc_unlock>
 8005980:	42a3      	cmp	r3, r4
 8005982:	d908      	bls.n	8005996 <_free_r+0x42>
 8005984:	6820      	ldr	r0, [r4, #0]
 8005986:	1821      	adds	r1, r4, r0
 8005988:	428b      	cmp	r3, r1
 800598a:	bf01      	itttt	eq
 800598c:	6819      	ldreq	r1, [r3, #0]
 800598e:	685b      	ldreq	r3, [r3, #4]
 8005990:	1809      	addeq	r1, r1, r0
 8005992:	6021      	streq	r1, [r4, #0]
 8005994:	e7ed      	b.n	8005972 <_free_r+0x1e>
 8005996:	461a      	mov	r2, r3
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	b10b      	cbz	r3, 80059a0 <_free_r+0x4c>
 800599c:	42a3      	cmp	r3, r4
 800599e:	d9fa      	bls.n	8005996 <_free_r+0x42>
 80059a0:	6811      	ldr	r1, [r2, #0]
 80059a2:	1850      	adds	r0, r2, r1
 80059a4:	42a0      	cmp	r0, r4
 80059a6:	d10b      	bne.n	80059c0 <_free_r+0x6c>
 80059a8:	6820      	ldr	r0, [r4, #0]
 80059aa:	4401      	add	r1, r0
 80059ac:	1850      	adds	r0, r2, r1
 80059ae:	4283      	cmp	r3, r0
 80059b0:	6011      	str	r1, [r2, #0]
 80059b2:	d1e0      	bne.n	8005976 <_free_r+0x22>
 80059b4:	6818      	ldr	r0, [r3, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	4408      	add	r0, r1
 80059ba:	6010      	str	r0, [r2, #0]
 80059bc:	6053      	str	r3, [r2, #4]
 80059be:	e7da      	b.n	8005976 <_free_r+0x22>
 80059c0:	d902      	bls.n	80059c8 <_free_r+0x74>
 80059c2:	230c      	movs	r3, #12
 80059c4:	602b      	str	r3, [r5, #0]
 80059c6:	e7d6      	b.n	8005976 <_free_r+0x22>
 80059c8:	6820      	ldr	r0, [r4, #0]
 80059ca:	1821      	adds	r1, r4, r0
 80059cc:	428b      	cmp	r3, r1
 80059ce:	bf01      	itttt	eq
 80059d0:	6819      	ldreq	r1, [r3, #0]
 80059d2:	685b      	ldreq	r3, [r3, #4]
 80059d4:	1809      	addeq	r1, r1, r0
 80059d6:	6021      	streq	r1, [r4, #0]
 80059d8:	6063      	str	r3, [r4, #4]
 80059da:	6054      	str	r4, [r2, #4]
 80059dc:	e7cb      	b.n	8005976 <_free_r+0x22>
 80059de:	bd38      	pop	{r3, r4, r5, pc}
 80059e0:	200007dc 	.word	0x200007dc

080059e4 <sbrk_aligned>:
 80059e4:	b570      	push	{r4, r5, r6, lr}
 80059e6:	4e0f      	ldr	r6, [pc, #60]	@ (8005a24 <sbrk_aligned+0x40>)
 80059e8:	460c      	mov	r4, r1
 80059ea:	6831      	ldr	r1, [r6, #0]
 80059ec:	4605      	mov	r5, r0
 80059ee:	b911      	cbnz	r1, 80059f6 <sbrk_aligned+0x12>
 80059f0:	f000 fcd4 	bl	800639c <_sbrk_r>
 80059f4:	6030      	str	r0, [r6, #0]
 80059f6:	4621      	mov	r1, r4
 80059f8:	4628      	mov	r0, r5
 80059fa:	f000 fccf 	bl	800639c <_sbrk_r>
 80059fe:	1c43      	adds	r3, r0, #1
 8005a00:	d103      	bne.n	8005a0a <sbrk_aligned+0x26>
 8005a02:	f04f 34ff 	mov.w	r4, #4294967295
 8005a06:	4620      	mov	r0, r4
 8005a08:	bd70      	pop	{r4, r5, r6, pc}
 8005a0a:	1cc4      	adds	r4, r0, #3
 8005a0c:	f024 0403 	bic.w	r4, r4, #3
 8005a10:	42a0      	cmp	r0, r4
 8005a12:	d0f8      	beq.n	8005a06 <sbrk_aligned+0x22>
 8005a14:	1a21      	subs	r1, r4, r0
 8005a16:	4628      	mov	r0, r5
 8005a18:	f000 fcc0 	bl	800639c <_sbrk_r>
 8005a1c:	3001      	adds	r0, #1
 8005a1e:	d1f2      	bne.n	8005a06 <sbrk_aligned+0x22>
 8005a20:	e7ef      	b.n	8005a02 <sbrk_aligned+0x1e>
 8005a22:	bf00      	nop
 8005a24:	200007d8 	.word	0x200007d8

08005a28 <_malloc_r>:
 8005a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a2c:	1ccd      	adds	r5, r1, #3
 8005a2e:	f025 0503 	bic.w	r5, r5, #3
 8005a32:	3508      	adds	r5, #8
 8005a34:	2d0c      	cmp	r5, #12
 8005a36:	bf38      	it	cc
 8005a38:	250c      	movcc	r5, #12
 8005a3a:	2d00      	cmp	r5, #0
 8005a3c:	4606      	mov	r6, r0
 8005a3e:	db01      	blt.n	8005a44 <_malloc_r+0x1c>
 8005a40:	42a9      	cmp	r1, r5
 8005a42:	d904      	bls.n	8005a4e <_malloc_r+0x26>
 8005a44:	230c      	movs	r3, #12
 8005a46:	6033      	str	r3, [r6, #0]
 8005a48:	2000      	movs	r0, #0
 8005a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005b24 <_malloc_r+0xfc>
 8005a52:	f000 f869 	bl	8005b28 <__malloc_lock>
 8005a56:	f8d8 3000 	ldr.w	r3, [r8]
 8005a5a:	461c      	mov	r4, r3
 8005a5c:	bb44      	cbnz	r4, 8005ab0 <_malloc_r+0x88>
 8005a5e:	4629      	mov	r1, r5
 8005a60:	4630      	mov	r0, r6
 8005a62:	f7ff ffbf 	bl	80059e4 <sbrk_aligned>
 8005a66:	1c43      	adds	r3, r0, #1
 8005a68:	4604      	mov	r4, r0
 8005a6a:	d158      	bne.n	8005b1e <_malloc_r+0xf6>
 8005a6c:	f8d8 4000 	ldr.w	r4, [r8]
 8005a70:	4627      	mov	r7, r4
 8005a72:	2f00      	cmp	r7, #0
 8005a74:	d143      	bne.n	8005afe <_malloc_r+0xd6>
 8005a76:	2c00      	cmp	r4, #0
 8005a78:	d04b      	beq.n	8005b12 <_malloc_r+0xea>
 8005a7a:	6823      	ldr	r3, [r4, #0]
 8005a7c:	4639      	mov	r1, r7
 8005a7e:	4630      	mov	r0, r6
 8005a80:	eb04 0903 	add.w	r9, r4, r3
 8005a84:	f000 fc8a 	bl	800639c <_sbrk_r>
 8005a88:	4581      	cmp	r9, r0
 8005a8a:	d142      	bne.n	8005b12 <_malloc_r+0xea>
 8005a8c:	6821      	ldr	r1, [r4, #0]
 8005a8e:	4630      	mov	r0, r6
 8005a90:	1a6d      	subs	r5, r5, r1
 8005a92:	4629      	mov	r1, r5
 8005a94:	f7ff ffa6 	bl	80059e4 <sbrk_aligned>
 8005a98:	3001      	adds	r0, #1
 8005a9a:	d03a      	beq.n	8005b12 <_malloc_r+0xea>
 8005a9c:	6823      	ldr	r3, [r4, #0]
 8005a9e:	442b      	add	r3, r5
 8005aa0:	6023      	str	r3, [r4, #0]
 8005aa2:	f8d8 3000 	ldr.w	r3, [r8]
 8005aa6:	685a      	ldr	r2, [r3, #4]
 8005aa8:	bb62      	cbnz	r2, 8005b04 <_malloc_r+0xdc>
 8005aaa:	f8c8 7000 	str.w	r7, [r8]
 8005aae:	e00f      	b.n	8005ad0 <_malloc_r+0xa8>
 8005ab0:	6822      	ldr	r2, [r4, #0]
 8005ab2:	1b52      	subs	r2, r2, r5
 8005ab4:	d420      	bmi.n	8005af8 <_malloc_r+0xd0>
 8005ab6:	2a0b      	cmp	r2, #11
 8005ab8:	d917      	bls.n	8005aea <_malloc_r+0xc2>
 8005aba:	1961      	adds	r1, r4, r5
 8005abc:	42a3      	cmp	r3, r4
 8005abe:	6025      	str	r5, [r4, #0]
 8005ac0:	bf18      	it	ne
 8005ac2:	6059      	strne	r1, [r3, #4]
 8005ac4:	6863      	ldr	r3, [r4, #4]
 8005ac6:	bf08      	it	eq
 8005ac8:	f8c8 1000 	streq.w	r1, [r8]
 8005acc:	5162      	str	r2, [r4, r5]
 8005ace:	604b      	str	r3, [r1, #4]
 8005ad0:	4630      	mov	r0, r6
 8005ad2:	f000 f82f 	bl	8005b34 <__malloc_unlock>
 8005ad6:	f104 000b 	add.w	r0, r4, #11
 8005ada:	1d23      	adds	r3, r4, #4
 8005adc:	f020 0007 	bic.w	r0, r0, #7
 8005ae0:	1ac2      	subs	r2, r0, r3
 8005ae2:	bf1c      	itt	ne
 8005ae4:	1a1b      	subne	r3, r3, r0
 8005ae6:	50a3      	strne	r3, [r4, r2]
 8005ae8:	e7af      	b.n	8005a4a <_malloc_r+0x22>
 8005aea:	6862      	ldr	r2, [r4, #4]
 8005aec:	42a3      	cmp	r3, r4
 8005aee:	bf0c      	ite	eq
 8005af0:	f8c8 2000 	streq.w	r2, [r8]
 8005af4:	605a      	strne	r2, [r3, #4]
 8005af6:	e7eb      	b.n	8005ad0 <_malloc_r+0xa8>
 8005af8:	4623      	mov	r3, r4
 8005afa:	6864      	ldr	r4, [r4, #4]
 8005afc:	e7ae      	b.n	8005a5c <_malloc_r+0x34>
 8005afe:	463c      	mov	r4, r7
 8005b00:	687f      	ldr	r7, [r7, #4]
 8005b02:	e7b6      	b.n	8005a72 <_malloc_r+0x4a>
 8005b04:	461a      	mov	r2, r3
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	42a3      	cmp	r3, r4
 8005b0a:	d1fb      	bne.n	8005b04 <_malloc_r+0xdc>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	6053      	str	r3, [r2, #4]
 8005b10:	e7de      	b.n	8005ad0 <_malloc_r+0xa8>
 8005b12:	230c      	movs	r3, #12
 8005b14:	4630      	mov	r0, r6
 8005b16:	6033      	str	r3, [r6, #0]
 8005b18:	f000 f80c 	bl	8005b34 <__malloc_unlock>
 8005b1c:	e794      	b.n	8005a48 <_malloc_r+0x20>
 8005b1e:	6005      	str	r5, [r0, #0]
 8005b20:	e7d6      	b.n	8005ad0 <_malloc_r+0xa8>
 8005b22:	bf00      	nop
 8005b24:	200007dc 	.word	0x200007dc

08005b28 <__malloc_lock>:
 8005b28:	4801      	ldr	r0, [pc, #4]	@ (8005b30 <__malloc_lock+0x8>)
 8005b2a:	f7ff bf10 	b.w	800594e <__retarget_lock_acquire_recursive>
 8005b2e:	bf00      	nop
 8005b30:	200007d4 	.word	0x200007d4

08005b34 <__malloc_unlock>:
 8005b34:	4801      	ldr	r0, [pc, #4]	@ (8005b3c <__malloc_unlock+0x8>)
 8005b36:	f7ff bf0b 	b.w	8005950 <__retarget_lock_release_recursive>
 8005b3a:	bf00      	nop
 8005b3c:	200007d4 	.word	0x200007d4

08005b40 <__ssputs_r>:
 8005b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b44:	461f      	mov	r7, r3
 8005b46:	688e      	ldr	r6, [r1, #8]
 8005b48:	4682      	mov	sl, r0
 8005b4a:	42be      	cmp	r6, r7
 8005b4c:	460c      	mov	r4, r1
 8005b4e:	4690      	mov	r8, r2
 8005b50:	680b      	ldr	r3, [r1, #0]
 8005b52:	d82d      	bhi.n	8005bb0 <__ssputs_r+0x70>
 8005b54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005b58:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005b5c:	d026      	beq.n	8005bac <__ssputs_r+0x6c>
 8005b5e:	6965      	ldr	r5, [r4, #20]
 8005b60:	6909      	ldr	r1, [r1, #16]
 8005b62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b66:	eba3 0901 	sub.w	r9, r3, r1
 8005b6a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b6e:	1c7b      	adds	r3, r7, #1
 8005b70:	444b      	add	r3, r9
 8005b72:	106d      	asrs	r5, r5, #1
 8005b74:	429d      	cmp	r5, r3
 8005b76:	bf38      	it	cc
 8005b78:	461d      	movcc	r5, r3
 8005b7a:	0553      	lsls	r3, r2, #21
 8005b7c:	d527      	bpl.n	8005bce <__ssputs_r+0x8e>
 8005b7e:	4629      	mov	r1, r5
 8005b80:	f7ff ff52 	bl	8005a28 <_malloc_r>
 8005b84:	4606      	mov	r6, r0
 8005b86:	b360      	cbz	r0, 8005be2 <__ssputs_r+0xa2>
 8005b88:	464a      	mov	r2, r9
 8005b8a:	6921      	ldr	r1, [r4, #16]
 8005b8c:	f000 fc24 	bl	80063d8 <memcpy>
 8005b90:	89a3      	ldrh	r3, [r4, #12]
 8005b92:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005b96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b9a:	81a3      	strh	r3, [r4, #12]
 8005b9c:	6126      	str	r6, [r4, #16]
 8005b9e:	444e      	add	r6, r9
 8005ba0:	6026      	str	r6, [r4, #0]
 8005ba2:	463e      	mov	r6, r7
 8005ba4:	6165      	str	r5, [r4, #20]
 8005ba6:	eba5 0509 	sub.w	r5, r5, r9
 8005baa:	60a5      	str	r5, [r4, #8]
 8005bac:	42be      	cmp	r6, r7
 8005bae:	d900      	bls.n	8005bb2 <__ssputs_r+0x72>
 8005bb0:	463e      	mov	r6, r7
 8005bb2:	4632      	mov	r2, r6
 8005bb4:	4641      	mov	r1, r8
 8005bb6:	6820      	ldr	r0, [r4, #0]
 8005bb8:	f000 fbb3 	bl	8006322 <memmove>
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	68a3      	ldr	r3, [r4, #8]
 8005bc0:	1b9b      	subs	r3, r3, r6
 8005bc2:	60a3      	str	r3, [r4, #8]
 8005bc4:	6823      	ldr	r3, [r4, #0]
 8005bc6:	4433      	add	r3, r6
 8005bc8:	6023      	str	r3, [r4, #0]
 8005bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bce:	462a      	mov	r2, r5
 8005bd0:	f000 fc10 	bl	80063f4 <_realloc_r>
 8005bd4:	4606      	mov	r6, r0
 8005bd6:	2800      	cmp	r0, #0
 8005bd8:	d1e0      	bne.n	8005b9c <__ssputs_r+0x5c>
 8005bda:	4650      	mov	r0, sl
 8005bdc:	6921      	ldr	r1, [r4, #16]
 8005bde:	f7ff feb9 	bl	8005954 <_free_r>
 8005be2:	230c      	movs	r3, #12
 8005be4:	f8ca 3000 	str.w	r3, [sl]
 8005be8:	89a3      	ldrh	r3, [r4, #12]
 8005bea:	f04f 30ff 	mov.w	r0, #4294967295
 8005bee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bf2:	81a3      	strh	r3, [r4, #12]
 8005bf4:	e7e9      	b.n	8005bca <__ssputs_r+0x8a>
	...

08005bf8 <_svfiprintf_r>:
 8005bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bfc:	4698      	mov	r8, r3
 8005bfe:	898b      	ldrh	r3, [r1, #12]
 8005c00:	4607      	mov	r7, r0
 8005c02:	061b      	lsls	r3, r3, #24
 8005c04:	460d      	mov	r5, r1
 8005c06:	4614      	mov	r4, r2
 8005c08:	b09d      	sub	sp, #116	@ 0x74
 8005c0a:	d510      	bpl.n	8005c2e <_svfiprintf_r+0x36>
 8005c0c:	690b      	ldr	r3, [r1, #16]
 8005c0e:	b973      	cbnz	r3, 8005c2e <_svfiprintf_r+0x36>
 8005c10:	2140      	movs	r1, #64	@ 0x40
 8005c12:	f7ff ff09 	bl	8005a28 <_malloc_r>
 8005c16:	6028      	str	r0, [r5, #0]
 8005c18:	6128      	str	r0, [r5, #16]
 8005c1a:	b930      	cbnz	r0, 8005c2a <_svfiprintf_r+0x32>
 8005c1c:	230c      	movs	r3, #12
 8005c1e:	603b      	str	r3, [r7, #0]
 8005c20:	f04f 30ff 	mov.w	r0, #4294967295
 8005c24:	b01d      	add	sp, #116	@ 0x74
 8005c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c2a:	2340      	movs	r3, #64	@ 0x40
 8005c2c:	616b      	str	r3, [r5, #20]
 8005c2e:	2300      	movs	r3, #0
 8005c30:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c32:	2320      	movs	r3, #32
 8005c34:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005c38:	2330      	movs	r3, #48	@ 0x30
 8005c3a:	f04f 0901 	mov.w	r9, #1
 8005c3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c42:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005ddc <_svfiprintf_r+0x1e4>
 8005c46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005c4a:	4623      	mov	r3, r4
 8005c4c:	469a      	mov	sl, r3
 8005c4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c52:	b10a      	cbz	r2, 8005c58 <_svfiprintf_r+0x60>
 8005c54:	2a25      	cmp	r2, #37	@ 0x25
 8005c56:	d1f9      	bne.n	8005c4c <_svfiprintf_r+0x54>
 8005c58:	ebba 0b04 	subs.w	fp, sl, r4
 8005c5c:	d00b      	beq.n	8005c76 <_svfiprintf_r+0x7e>
 8005c5e:	465b      	mov	r3, fp
 8005c60:	4622      	mov	r2, r4
 8005c62:	4629      	mov	r1, r5
 8005c64:	4638      	mov	r0, r7
 8005c66:	f7ff ff6b 	bl	8005b40 <__ssputs_r>
 8005c6a:	3001      	adds	r0, #1
 8005c6c:	f000 80a7 	beq.w	8005dbe <_svfiprintf_r+0x1c6>
 8005c70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c72:	445a      	add	r2, fp
 8005c74:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c76:	f89a 3000 	ldrb.w	r3, [sl]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f000 809f 	beq.w	8005dbe <_svfiprintf_r+0x1c6>
 8005c80:	2300      	movs	r3, #0
 8005c82:	f04f 32ff 	mov.w	r2, #4294967295
 8005c86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c8a:	f10a 0a01 	add.w	sl, sl, #1
 8005c8e:	9304      	str	r3, [sp, #16]
 8005c90:	9307      	str	r3, [sp, #28]
 8005c92:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005c96:	931a      	str	r3, [sp, #104]	@ 0x68
 8005c98:	4654      	mov	r4, sl
 8005c9a:	2205      	movs	r2, #5
 8005c9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ca0:	484e      	ldr	r0, [pc, #312]	@ (8005ddc <_svfiprintf_r+0x1e4>)
 8005ca2:	f000 fb8b 	bl	80063bc <memchr>
 8005ca6:	9a04      	ldr	r2, [sp, #16]
 8005ca8:	b9d8      	cbnz	r0, 8005ce2 <_svfiprintf_r+0xea>
 8005caa:	06d0      	lsls	r0, r2, #27
 8005cac:	bf44      	itt	mi
 8005cae:	2320      	movmi	r3, #32
 8005cb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005cb4:	0711      	lsls	r1, r2, #28
 8005cb6:	bf44      	itt	mi
 8005cb8:	232b      	movmi	r3, #43	@ 0x2b
 8005cba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005cbe:	f89a 3000 	ldrb.w	r3, [sl]
 8005cc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cc4:	d015      	beq.n	8005cf2 <_svfiprintf_r+0xfa>
 8005cc6:	4654      	mov	r4, sl
 8005cc8:	2000      	movs	r0, #0
 8005cca:	f04f 0c0a 	mov.w	ip, #10
 8005cce:	9a07      	ldr	r2, [sp, #28]
 8005cd0:	4621      	mov	r1, r4
 8005cd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cd6:	3b30      	subs	r3, #48	@ 0x30
 8005cd8:	2b09      	cmp	r3, #9
 8005cda:	d94b      	bls.n	8005d74 <_svfiprintf_r+0x17c>
 8005cdc:	b1b0      	cbz	r0, 8005d0c <_svfiprintf_r+0x114>
 8005cde:	9207      	str	r2, [sp, #28]
 8005ce0:	e014      	b.n	8005d0c <_svfiprintf_r+0x114>
 8005ce2:	eba0 0308 	sub.w	r3, r0, r8
 8005ce6:	fa09 f303 	lsl.w	r3, r9, r3
 8005cea:	4313      	orrs	r3, r2
 8005cec:	46a2      	mov	sl, r4
 8005cee:	9304      	str	r3, [sp, #16]
 8005cf0:	e7d2      	b.n	8005c98 <_svfiprintf_r+0xa0>
 8005cf2:	9b03      	ldr	r3, [sp, #12]
 8005cf4:	1d19      	adds	r1, r3, #4
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	9103      	str	r1, [sp, #12]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	bfbb      	ittet	lt
 8005cfe:	425b      	neglt	r3, r3
 8005d00:	f042 0202 	orrlt.w	r2, r2, #2
 8005d04:	9307      	strge	r3, [sp, #28]
 8005d06:	9307      	strlt	r3, [sp, #28]
 8005d08:	bfb8      	it	lt
 8005d0a:	9204      	strlt	r2, [sp, #16]
 8005d0c:	7823      	ldrb	r3, [r4, #0]
 8005d0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d10:	d10a      	bne.n	8005d28 <_svfiprintf_r+0x130>
 8005d12:	7863      	ldrb	r3, [r4, #1]
 8005d14:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d16:	d132      	bne.n	8005d7e <_svfiprintf_r+0x186>
 8005d18:	9b03      	ldr	r3, [sp, #12]
 8005d1a:	3402      	adds	r4, #2
 8005d1c:	1d1a      	adds	r2, r3, #4
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	9203      	str	r2, [sp, #12]
 8005d22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d26:	9305      	str	r3, [sp, #20]
 8005d28:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005de0 <_svfiprintf_r+0x1e8>
 8005d2c:	2203      	movs	r2, #3
 8005d2e:	4650      	mov	r0, sl
 8005d30:	7821      	ldrb	r1, [r4, #0]
 8005d32:	f000 fb43 	bl	80063bc <memchr>
 8005d36:	b138      	cbz	r0, 8005d48 <_svfiprintf_r+0x150>
 8005d38:	2240      	movs	r2, #64	@ 0x40
 8005d3a:	9b04      	ldr	r3, [sp, #16]
 8005d3c:	eba0 000a 	sub.w	r0, r0, sl
 8005d40:	4082      	lsls	r2, r0
 8005d42:	4313      	orrs	r3, r2
 8005d44:	3401      	adds	r4, #1
 8005d46:	9304      	str	r3, [sp, #16]
 8005d48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d4c:	2206      	movs	r2, #6
 8005d4e:	4825      	ldr	r0, [pc, #148]	@ (8005de4 <_svfiprintf_r+0x1ec>)
 8005d50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005d54:	f000 fb32 	bl	80063bc <memchr>
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	d036      	beq.n	8005dca <_svfiprintf_r+0x1d2>
 8005d5c:	4b22      	ldr	r3, [pc, #136]	@ (8005de8 <_svfiprintf_r+0x1f0>)
 8005d5e:	bb1b      	cbnz	r3, 8005da8 <_svfiprintf_r+0x1b0>
 8005d60:	9b03      	ldr	r3, [sp, #12]
 8005d62:	3307      	adds	r3, #7
 8005d64:	f023 0307 	bic.w	r3, r3, #7
 8005d68:	3308      	adds	r3, #8
 8005d6a:	9303      	str	r3, [sp, #12]
 8005d6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d6e:	4433      	add	r3, r6
 8005d70:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d72:	e76a      	b.n	8005c4a <_svfiprintf_r+0x52>
 8005d74:	460c      	mov	r4, r1
 8005d76:	2001      	movs	r0, #1
 8005d78:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d7c:	e7a8      	b.n	8005cd0 <_svfiprintf_r+0xd8>
 8005d7e:	2300      	movs	r3, #0
 8005d80:	f04f 0c0a 	mov.w	ip, #10
 8005d84:	4619      	mov	r1, r3
 8005d86:	3401      	adds	r4, #1
 8005d88:	9305      	str	r3, [sp, #20]
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d90:	3a30      	subs	r2, #48	@ 0x30
 8005d92:	2a09      	cmp	r2, #9
 8005d94:	d903      	bls.n	8005d9e <_svfiprintf_r+0x1a6>
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d0c6      	beq.n	8005d28 <_svfiprintf_r+0x130>
 8005d9a:	9105      	str	r1, [sp, #20]
 8005d9c:	e7c4      	b.n	8005d28 <_svfiprintf_r+0x130>
 8005d9e:	4604      	mov	r4, r0
 8005da0:	2301      	movs	r3, #1
 8005da2:	fb0c 2101 	mla	r1, ip, r1, r2
 8005da6:	e7f0      	b.n	8005d8a <_svfiprintf_r+0x192>
 8005da8:	ab03      	add	r3, sp, #12
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	462a      	mov	r2, r5
 8005dae:	4638      	mov	r0, r7
 8005db0:	4b0e      	ldr	r3, [pc, #56]	@ (8005dec <_svfiprintf_r+0x1f4>)
 8005db2:	a904      	add	r1, sp, #16
 8005db4:	f3af 8000 	nop.w
 8005db8:	1c42      	adds	r2, r0, #1
 8005dba:	4606      	mov	r6, r0
 8005dbc:	d1d6      	bne.n	8005d6c <_svfiprintf_r+0x174>
 8005dbe:	89ab      	ldrh	r3, [r5, #12]
 8005dc0:	065b      	lsls	r3, r3, #25
 8005dc2:	f53f af2d 	bmi.w	8005c20 <_svfiprintf_r+0x28>
 8005dc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005dc8:	e72c      	b.n	8005c24 <_svfiprintf_r+0x2c>
 8005dca:	ab03      	add	r3, sp, #12
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	462a      	mov	r2, r5
 8005dd0:	4638      	mov	r0, r7
 8005dd2:	4b06      	ldr	r3, [pc, #24]	@ (8005dec <_svfiprintf_r+0x1f4>)
 8005dd4:	a904      	add	r1, sp, #16
 8005dd6:	f000 f87d 	bl	8005ed4 <_printf_i>
 8005dda:	e7ed      	b.n	8005db8 <_svfiprintf_r+0x1c0>
 8005ddc:	080072ca 	.word	0x080072ca
 8005de0:	080072d0 	.word	0x080072d0
 8005de4:	080072d4 	.word	0x080072d4
 8005de8:	00000000 	.word	0x00000000
 8005dec:	08005b41 	.word	0x08005b41

08005df0 <_printf_common>:
 8005df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005df4:	4616      	mov	r6, r2
 8005df6:	4698      	mov	r8, r3
 8005df8:	688a      	ldr	r2, [r1, #8]
 8005dfa:	690b      	ldr	r3, [r1, #16]
 8005dfc:	4607      	mov	r7, r0
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	bfb8      	it	lt
 8005e02:	4613      	movlt	r3, r2
 8005e04:	6033      	str	r3, [r6, #0]
 8005e06:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e0a:	460c      	mov	r4, r1
 8005e0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e10:	b10a      	cbz	r2, 8005e16 <_printf_common+0x26>
 8005e12:	3301      	adds	r3, #1
 8005e14:	6033      	str	r3, [r6, #0]
 8005e16:	6823      	ldr	r3, [r4, #0]
 8005e18:	0699      	lsls	r1, r3, #26
 8005e1a:	bf42      	ittt	mi
 8005e1c:	6833      	ldrmi	r3, [r6, #0]
 8005e1e:	3302      	addmi	r3, #2
 8005e20:	6033      	strmi	r3, [r6, #0]
 8005e22:	6825      	ldr	r5, [r4, #0]
 8005e24:	f015 0506 	ands.w	r5, r5, #6
 8005e28:	d106      	bne.n	8005e38 <_printf_common+0x48>
 8005e2a:	f104 0a19 	add.w	sl, r4, #25
 8005e2e:	68e3      	ldr	r3, [r4, #12]
 8005e30:	6832      	ldr	r2, [r6, #0]
 8005e32:	1a9b      	subs	r3, r3, r2
 8005e34:	42ab      	cmp	r3, r5
 8005e36:	dc2b      	bgt.n	8005e90 <_printf_common+0xa0>
 8005e38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005e3c:	6822      	ldr	r2, [r4, #0]
 8005e3e:	3b00      	subs	r3, #0
 8005e40:	bf18      	it	ne
 8005e42:	2301      	movne	r3, #1
 8005e44:	0692      	lsls	r2, r2, #26
 8005e46:	d430      	bmi.n	8005eaa <_printf_common+0xba>
 8005e48:	4641      	mov	r1, r8
 8005e4a:	4638      	mov	r0, r7
 8005e4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e50:	47c8      	blx	r9
 8005e52:	3001      	adds	r0, #1
 8005e54:	d023      	beq.n	8005e9e <_printf_common+0xae>
 8005e56:	6823      	ldr	r3, [r4, #0]
 8005e58:	6922      	ldr	r2, [r4, #16]
 8005e5a:	f003 0306 	and.w	r3, r3, #6
 8005e5e:	2b04      	cmp	r3, #4
 8005e60:	bf14      	ite	ne
 8005e62:	2500      	movne	r5, #0
 8005e64:	6833      	ldreq	r3, [r6, #0]
 8005e66:	f04f 0600 	mov.w	r6, #0
 8005e6a:	bf08      	it	eq
 8005e6c:	68e5      	ldreq	r5, [r4, #12]
 8005e6e:	f104 041a 	add.w	r4, r4, #26
 8005e72:	bf08      	it	eq
 8005e74:	1aed      	subeq	r5, r5, r3
 8005e76:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005e7a:	bf08      	it	eq
 8005e7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e80:	4293      	cmp	r3, r2
 8005e82:	bfc4      	itt	gt
 8005e84:	1a9b      	subgt	r3, r3, r2
 8005e86:	18ed      	addgt	r5, r5, r3
 8005e88:	42b5      	cmp	r5, r6
 8005e8a:	d11a      	bne.n	8005ec2 <_printf_common+0xd2>
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	e008      	b.n	8005ea2 <_printf_common+0xb2>
 8005e90:	2301      	movs	r3, #1
 8005e92:	4652      	mov	r2, sl
 8005e94:	4641      	mov	r1, r8
 8005e96:	4638      	mov	r0, r7
 8005e98:	47c8      	blx	r9
 8005e9a:	3001      	adds	r0, #1
 8005e9c:	d103      	bne.n	8005ea6 <_printf_common+0xb6>
 8005e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ea6:	3501      	adds	r5, #1
 8005ea8:	e7c1      	b.n	8005e2e <_printf_common+0x3e>
 8005eaa:	2030      	movs	r0, #48	@ 0x30
 8005eac:	18e1      	adds	r1, r4, r3
 8005eae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005eb2:	1c5a      	adds	r2, r3, #1
 8005eb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005eb8:	4422      	add	r2, r4
 8005eba:	3302      	adds	r3, #2
 8005ebc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ec0:	e7c2      	b.n	8005e48 <_printf_common+0x58>
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	4622      	mov	r2, r4
 8005ec6:	4641      	mov	r1, r8
 8005ec8:	4638      	mov	r0, r7
 8005eca:	47c8      	blx	r9
 8005ecc:	3001      	adds	r0, #1
 8005ece:	d0e6      	beq.n	8005e9e <_printf_common+0xae>
 8005ed0:	3601      	adds	r6, #1
 8005ed2:	e7d9      	b.n	8005e88 <_printf_common+0x98>

08005ed4 <_printf_i>:
 8005ed4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ed8:	7e0f      	ldrb	r7, [r1, #24]
 8005eda:	4691      	mov	r9, r2
 8005edc:	2f78      	cmp	r7, #120	@ 0x78
 8005ede:	4680      	mov	r8, r0
 8005ee0:	460c      	mov	r4, r1
 8005ee2:	469a      	mov	sl, r3
 8005ee4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005ee6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005eea:	d807      	bhi.n	8005efc <_printf_i+0x28>
 8005eec:	2f62      	cmp	r7, #98	@ 0x62
 8005eee:	d80a      	bhi.n	8005f06 <_printf_i+0x32>
 8005ef0:	2f00      	cmp	r7, #0
 8005ef2:	f000 80d1 	beq.w	8006098 <_printf_i+0x1c4>
 8005ef6:	2f58      	cmp	r7, #88	@ 0x58
 8005ef8:	f000 80b8 	beq.w	800606c <_printf_i+0x198>
 8005efc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f04:	e03a      	b.n	8005f7c <_printf_i+0xa8>
 8005f06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f0a:	2b15      	cmp	r3, #21
 8005f0c:	d8f6      	bhi.n	8005efc <_printf_i+0x28>
 8005f0e:	a101      	add	r1, pc, #4	@ (adr r1, 8005f14 <_printf_i+0x40>)
 8005f10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f14:	08005f6d 	.word	0x08005f6d
 8005f18:	08005f81 	.word	0x08005f81
 8005f1c:	08005efd 	.word	0x08005efd
 8005f20:	08005efd 	.word	0x08005efd
 8005f24:	08005efd 	.word	0x08005efd
 8005f28:	08005efd 	.word	0x08005efd
 8005f2c:	08005f81 	.word	0x08005f81
 8005f30:	08005efd 	.word	0x08005efd
 8005f34:	08005efd 	.word	0x08005efd
 8005f38:	08005efd 	.word	0x08005efd
 8005f3c:	08005efd 	.word	0x08005efd
 8005f40:	0800607f 	.word	0x0800607f
 8005f44:	08005fab 	.word	0x08005fab
 8005f48:	08006039 	.word	0x08006039
 8005f4c:	08005efd 	.word	0x08005efd
 8005f50:	08005efd 	.word	0x08005efd
 8005f54:	080060a1 	.word	0x080060a1
 8005f58:	08005efd 	.word	0x08005efd
 8005f5c:	08005fab 	.word	0x08005fab
 8005f60:	08005efd 	.word	0x08005efd
 8005f64:	08005efd 	.word	0x08005efd
 8005f68:	08006041 	.word	0x08006041
 8005f6c:	6833      	ldr	r3, [r6, #0]
 8005f6e:	1d1a      	adds	r2, r3, #4
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	6032      	str	r2, [r6, #0]
 8005f74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e09c      	b.n	80060ba <_printf_i+0x1e6>
 8005f80:	6833      	ldr	r3, [r6, #0]
 8005f82:	6820      	ldr	r0, [r4, #0]
 8005f84:	1d19      	adds	r1, r3, #4
 8005f86:	6031      	str	r1, [r6, #0]
 8005f88:	0606      	lsls	r6, r0, #24
 8005f8a:	d501      	bpl.n	8005f90 <_printf_i+0xbc>
 8005f8c:	681d      	ldr	r5, [r3, #0]
 8005f8e:	e003      	b.n	8005f98 <_printf_i+0xc4>
 8005f90:	0645      	lsls	r5, r0, #25
 8005f92:	d5fb      	bpl.n	8005f8c <_printf_i+0xb8>
 8005f94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005f98:	2d00      	cmp	r5, #0
 8005f9a:	da03      	bge.n	8005fa4 <_printf_i+0xd0>
 8005f9c:	232d      	movs	r3, #45	@ 0x2d
 8005f9e:	426d      	negs	r5, r5
 8005fa0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fa4:	230a      	movs	r3, #10
 8005fa6:	4858      	ldr	r0, [pc, #352]	@ (8006108 <_printf_i+0x234>)
 8005fa8:	e011      	b.n	8005fce <_printf_i+0xfa>
 8005faa:	6821      	ldr	r1, [r4, #0]
 8005fac:	6833      	ldr	r3, [r6, #0]
 8005fae:	0608      	lsls	r0, r1, #24
 8005fb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005fb4:	d402      	bmi.n	8005fbc <_printf_i+0xe8>
 8005fb6:	0649      	lsls	r1, r1, #25
 8005fb8:	bf48      	it	mi
 8005fba:	b2ad      	uxthmi	r5, r5
 8005fbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8005fbe:	6033      	str	r3, [r6, #0]
 8005fc0:	bf14      	ite	ne
 8005fc2:	230a      	movne	r3, #10
 8005fc4:	2308      	moveq	r3, #8
 8005fc6:	4850      	ldr	r0, [pc, #320]	@ (8006108 <_printf_i+0x234>)
 8005fc8:	2100      	movs	r1, #0
 8005fca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005fce:	6866      	ldr	r6, [r4, #4]
 8005fd0:	2e00      	cmp	r6, #0
 8005fd2:	60a6      	str	r6, [r4, #8]
 8005fd4:	db05      	blt.n	8005fe2 <_printf_i+0x10e>
 8005fd6:	6821      	ldr	r1, [r4, #0]
 8005fd8:	432e      	orrs	r6, r5
 8005fda:	f021 0104 	bic.w	r1, r1, #4
 8005fde:	6021      	str	r1, [r4, #0]
 8005fe0:	d04b      	beq.n	800607a <_printf_i+0x1a6>
 8005fe2:	4616      	mov	r6, r2
 8005fe4:	fbb5 f1f3 	udiv	r1, r5, r3
 8005fe8:	fb03 5711 	mls	r7, r3, r1, r5
 8005fec:	5dc7      	ldrb	r7, [r0, r7]
 8005fee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ff2:	462f      	mov	r7, r5
 8005ff4:	42bb      	cmp	r3, r7
 8005ff6:	460d      	mov	r5, r1
 8005ff8:	d9f4      	bls.n	8005fe4 <_printf_i+0x110>
 8005ffa:	2b08      	cmp	r3, #8
 8005ffc:	d10b      	bne.n	8006016 <_printf_i+0x142>
 8005ffe:	6823      	ldr	r3, [r4, #0]
 8006000:	07df      	lsls	r7, r3, #31
 8006002:	d508      	bpl.n	8006016 <_printf_i+0x142>
 8006004:	6923      	ldr	r3, [r4, #16]
 8006006:	6861      	ldr	r1, [r4, #4]
 8006008:	4299      	cmp	r1, r3
 800600a:	bfde      	ittt	le
 800600c:	2330      	movle	r3, #48	@ 0x30
 800600e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006012:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006016:	1b92      	subs	r2, r2, r6
 8006018:	6122      	str	r2, [r4, #16]
 800601a:	464b      	mov	r3, r9
 800601c:	4621      	mov	r1, r4
 800601e:	4640      	mov	r0, r8
 8006020:	f8cd a000 	str.w	sl, [sp]
 8006024:	aa03      	add	r2, sp, #12
 8006026:	f7ff fee3 	bl	8005df0 <_printf_common>
 800602a:	3001      	adds	r0, #1
 800602c:	d14a      	bne.n	80060c4 <_printf_i+0x1f0>
 800602e:	f04f 30ff 	mov.w	r0, #4294967295
 8006032:	b004      	add	sp, #16
 8006034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006038:	6823      	ldr	r3, [r4, #0]
 800603a:	f043 0320 	orr.w	r3, r3, #32
 800603e:	6023      	str	r3, [r4, #0]
 8006040:	2778      	movs	r7, #120	@ 0x78
 8006042:	4832      	ldr	r0, [pc, #200]	@ (800610c <_printf_i+0x238>)
 8006044:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006048:	6823      	ldr	r3, [r4, #0]
 800604a:	6831      	ldr	r1, [r6, #0]
 800604c:	061f      	lsls	r7, r3, #24
 800604e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006052:	d402      	bmi.n	800605a <_printf_i+0x186>
 8006054:	065f      	lsls	r7, r3, #25
 8006056:	bf48      	it	mi
 8006058:	b2ad      	uxthmi	r5, r5
 800605a:	6031      	str	r1, [r6, #0]
 800605c:	07d9      	lsls	r1, r3, #31
 800605e:	bf44      	itt	mi
 8006060:	f043 0320 	orrmi.w	r3, r3, #32
 8006064:	6023      	strmi	r3, [r4, #0]
 8006066:	b11d      	cbz	r5, 8006070 <_printf_i+0x19c>
 8006068:	2310      	movs	r3, #16
 800606a:	e7ad      	b.n	8005fc8 <_printf_i+0xf4>
 800606c:	4826      	ldr	r0, [pc, #152]	@ (8006108 <_printf_i+0x234>)
 800606e:	e7e9      	b.n	8006044 <_printf_i+0x170>
 8006070:	6823      	ldr	r3, [r4, #0]
 8006072:	f023 0320 	bic.w	r3, r3, #32
 8006076:	6023      	str	r3, [r4, #0]
 8006078:	e7f6      	b.n	8006068 <_printf_i+0x194>
 800607a:	4616      	mov	r6, r2
 800607c:	e7bd      	b.n	8005ffa <_printf_i+0x126>
 800607e:	6833      	ldr	r3, [r6, #0]
 8006080:	6825      	ldr	r5, [r4, #0]
 8006082:	1d18      	adds	r0, r3, #4
 8006084:	6961      	ldr	r1, [r4, #20]
 8006086:	6030      	str	r0, [r6, #0]
 8006088:	062e      	lsls	r6, r5, #24
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	d501      	bpl.n	8006092 <_printf_i+0x1be>
 800608e:	6019      	str	r1, [r3, #0]
 8006090:	e002      	b.n	8006098 <_printf_i+0x1c4>
 8006092:	0668      	lsls	r0, r5, #25
 8006094:	d5fb      	bpl.n	800608e <_printf_i+0x1ba>
 8006096:	8019      	strh	r1, [r3, #0]
 8006098:	2300      	movs	r3, #0
 800609a:	4616      	mov	r6, r2
 800609c:	6123      	str	r3, [r4, #16]
 800609e:	e7bc      	b.n	800601a <_printf_i+0x146>
 80060a0:	6833      	ldr	r3, [r6, #0]
 80060a2:	2100      	movs	r1, #0
 80060a4:	1d1a      	adds	r2, r3, #4
 80060a6:	6032      	str	r2, [r6, #0]
 80060a8:	681e      	ldr	r6, [r3, #0]
 80060aa:	6862      	ldr	r2, [r4, #4]
 80060ac:	4630      	mov	r0, r6
 80060ae:	f000 f985 	bl	80063bc <memchr>
 80060b2:	b108      	cbz	r0, 80060b8 <_printf_i+0x1e4>
 80060b4:	1b80      	subs	r0, r0, r6
 80060b6:	6060      	str	r0, [r4, #4]
 80060b8:	6863      	ldr	r3, [r4, #4]
 80060ba:	6123      	str	r3, [r4, #16]
 80060bc:	2300      	movs	r3, #0
 80060be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060c2:	e7aa      	b.n	800601a <_printf_i+0x146>
 80060c4:	4632      	mov	r2, r6
 80060c6:	4649      	mov	r1, r9
 80060c8:	4640      	mov	r0, r8
 80060ca:	6923      	ldr	r3, [r4, #16]
 80060cc:	47d0      	blx	sl
 80060ce:	3001      	adds	r0, #1
 80060d0:	d0ad      	beq.n	800602e <_printf_i+0x15a>
 80060d2:	6823      	ldr	r3, [r4, #0]
 80060d4:	079b      	lsls	r3, r3, #30
 80060d6:	d413      	bmi.n	8006100 <_printf_i+0x22c>
 80060d8:	68e0      	ldr	r0, [r4, #12]
 80060da:	9b03      	ldr	r3, [sp, #12]
 80060dc:	4298      	cmp	r0, r3
 80060de:	bfb8      	it	lt
 80060e0:	4618      	movlt	r0, r3
 80060e2:	e7a6      	b.n	8006032 <_printf_i+0x15e>
 80060e4:	2301      	movs	r3, #1
 80060e6:	4632      	mov	r2, r6
 80060e8:	4649      	mov	r1, r9
 80060ea:	4640      	mov	r0, r8
 80060ec:	47d0      	blx	sl
 80060ee:	3001      	adds	r0, #1
 80060f0:	d09d      	beq.n	800602e <_printf_i+0x15a>
 80060f2:	3501      	adds	r5, #1
 80060f4:	68e3      	ldr	r3, [r4, #12]
 80060f6:	9903      	ldr	r1, [sp, #12]
 80060f8:	1a5b      	subs	r3, r3, r1
 80060fa:	42ab      	cmp	r3, r5
 80060fc:	dcf2      	bgt.n	80060e4 <_printf_i+0x210>
 80060fe:	e7eb      	b.n	80060d8 <_printf_i+0x204>
 8006100:	2500      	movs	r5, #0
 8006102:	f104 0619 	add.w	r6, r4, #25
 8006106:	e7f5      	b.n	80060f4 <_printf_i+0x220>
 8006108:	080072db 	.word	0x080072db
 800610c:	080072ec 	.word	0x080072ec

08006110 <__sflush_r>:
 8006110:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006116:	0716      	lsls	r6, r2, #28
 8006118:	4605      	mov	r5, r0
 800611a:	460c      	mov	r4, r1
 800611c:	d454      	bmi.n	80061c8 <__sflush_r+0xb8>
 800611e:	684b      	ldr	r3, [r1, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	dc02      	bgt.n	800612a <__sflush_r+0x1a>
 8006124:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006126:	2b00      	cmp	r3, #0
 8006128:	dd48      	ble.n	80061bc <__sflush_r+0xac>
 800612a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800612c:	2e00      	cmp	r6, #0
 800612e:	d045      	beq.n	80061bc <__sflush_r+0xac>
 8006130:	2300      	movs	r3, #0
 8006132:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006136:	682f      	ldr	r7, [r5, #0]
 8006138:	6a21      	ldr	r1, [r4, #32]
 800613a:	602b      	str	r3, [r5, #0]
 800613c:	d030      	beq.n	80061a0 <__sflush_r+0x90>
 800613e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006140:	89a3      	ldrh	r3, [r4, #12]
 8006142:	0759      	lsls	r1, r3, #29
 8006144:	d505      	bpl.n	8006152 <__sflush_r+0x42>
 8006146:	6863      	ldr	r3, [r4, #4]
 8006148:	1ad2      	subs	r2, r2, r3
 800614a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800614c:	b10b      	cbz	r3, 8006152 <__sflush_r+0x42>
 800614e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006150:	1ad2      	subs	r2, r2, r3
 8006152:	2300      	movs	r3, #0
 8006154:	4628      	mov	r0, r5
 8006156:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006158:	6a21      	ldr	r1, [r4, #32]
 800615a:	47b0      	blx	r6
 800615c:	1c43      	adds	r3, r0, #1
 800615e:	89a3      	ldrh	r3, [r4, #12]
 8006160:	d106      	bne.n	8006170 <__sflush_r+0x60>
 8006162:	6829      	ldr	r1, [r5, #0]
 8006164:	291d      	cmp	r1, #29
 8006166:	d82b      	bhi.n	80061c0 <__sflush_r+0xb0>
 8006168:	4a28      	ldr	r2, [pc, #160]	@ (800620c <__sflush_r+0xfc>)
 800616a:	40ca      	lsrs	r2, r1
 800616c:	07d6      	lsls	r6, r2, #31
 800616e:	d527      	bpl.n	80061c0 <__sflush_r+0xb0>
 8006170:	2200      	movs	r2, #0
 8006172:	6062      	str	r2, [r4, #4]
 8006174:	6922      	ldr	r2, [r4, #16]
 8006176:	04d9      	lsls	r1, r3, #19
 8006178:	6022      	str	r2, [r4, #0]
 800617a:	d504      	bpl.n	8006186 <__sflush_r+0x76>
 800617c:	1c42      	adds	r2, r0, #1
 800617e:	d101      	bne.n	8006184 <__sflush_r+0x74>
 8006180:	682b      	ldr	r3, [r5, #0]
 8006182:	b903      	cbnz	r3, 8006186 <__sflush_r+0x76>
 8006184:	6560      	str	r0, [r4, #84]	@ 0x54
 8006186:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006188:	602f      	str	r7, [r5, #0]
 800618a:	b1b9      	cbz	r1, 80061bc <__sflush_r+0xac>
 800618c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006190:	4299      	cmp	r1, r3
 8006192:	d002      	beq.n	800619a <__sflush_r+0x8a>
 8006194:	4628      	mov	r0, r5
 8006196:	f7ff fbdd 	bl	8005954 <_free_r>
 800619a:	2300      	movs	r3, #0
 800619c:	6363      	str	r3, [r4, #52]	@ 0x34
 800619e:	e00d      	b.n	80061bc <__sflush_r+0xac>
 80061a0:	2301      	movs	r3, #1
 80061a2:	4628      	mov	r0, r5
 80061a4:	47b0      	blx	r6
 80061a6:	4602      	mov	r2, r0
 80061a8:	1c50      	adds	r0, r2, #1
 80061aa:	d1c9      	bne.n	8006140 <__sflush_r+0x30>
 80061ac:	682b      	ldr	r3, [r5, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d0c6      	beq.n	8006140 <__sflush_r+0x30>
 80061b2:	2b1d      	cmp	r3, #29
 80061b4:	d001      	beq.n	80061ba <__sflush_r+0xaa>
 80061b6:	2b16      	cmp	r3, #22
 80061b8:	d11d      	bne.n	80061f6 <__sflush_r+0xe6>
 80061ba:	602f      	str	r7, [r5, #0]
 80061bc:	2000      	movs	r0, #0
 80061be:	e021      	b.n	8006204 <__sflush_r+0xf4>
 80061c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061c4:	b21b      	sxth	r3, r3
 80061c6:	e01a      	b.n	80061fe <__sflush_r+0xee>
 80061c8:	690f      	ldr	r7, [r1, #16]
 80061ca:	2f00      	cmp	r7, #0
 80061cc:	d0f6      	beq.n	80061bc <__sflush_r+0xac>
 80061ce:	0793      	lsls	r3, r2, #30
 80061d0:	bf18      	it	ne
 80061d2:	2300      	movne	r3, #0
 80061d4:	680e      	ldr	r6, [r1, #0]
 80061d6:	bf08      	it	eq
 80061d8:	694b      	ldreq	r3, [r1, #20]
 80061da:	1bf6      	subs	r6, r6, r7
 80061dc:	600f      	str	r7, [r1, #0]
 80061de:	608b      	str	r3, [r1, #8]
 80061e0:	2e00      	cmp	r6, #0
 80061e2:	ddeb      	ble.n	80061bc <__sflush_r+0xac>
 80061e4:	4633      	mov	r3, r6
 80061e6:	463a      	mov	r2, r7
 80061e8:	4628      	mov	r0, r5
 80061ea:	6a21      	ldr	r1, [r4, #32]
 80061ec:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80061f0:	47e0      	blx	ip
 80061f2:	2800      	cmp	r0, #0
 80061f4:	dc07      	bgt.n	8006206 <__sflush_r+0xf6>
 80061f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006202:	81a3      	strh	r3, [r4, #12]
 8006204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006206:	4407      	add	r7, r0
 8006208:	1a36      	subs	r6, r6, r0
 800620a:	e7e9      	b.n	80061e0 <__sflush_r+0xd0>
 800620c:	20400001 	.word	0x20400001

08006210 <_fflush_r>:
 8006210:	b538      	push	{r3, r4, r5, lr}
 8006212:	690b      	ldr	r3, [r1, #16]
 8006214:	4605      	mov	r5, r0
 8006216:	460c      	mov	r4, r1
 8006218:	b913      	cbnz	r3, 8006220 <_fflush_r+0x10>
 800621a:	2500      	movs	r5, #0
 800621c:	4628      	mov	r0, r5
 800621e:	bd38      	pop	{r3, r4, r5, pc}
 8006220:	b118      	cbz	r0, 800622a <_fflush_r+0x1a>
 8006222:	6a03      	ldr	r3, [r0, #32]
 8006224:	b90b      	cbnz	r3, 800622a <_fflush_r+0x1a>
 8006226:	f7ff f98b 	bl	8005540 <__sinit>
 800622a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d0f3      	beq.n	800621a <_fflush_r+0xa>
 8006232:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006234:	07d0      	lsls	r0, r2, #31
 8006236:	d404      	bmi.n	8006242 <_fflush_r+0x32>
 8006238:	0599      	lsls	r1, r3, #22
 800623a:	d402      	bmi.n	8006242 <_fflush_r+0x32>
 800623c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800623e:	f7ff fb86 	bl	800594e <__retarget_lock_acquire_recursive>
 8006242:	4628      	mov	r0, r5
 8006244:	4621      	mov	r1, r4
 8006246:	f7ff ff63 	bl	8006110 <__sflush_r>
 800624a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800624c:	4605      	mov	r5, r0
 800624e:	07da      	lsls	r2, r3, #31
 8006250:	d4e4      	bmi.n	800621c <_fflush_r+0xc>
 8006252:	89a3      	ldrh	r3, [r4, #12]
 8006254:	059b      	lsls	r3, r3, #22
 8006256:	d4e1      	bmi.n	800621c <_fflush_r+0xc>
 8006258:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800625a:	f7ff fb79 	bl	8005950 <__retarget_lock_release_recursive>
 800625e:	e7dd      	b.n	800621c <_fflush_r+0xc>

08006260 <__swhatbuf_r>:
 8006260:	b570      	push	{r4, r5, r6, lr}
 8006262:	460c      	mov	r4, r1
 8006264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006268:	4615      	mov	r5, r2
 800626a:	2900      	cmp	r1, #0
 800626c:	461e      	mov	r6, r3
 800626e:	b096      	sub	sp, #88	@ 0x58
 8006270:	da0c      	bge.n	800628c <__swhatbuf_r+0x2c>
 8006272:	89a3      	ldrh	r3, [r4, #12]
 8006274:	2100      	movs	r1, #0
 8006276:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800627a:	bf14      	ite	ne
 800627c:	2340      	movne	r3, #64	@ 0x40
 800627e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006282:	2000      	movs	r0, #0
 8006284:	6031      	str	r1, [r6, #0]
 8006286:	602b      	str	r3, [r5, #0]
 8006288:	b016      	add	sp, #88	@ 0x58
 800628a:	bd70      	pop	{r4, r5, r6, pc}
 800628c:	466a      	mov	r2, sp
 800628e:	f000 f863 	bl	8006358 <_fstat_r>
 8006292:	2800      	cmp	r0, #0
 8006294:	dbed      	blt.n	8006272 <__swhatbuf_r+0x12>
 8006296:	9901      	ldr	r1, [sp, #4]
 8006298:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800629c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80062a0:	4259      	negs	r1, r3
 80062a2:	4159      	adcs	r1, r3
 80062a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80062a8:	e7eb      	b.n	8006282 <__swhatbuf_r+0x22>

080062aa <__smakebuf_r>:
 80062aa:	898b      	ldrh	r3, [r1, #12]
 80062ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062ae:	079d      	lsls	r5, r3, #30
 80062b0:	4606      	mov	r6, r0
 80062b2:	460c      	mov	r4, r1
 80062b4:	d507      	bpl.n	80062c6 <__smakebuf_r+0x1c>
 80062b6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80062ba:	6023      	str	r3, [r4, #0]
 80062bc:	6123      	str	r3, [r4, #16]
 80062be:	2301      	movs	r3, #1
 80062c0:	6163      	str	r3, [r4, #20]
 80062c2:	b003      	add	sp, #12
 80062c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062c6:	466a      	mov	r2, sp
 80062c8:	ab01      	add	r3, sp, #4
 80062ca:	f7ff ffc9 	bl	8006260 <__swhatbuf_r>
 80062ce:	9f00      	ldr	r7, [sp, #0]
 80062d0:	4605      	mov	r5, r0
 80062d2:	4639      	mov	r1, r7
 80062d4:	4630      	mov	r0, r6
 80062d6:	f7ff fba7 	bl	8005a28 <_malloc_r>
 80062da:	b948      	cbnz	r0, 80062f0 <__smakebuf_r+0x46>
 80062dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062e0:	059a      	lsls	r2, r3, #22
 80062e2:	d4ee      	bmi.n	80062c2 <__smakebuf_r+0x18>
 80062e4:	f023 0303 	bic.w	r3, r3, #3
 80062e8:	f043 0302 	orr.w	r3, r3, #2
 80062ec:	81a3      	strh	r3, [r4, #12]
 80062ee:	e7e2      	b.n	80062b6 <__smakebuf_r+0xc>
 80062f0:	89a3      	ldrh	r3, [r4, #12]
 80062f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80062f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062fa:	81a3      	strh	r3, [r4, #12]
 80062fc:	9b01      	ldr	r3, [sp, #4]
 80062fe:	6020      	str	r0, [r4, #0]
 8006300:	b15b      	cbz	r3, 800631a <__smakebuf_r+0x70>
 8006302:	4630      	mov	r0, r6
 8006304:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006308:	f000 f838 	bl	800637c <_isatty_r>
 800630c:	b128      	cbz	r0, 800631a <__smakebuf_r+0x70>
 800630e:	89a3      	ldrh	r3, [r4, #12]
 8006310:	f023 0303 	bic.w	r3, r3, #3
 8006314:	f043 0301 	orr.w	r3, r3, #1
 8006318:	81a3      	strh	r3, [r4, #12]
 800631a:	89a3      	ldrh	r3, [r4, #12]
 800631c:	431d      	orrs	r5, r3
 800631e:	81a5      	strh	r5, [r4, #12]
 8006320:	e7cf      	b.n	80062c2 <__smakebuf_r+0x18>

08006322 <memmove>:
 8006322:	4288      	cmp	r0, r1
 8006324:	b510      	push	{r4, lr}
 8006326:	eb01 0402 	add.w	r4, r1, r2
 800632a:	d902      	bls.n	8006332 <memmove+0x10>
 800632c:	4284      	cmp	r4, r0
 800632e:	4623      	mov	r3, r4
 8006330:	d807      	bhi.n	8006342 <memmove+0x20>
 8006332:	1e43      	subs	r3, r0, #1
 8006334:	42a1      	cmp	r1, r4
 8006336:	d008      	beq.n	800634a <memmove+0x28>
 8006338:	f811 2b01 	ldrb.w	r2, [r1], #1
 800633c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006340:	e7f8      	b.n	8006334 <memmove+0x12>
 8006342:	4601      	mov	r1, r0
 8006344:	4402      	add	r2, r0
 8006346:	428a      	cmp	r2, r1
 8006348:	d100      	bne.n	800634c <memmove+0x2a>
 800634a:	bd10      	pop	{r4, pc}
 800634c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006350:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006354:	e7f7      	b.n	8006346 <memmove+0x24>
	...

08006358 <_fstat_r>:
 8006358:	b538      	push	{r3, r4, r5, lr}
 800635a:	2300      	movs	r3, #0
 800635c:	4d06      	ldr	r5, [pc, #24]	@ (8006378 <_fstat_r+0x20>)
 800635e:	4604      	mov	r4, r0
 8006360:	4608      	mov	r0, r1
 8006362:	4611      	mov	r1, r2
 8006364:	602b      	str	r3, [r5, #0]
 8006366:	f7fc f9ab 	bl	80026c0 <_fstat>
 800636a:	1c43      	adds	r3, r0, #1
 800636c:	d102      	bne.n	8006374 <_fstat_r+0x1c>
 800636e:	682b      	ldr	r3, [r5, #0]
 8006370:	b103      	cbz	r3, 8006374 <_fstat_r+0x1c>
 8006372:	6023      	str	r3, [r4, #0]
 8006374:	bd38      	pop	{r3, r4, r5, pc}
 8006376:	bf00      	nop
 8006378:	200007d0 	.word	0x200007d0

0800637c <_isatty_r>:
 800637c:	b538      	push	{r3, r4, r5, lr}
 800637e:	2300      	movs	r3, #0
 8006380:	4d05      	ldr	r5, [pc, #20]	@ (8006398 <_isatty_r+0x1c>)
 8006382:	4604      	mov	r4, r0
 8006384:	4608      	mov	r0, r1
 8006386:	602b      	str	r3, [r5, #0]
 8006388:	f7fc f9a9 	bl	80026de <_isatty>
 800638c:	1c43      	adds	r3, r0, #1
 800638e:	d102      	bne.n	8006396 <_isatty_r+0x1a>
 8006390:	682b      	ldr	r3, [r5, #0]
 8006392:	b103      	cbz	r3, 8006396 <_isatty_r+0x1a>
 8006394:	6023      	str	r3, [r4, #0]
 8006396:	bd38      	pop	{r3, r4, r5, pc}
 8006398:	200007d0 	.word	0x200007d0

0800639c <_sbrk_r>:
 800639c:	b538      	push	{r3, r4, r5, lr}
 800639e:	2300      	movs	r3, #0
 80063a0:	4d05      	ldr	r5, [pc, #20]	@ (80063b8 <_sbrk_r+0x1c>)
 80063a2:	4604      	mov	r4, r0
 80063a4:	4608      	mov	r0, r1
 80063a6:	602b      	str	r3, [r5, #0]
 80063a8:	f7fc f9b0 	bl	800270c <_sbrk>
 80063ac:	1c43      	adds	r3, r0, #1
 80063ae:	d102      	bne.n	80063b6 <_sbrk_r+0x1a>
 80063b0:	682b      	ldr	r3, [r5, #0]
 80063b2:	b103      	cbz	r3, 80063b6 <_sbrk_r+0x1a>
 80063b4:	6023      	str	r3, [r4, #0]
 80063b6:	bd38      	pop	{r3, r4, r5, pc}
 80063b8:	200007d0 	.word	0x200007d0

080063bc <memchr>:
 80063bc:	4603      	mov	r3, r0
 80063be:	b510      	push	{r4, lr}
 80063c0:	b2c9      	uxtb	r1, r1
 80063c2:	4402      	add	r2, r0
 80063c4:	4293      	cmp	r3, r2
 80063c6:	4618      	mov	r0, r3
 80063c8:	d101      	bne.n	80063ce <memchr+0x12>
 80063ca:	2000      	movs	r0, #0
 80063cc:	e003      	b.n	80063d6 <memchr+0x1a>
 80063ce:	7804      	ldrb	r4, [r0, #0]
 80063d0:	3301      	adds	r3, #1
 80063d2:	428c      	cmp	r4, r1
 80063d4:	d1f6      	bne.n	80063c4 <memchr+0x8>
 80063d6:	bd10      	pop	{r4, pc}

080063d8 <memcpy>:
 80063d8:	440a      	add	r2, r1
 80063da:	4291      	cmp	r1, r2
 80063dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80063e0:	d100      	bne.n	80063e4 <memcpy+0xc>
 80063e2:	4770      	bx	lr
 80063e4:	b510      	push	{r4, lr}
 80063e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063ea:	4291      	cmp	r1, r2
 80063ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063f0:	d1f9      	bne.n	80063e6 <memcpy+0xe>
 80063f2:	bd10      	pop	{r4, pc}

080063f4 <_realloc_r>:
 80063f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063f8:	4607      	mov	r7, r0
 80063fa:	4614      	mov	r4, r2
 80063fc:	460d      	mov	r5, r1
 80063fe:	b921      	cbnz	r1, 800640a <_realloc_r+0x16>
 8006400:	4611      	mov	r1, r2
 8006402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006406:	f7ff bb0f 	b.w	8005a28 <_malloc_r>
 800640a:	b92a      	cbnz	r2, 8006418 <_realloc_r+0x24>
 800640c:	f7ff faa2 	bl	8005954 <_free_r>
 8006410:	4625      	mov	r5, r4
 8006412:	4628      	mov	r0, r5
 8006414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006418:	f000 f81a 	bl	8006450 <_malloc_usable_size_r>
 800641c:	4284      	cmp	r4, r0
 800641e:	4606      	mov	r6, r0
 8006420:	d802      	bhi.n	8006428 <_realloc_r+0x34>
 8006422:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006426:	d8f4      	bhi.n	8006412 <_realloc_r+0x1e>
 8006428:	4621      	mov	r1, r4
 800642a:	4638      	mov	r0, r7
 800642c:	f7ff fafc 	bl	8005a28 <_malloc_r>
 8006430:	4680      	mov	r8, r0
 8006432:	b908      	cbnz	r0, 8006438 <_realloc_r+0x44>
 8006434:	4645      	mov	r5, r8
 8006436:	e7ec      	b.n	8006412 <_realloc_r+0x1e>
 8006438:	42b4      	cmp	r4, r6
 800643a:	4622      	mov	r2, r4
 800643c:	4629      	mov	r1, r5
 800643e:	bf28      	it	cs
 8006440:	4632      	movcs	r2, r6
 8006442:	f7ff ffc9 	bl	80063d8 <memcpy>
 8006446:	4629      	mov	r1, r5
 8006448:	4638      	mov	r0, r7
 800644a:	f7ff fa83 	bl	8005954 <_free_r>
 800644e:	e7f1      	b.n	8006434 <_realloc_r+0x40>

08006450 <_malloc_usable_size_r>:
 8006450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006454:	1f18      	subs	r0, r3, #4
 8006456:	2b00      	cmp	r3, #0
 8006458:	bfbc      	itt	lt
 800645a:	580b      	ldrlt	r3, [r1, r0]
 800645c:	18c0      	addlt	r0, r0, r3
 800645e:	4770      	bx	lr

08006460 <_init>:
 8006460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006462:	bf00      	nop
 8006464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006466:	bc08      	pop	{r3}
 8006468:	469e      	mov	lr, r3
 800646a:	4770      	bx	lr

0800646c <_fini>:
 800646c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800646e:	bf00      	nop
 8006470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006472:	bc08      	pop	{r3}
 8006474:	469e      	mov	lr, r3
 8006476:	4770      	bx	lr
